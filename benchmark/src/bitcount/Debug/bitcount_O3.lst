
bitcount.elf:     file format elf32-msp430

SYMBOL TABLE:
0000fffe l    d  __reset_vector	00000000 __reset_vector
00008000 l    d  .rodata	00000000 .rodata
00008110 l    d  .text	00000000 .text
00004000 l    d  .data	00000000 .data
00004002 l    d  .bss	00000000 .bss
00004014 l    d  .noinit	00000000 .noinit
00000000 l    d  .MP430.attributes	00000000 .MP430.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_macinfo	00000000 .debug_macinfo
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 /opt/ti/ccsv8/tools/compiler/msp430-gcc-7.3.1.24_linux64/bin/../lib/gcc/msp430-elf/7.3.1/../../../../msp430-elf/lib/430/crt0.o
0000fffe l       __reset_vector	00000000 __msp430_resetvec_hook
0000816c l       .text	00000000 _msp430_run_array
0000817a l       .text	00000000 _msp430_run_done
00000000 l    df *ABS*	00000000 main.c
00008000 l     O .rodata	00000100 bits
00000000 l    df *ABS*	00000000 /opt/ti/ccsv8/tools/compiler/msp430-gcc-7.3.1.24_linux64/bin/../lib/gcc/msp430-elf/7.3.1/430/crtbegin.o
00008108 l     O .rodata	00000000 __CTOR_LIST__
0000810c l     O .rodata	00000000 __DTOR_LIST__
00008100 l     O .rodata	00000000 __EH_FRAME_BEGIN__
0000892a l     O .text	00000000 __TMC_LIST__
00008180 l     F .text	00000000 deregister_tm_clones
0000819a l     F .text	00000000 register_tm_clones
000081c8 l     F .text	00000000 __do_global_dtors_aux
00004002 l     O .bss	00000000 completed.3056
00004004 l     O .bss	00000000 dtor_idx.3058
00008216 l     F .text	00000000 call___do_global_dtors_aux
00008216 l     F .text	00000000 frame_dummy
00004006 l     O .bss	00000000 object.3071
0000822e l     F .text	00000000 call_frame_dummy
00000000 l    df *ABS*	00000000 /opt/ti/ccsv8/tools/compiler/msp430-gcc-7.3.1.24_linux64/bin/../lib/gcc/msp430-elf/7.3.1/430/crtend.o
0000810a l     O .rodata	00000000 __CTOR_END__
00008100 l     O .rodata	00000000 __FRAME_END__
000088f4 l     F .text	00000000 __do_global_ctors_aux
0000890e l     F .text	00000000 call___do_global_ctors_aux
00000000 l    df *ABS*	00000000 crt_bss.o
00000000 l    df *ABS*	00000000 crt_movedata.o
00000000 l    df *ABS*	00000000 crt_main.o
00000000 l    df *ABS*	00000000 srli.o
00000000 l    df *ABS*	00000000 lib_a-memmove.o
00000000 l    df *ABS*	00000000 lib_a-memset.o
00000000 l    df *ABS*	00000000 /opt/ti/ccsv8/tools/compiler/msp430-gcc-7.3.1.24_linux64/bin/../lib/gcc/msp430-elf/7.3.1/../../../../msp430-elf/lib/430/crtn.o
0000880a g       .text	00000000 .hidden __mspabi_srli_9
0000885a g       .text	00000000 .hidden __mspabi_srll_10
00008806 g       .text	00000000 .hidden __mspabi_srli_10
00008338 g     F .text	000000a4 ntbl_bitcount
000087f2 g       .text	00000000 .hidden __mspabi_srli_15
000088a6 g     F .text	00000038 memmove
0000881e g       .text	00000000 .hidden __mspabi_srli_4
00008812 g       .text	00000000 .hidden __mspabi_srli_7
0000886c g       .text	00000000 .hidden __mspabi_srll_7
00008884 g       .text	00000000 .hidden __mspabi_srll_3
000087e4 g       .text	00000000 .hidden __mspabi_func_epilog_6
0000892a g     O .text	00000000 .hidden __TMC_END__
00008848 g       .text	00000000 .hidden __mspabi_srll_13
0000810e g     O .rodata	00000000 .hidden __DTOR_END__
00008104 g       .rodata	00000000 __fini_array_end
000087fe g       .text	00000000 .hidden __mspabi_srli_12
00008110 g     F .text	00000004 __crt0_start
00004000 g     O .data	00000000 .hidden __dso_handle
00008114 g     F .text	0000000e __crt0_init_bss
00000012 g       *ABS*	00000000 __bsssize
00008136 g     F .text	0000000a __crt0_call_init_then_main
000087ee g       .text	00000000 .hidden __mspabi_func_epilog_1
000087ea g       .text	00000000 .hidden __mspabi_func_epilog_3
00008878 g       .text	00000000 .hidden __mspabi_srll_5
00008836 g       .text	00000000 .hidden __mspabi_srli
00008854 g       .text	00000000 .hidden __mspabi_srll_11
0000881a g       .text	00000000 .hidden __mspabi_srli_5
000083dc g     F .text	0000003e BW_btbl_bitcount
00000000  w      *UND*	00000000 __deregister_frame_info
00004014 g       .noinit	00000000 end
00000000  w      *UND*	00000000 _ITM_registerTMCloneTable
00008872 g       .text	00000000 .hidden __mspabi_srll_6
00008110 g       .text	00000000 _start
0000815c g     F .text	00000000 _msp430_run_fini_array
0000882a g       .text	00000000 .hidden __mspabi_srli_1
00008842 g       .text	00000000 .hidden __mspabi_srll_14
00008296 g     F .text	000000a2 bitcount
000087f6 g       .text	00000000 .hidden __mspabi_srli_14
00000002 g       *ABS*	00000000 __romdatacopysize
0000822e g     F .text	00000008 init
00008802 g       .text	00000000 .hidden __mspabi_srli_11
00000000  w      *UND*	00000000 _ITM_deregisterTMCloneTable
00008104 g       .rodata	00000000 __fini_array_start
00000000  w      *ABS*	00000000 __rom_highdatacopysize
00008456 g     F .text	00000042 ntbl_bitcnt
0000890e g       .text	00000000 __msp430_init
000088de g     F .text	00000014 memset
000084c8 g     F .text	0000031a main
0000887e g       .text	00000000 .hidden __mspabi_srll_4
00008104 g       .rodata	00000000 __init_array_end
00008826 g       .text	00000000 .hidden __mspabi_srli_2
00008498 g     F .text	00000030 bit_shifter
00000000  w      *ABS*	00000000 __high_bsssize
00008270 g     F .text	00000026 bit_count
00000000  w      *ABS*	00000000 __rom_highdatastart
0000892a g       .text	00000000 __msp430_fini_end
0000884e g       .text	00000000 .hidden __mspabi_srll_12
0000892a g       *ABS*	00000000 __romdatastart
00008140 g     F .text	00000000 _msp430_run_init_array
00008816 g       .text	00000000 .hidden __mspabi_srli_6
00008104 g       .rodata	00000000 __preinit_array_end
00008822 g       .text	00000000 .hidden __mspabi_srli_3
00000000  w      *ABS*	00000000 __high_datastart
00000000  w      *ABS*	00000000 __upper_data_init
00004002 g       .bss	00000000 __bssstart
000087e6 g       .text	00000000 .hidden __mspabi_func_epilog_5
00008236 g     F .text	0000003a btbl_bitcnt
00008000 g       .noinit	00000000 __stack
00008860 g       .text	00000000 .hidden __mspabi_srll_9
00004002 g       .data	00000000 _edata
00008920 g       .text	00000000 __msp430_init_end
000088a0 g       .text	00000000 .hidden __mspabi_srll
00000000  w      *ABS*	00000000 __high_bssstart
0000883c g       .text	00000000 .hidden __mspabi_srll_15
00008104 g       .rodata	00000000 __init_array_start
0000841a g     F .text	0000003c AR_btbl_bitcount
000087fa g       .text	00000000 .hidden __mspabi_srli_13
00004000 g       .data	00000000 __datastart
00008866 g       .text	00000000 .hidden __mspabi_srll_8
00008890 g       .text	00000000 .hidden __mspabi_srll_1
00008104 g       .rodata	00000000 __preinit_array_start
00008122 g     F .text	00000014 __crt0_movedata
000087ec g       .text	00000000 .hidden __mspabi_func_epilog_2
00000000  w      *UND*	00000000 __register_frame_info
0000814e g     F .text	00000000 _msp430_run_preinit_array
000087e2 g       .text	00000000 .hidden __mspabi_func_epilog_7
000087e8 g       .text	00000000 .hidden __mspabi_func_epilog_4
0000888a g       .text	00000000 .hidden __mspabi_srll_2
00008920 g       .text	00000000 __msp430_fini
0000880e g       .text	00000000 .hidden __mspabi_srli_8



Disassembly of section .text:

00008110 <__crt0_start>:
    8110:	31 40 00 80 	mov	#32768,	r1	;#0x8000

00008114 <__crt0_init_bss>:
    8114:	3c 40 02 40 	mov	#16386,	r12	;#0x4002

00008118 <.Loc.74.1>:
    8118:	0d 43       	clr	r13		;

0000811a <.Loc.75.1>:
    811a:	3e 40 12 00 	mov	#18,	r14	;#0x0012

0000811e <.Loc.79.1>:
    811e:	b0 12 de 88 	call	#35038		;#0x88de

00008122 <__crt0_movedata>:
    8122:	3c 40 00 40 	mov	#16384,	r12	;#0x4000

00008126 <.Loc.116.1>:
    8126:	3d 40 2a 89 	mov	#35114,	r13	;#0x892a

0000812a <.Loc.119.1>:
    812a:	0d 9c       	cmp	r12,	r13	;

0000812c <.Loc.120.1>:
    812c:	04 24       	jz	$+10     	;abs 0x8136

0000812e <.Loc.122.1>:
    812e:	3e 40 02 00 	mov	#2,	r14	;

00008132 <.Loc.124.1>:
    8132:	b0 12 a6 88 	call	#34982		;#0x88a6

00008136 <__crt0_call_init_then_main>:
    8136:	b0 12 0e 89 	call	#35086		;#0x890e

0000813a <.Loc.196.1>:
    813a:	0c 43       	clr	r12		;

0000813c <.Loc.197.1>:
    813c:	b0 12 c8 84 	call	#33992		;#0x84c8

00008140 <_msp430_run_init_array>:
    8140:	34 40 04 81 	mov	#33028,	r4	;#0x8104

00008144 <.Loc.224.1>:
    8144:	35 40 04 81 	mov	#33028,	r5	;#0x8104

00008148 <.Loc.225.1>:
    8148:	26 43       	mov	#2,	r6	;r3 As==10

0000814a <.Loc.226.1>:
    814a:	30 40 6c 81 	br	#0x816c		;

0000814e <_msp430_run_preinit_array>:
    814e:	34 40 04 81 	mov	#33028,	r4	;#0x8104

00008152 <.Loc.232.1>:
    8152:	35 40 04 81 	mov	#33028,	r5	;#0x8104

00008156 <.Loc.233.1>:
    8156:	26 43       	mov	#2,	r6	;r3 As==10

00008158 <.Loc.234.1>:
    8158:	30 40 6c 81 	br	#0x816c		;

0000815c <_msp430_run_fini_array>:
    815c:	34 40 04 81 	mov	#33028,	r4	;#0x8104

00008160 <.Loc.240.1>:
    8160:	35 40 04 81 	mov	#33028,	r5	;#0x8104

00008164 <.Loc.241.1>:
    8164:	36 40 fe ff 	mov	#65534,	r6	;#0xfffe

00008168 <.Loc.242.1>:
    8168:	30 40 6c 81 	br	#0x816c		;

0000816c <_msp430_run_array>:
    816c:	05 94       	cmp	r4,	r5	;

0000816e <.Loc.246.1>:
    816e:	05 24       	jz	$+12     	;abs 0x817a

00008170 <.Loc.247.1>:
    8170:	27 44       	mov	@r4,	r7	;

00008172 <.Loc.248.1>:
    8172:	04 56       	add	r6,	r4	;

00008174 <.Loc.249.1>:
    8174:	a7 12       	call	@r7		;

00008176 <.Loc.250.1>:
    8176:	10 40 f4 ff 	br	0xfff4		;PC rel. 0x816c

0000817a <_msp430_run_done>:
    817a:	30 41       	ret			

0000817c <L0>:
    817c:	30 41       	ret			
    817e:	30 41       	ret			

00008180 <deregister_tm_clones>:
    8180:	3c 40 2a 89 	mov	#35114,	r12	;#0x892a
    8184:	3c 90 2a 89 	cmp	#35114,	r12	;#0x892a
    8188:	07 24       	jz	$+16     	;abs 0x8198
    818a:	3d 40 00 00 	mov	#0,	r13	;
    818e:	0d 93       	cmp	#0,	r13	;r3 As==00
    8190:	03 24       	jz	$+8      	;abs 0x8198
    8192:	3c 40 2a 89 	mov	#35114,	r12	;#0x892a
    8196:	8d 12       	call	r13		;

00008198 <.L1>:
    8198:	30 41       	ret			

0000819a <register_tm_clones>:
    819a:	0a 12       	push	r10		;
    819c:	3a 40 2a 89 	mov	#35114,	r10	;#0x892a
    81a0:	3a 80 2a 89 	sub	#35114,	r10	;#0x892a
    81a4:	0a 11       	rra	r10		;
    81a6:	0c 4a       	mov	r10,	r12	;
    81a8:	b0 12 f2 87 	call	#34802		;#0x87f2
    81ac:	0c 5a       	add	r10,	r12	;
    81ae:	0d 4c       	mov	r12,	r13	;
    81b0:	0d 11       	rra	r13		;
    81b2:	0d 93       	cmp	#0,	r13	;r3 As==00
    81b4:	07 24       	jz	$+16     	;abs 0x81c4
    81b6:	3e 40 00 00 	mov	#0,	r14	;
    81ba:	0e 93       	cmp	#0,	r14	;r3 As==00
    81bc:	03 24       	jz	$+8      	;abs 0x81c4
    81be:	3c 40 2a 89 	mov	#35114,	r12	;#0x892a
    81c2:	8e 12       	call	r14		;

000081c4 <.L9>:
    81c4:	3a 41       	pop	r10		;
    81c6:	30 41       	ret			

000081c8 <__do_global_dtors_aux>:
    81c8:	0a 12       	push	r10		;
    81ca:	09 12       	push	r9		;
    81cc:	c2 93 02 40 	cmp.b	#0,	&0x4002	;r3 As==00
    81d0:	17 20       	jnz	$+48     	;abs 0x8200
    81d2:	3a 40 0e 81 	mov	#33038,	r10	;#0x810e
    81d6:	3a 80 0c 81 	sub	#33036,	r10	;#0x810c
    81da:	0a 11       	rra	r10		;
    81dc:	3a 53       	add	#-1,	r10	;r3 As==11
    81de:	39 40 0c 81 	mov	#33036,	r9	;#0x810c

000081e2 <.L19>:
    81e2:	1c 42 04 40 	mov	&0x4004,r12	;0x4004
    81e6:	0c 9a       	cmp	r10,	r12	;
    81e8:	0d 28       	jnc	$+28     	;abs 0x8204
    81ea:	b0 12 80 81 	call	#33152		;#0x8180
    81ee:	3d 40 00 00 	mov	#0,	r13	;
    81f2:	0d 93       	cmp	#0,	r13	;r3 As==00
    81f4:	03 24       	jz	$+8      	;abs 0x81fc
    81f6:	3c 40 00 81 	mov	#33024,	r12	;#0x8100
    81fa:	8d 12       	call	r13		;

000081fc <.L21>:
    81fc:	d2 43 02 40 	mov.b	#1,	&0x4002	;r3 As==01

00008200 <.L17>:
    8200:	30 40 ec 87 	br	#0x87ec		;

00008204 <.L20>:
    8204:	1c 53       	inc	r12		;
    8206:	82 4c 04 40 	mov	r12,	&0x4004	;
    820a:	0c 5c       	rla	r12		;
    820c:	0c 59       	add	r9,	r12	;
    820e:	2c 4c       	mov	@r12,	r12	;
    8210:	8c 12       	call	r12		;
    8212:	30 40 e2 81 	br	#0x81e2		;

00008216 <call___do_global_dtors_aux>:
    8216:	3e 40 00 00 	mov	#0,	r14	;
    821a:	0e 93       	cmp	#0,	r14	;r3 As==00
    821c:	05 24       	jz	$+12     	;abs 0x8228
    821e:	3d 40 06 40 	mov	#16390,	r13	;#0x4006
    8222:	3c 40 00 81 	mov	#33024,	r12	;#0x8100
    8226:	8e 12       	call	r14		;

00008228 <.L27>:
    8228:	b0 12 9a 81 	call	#33178		;#0x819a
    822c:	30 41       	ret			

0000822e <init>:
int bit_shifter(uint32_t x);

void init()
{

     WDTCTL = WDTPW | WDTHOLD; // Stop WDT
    822e:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    8232:	20 01 

00008234 <.Loc.58.1>:
    //__delay_cycles(3);

    /* init FRAM */
    //FRCTL0_H |= (FWPW) >> 8;

}
    8234:	30 41       	ret			

00008236 <btbl_bitcnt>:

int btbl_bitcnt(uint32_t x)
{
    8236:	0a 12       	push	r10		;

00008238 <.LCFI0>:
    8238:	09 12       	push	r9		;

0000823a <.LCFI1>:
    823a:	08 12       	push	r8		;

0000823c <.LCFI2>:
      int cnt = bits[ ((char *)&x)[0] & 0xFF ];
    823c:	39 40 00 80 	mov	#32768,	r9	;#0x8000
    8240:	4e 4c       	mov.b	r12,	r14	;
    8242:	0e 59       	add	r9,	r14	;
    8244:	68 4e       	mov.b	@r14,	r8	;

00008246 <.Loc.64.1>:

      if (0L != (x >>= 8))
    8246:	b0 12 66 88 	call	#34918		;#0x8866

0000824a <.LVL2>:
    824a:	0a 4c       	mov	r12,	r10	;
    824c:	0a dd       	bis	r13,	r10	;
    824e:	0a 93       	cmp	#0,	r10	;r3 As==00
    8250:	0b 24       	jz	$+24     	;abs 0x8268
    8252:	4a 43       	clr.b	r10		;

00008254 <.L6>:
    8254:	0a 58       	add	r8,	r10	;

00008256 <.Loc.62.1>:

}

int btbl_bitcnt(uint32_t x)
{
      int cnt = bits[ ((char *)&x)[0] & 0xFF ];
    8256:	4e 4c       	mov.b	r12,	r14	;
    8258:	0e 59       	add	r9,	r14	;
    825a:	68 4e       	mov.b	@r14,	r8	;

0000825c <.Loc.64.1>:

      if (0L != (x >>= 8))
    825c:	b0 12 66 88 	call	#34918		;#0x8866

00008260 <.LVL5>:
    8260:	0e 4c       	mov	r12,	r14	;
    8262:	0e dd       	bis	r13,	r14	;
    8264:	0e 93       	cmp	#0,	r14	;r3 As==00
    8266:	f6 23       	jnz	$-18     	;abs 0x8254

00008268 <.L4>:
            cnt += btbl_bitcnt(x);
      return cnt;
}
    8268:	0c 48       	mov	r8,	r12	;
    826a:	0c 5a       	add	r10,	r12	;
    826c:	30 40 ea 87 	br	#0x87ea		;

00008270 <bit_count>:
int bit_count(uint32_t x)
{
    8270:	0e 4c       	mov	r12,	r14	;

00008272 <.Loc.72.1>:
        int n = 0;

        if (x) do
    8272:	0c dd       	bis	r13,	r12	;

00008274 <.LVL9>:
    8274:	0c 93       	cmp	#0,	r12	;r3 As==00
    8276:	0e 24       	jz	$+30     	;abs 0x8294

00008278 <.LBB16>:
            cnt += btbl_bitcnt(x);
      return cnt;
}
int bit_count(uint32_t x)
{
        int n = 0;
    8278:	4c 43       	clr.b	r12		;

0000827a <.L12>:

        if (x) do
              n++;
    827a:	1c 53       	inc	r12		;

0000827c <.Loc.74.1>:
        while (0 != (x = x&(x-1))) ;
    827c:	0b 4e       	mov	r14,	r11	;
    827e:	3b 53       	add	#-1,	r11	;r3 As==11
    8280:	0f 4d       	mov	r13,	r15	;
    8282:	3f 63       	addc	#-1,	r15	;r3 As==11
    8284:	0b fe       	and	r14,	r11	;
    8286:	0f fd       	and	r13,	r15	;
    8288:	0e 4b       	mov	r11,	r14	;

0000828a <.LVL12>:
    828a:	0d 4f       	mov	r15,	r13	;

0000828c <.LVL13>:
    828c:	0f 4b       	mov	r11,	r15	;
    828e:	0f dd       	bis	r13,	r15	;
    8290:	0f 93       	cmp	#0,	r15	;r3 As==00
    8292:	f3 23       	jnz	$-24     	;abs 0x827a

00008294 <.L9>:
        return(n);
}
    8294:	30 41       	ret			

00008296 <bitcount>:
int bitcount(uint32_t i)
{
    8296:	0a 12       	push	r10		;

00008298 <.LCFI3>:
    8298:	09 12       	push	r9		;

0000829a <.LCFI4>:
    829a:	08 12       	push	r8		;

0000829c <.LCFI5>:
    829c:	07 12       	push	r7		;

0000829e <.LCFI6>:
      i = ((i & 0xAAAAAAAAL) >>  1) + (i & 0x55555555L);
    829e:	0a 4c       	mov	r12,	r10	;
    82a0:	0b 4d       	mov	r13,	r11	;
    82a2:	12 c3       	clrc			
    82a4:	0b 10       	rrc	r11		;
    82a6:	0a 10       	rrc	r10		;
    82a8:	0e 4a       	mov	r10,	r14	;
    82aa:	3e f0 55 55 	and	#21845,	r14	;#0x5555
    82ae:	08 4b       	mov	r11,	r8	;
    82b0:	38 f0 55 55 	and	#21845,	r8	;#0x5555
    82b4:	09 4c       	mov	r12,	r9	;
    82b6:	39 f0 55 55 	and	#21845,	r9	;#0x5555
    82ba:	0f 4d       	mov	r13,	r15	;
    82bc:	3f f0 55 55 	and	#21845,	r15	;#0x5555
    82c0:	09 5e       	add	r14,	r9	;
    82c2:	08 6f       	addc	r15,	r8	;

000082c4 <.LVL16>:
      i = ((i & 0xCCCCCCCCL) >>  2) + (i & 0x33333333L);
    82c4:	0c 49       	mov	r9,	r12	;
    82c6:	0d 48       	mov	r8,	r13	;
    82c8:	b0 12 8a 88 	call	#34954		;#0x888a
    82cc:	0e 4c       	mov	r12,	r14	;
    82ce:	3e f0 33 33 	and	#13107,	r14	;#0x3333
    82d2:	07 4d       	mov	r13,	r7	;
    82d4:	37 f0 33 33 	and	#13107,	r7	;#0x3333
    82d8:	0a 49       	mov	r9,	r10	;
    82da:	3a f0 33 33 	and	#13107,	r10	;#0x3333
    82de:	0c 48       	mov	r8,	r12	;
    82e0:	3c f0 33 33 	and	#13107,	r12	;#0x3333
    82e4:	0a 5e       	add	r14,	r10	;
    82e6:	07 6c       	addc	r12,	r7	;

000082e8 <.LVL18>:
      i = ((i & 0xF0F0F0F0L) >>  4) + (i & 0x0F0F0F0FL);
    82e8:	0c 4a       	mov	r10,	r12	;
    82ea:	0d 47       	mov	r7,	r13	;
    82ec:	b0 12 7e 88 	call	#34942		;#0x887e
    82f0:	0e 4c       	mov	r12,	r14	;
    82f2:	3e f0 0f 0f 	and	#3855,	r14	;#0x0f0f
    82f6:	08 4d       	mov	r13,	r8	;
    82f8:	38 f0 0f 0f 	and	#3855,	r8	;#0x0f0f
    82fc:	09 4a       	mov	r10,	r9	;
    82fe:	39 f0 0f 0f 	and	#3855,	r9	;#0x0f0f
    8302:	0c 47       	mov	r7,	r12	;
    8304:	3c f0 0f 0f 	and	#3855,	r12	;#0x0f0f
    8308:	09 5e       	add	r14,	r9	;
    830a:	08 6c       	addc	r12,	r8	;

0000830c <.LVL20>:
      i = ((i & 0xFF00FF00L) >>  8) + (i & 0x00FF00FFL);
    830c:	0c 49       	mov	r9,	r12	;
    830e:	0d 48       	mov	r8,	r13	;
    8310:	b0 12 66 88 	call	#34918		;#0x8866
    8314:	4e 4c       	mov.b	r12,	r14	;
    8316:	4f 4d       	mov.b	r13,	r15	;
    8318:	0a 49       	mov	r9,	r10	;
    831a:	7a f0 ff 00 	and.b	#255,	r10	;#0x00ff
    831e:	0d 48       	mov	r8,	r13	;
    8320:	7d f0 ff 00 	and.b	#255,	r13	;#0x00ff
    8324:	0a 5e       	add	r14,	r10	;
    8326:	0d 6f       	addc	r15,	r13	;

00008328 <.LVL22>:
      i = ((i & 0xFFFF0000L) >> 16) + (i & 0x0000FFFFL);
    8328:	0c 4a       	mov	r10,	r12	;
    832a:	7e 40 10 00 	mov.b	#16,	r14	;#0x0010
    832e:	b0 12 a0 88 	call	#34976		;#0x88a0

00008332 <.LVL23>:
      return (int)i;
}
    8332:	0c 5a       	add	r10,	r12	;
    8334:	30 40 e8 87 	br	#0x87e8		;

00008338 <ntbl_bitcount>:
int ntbl_bitcount(uint32_t x)
{
    8338:	0a 12       	push	r10		;

0000833a <.LCFI7>:
    833a:	09 12       	push	r9		;

0000833c <.LCFI8>:
    833c:	08 12       	push	r8		;

0000833e <.LCFI9>:
    833e:	07 12       	push	r7		;

00008340 <.LCFI10>:
    8340:	08 4c       	mov	r12,	r8	;
    8342:	07 4d       	mov	r13,	r7	;

00008344 <.Loc.90.1>:
      return
            bits[ (int) (x & 0x0000000FUL)       ] +
            bits[ (int)((x & 0x000000F0UL) >> 4) ] +
    8344:	39 40 00 80 	mov	#32768,	r9	;#0x8000
    8348:	b0 12 7e 88 	call	#34942		;#0x887e

0000834c <.LVL25>:
    834c:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f
    8350:	0c 59       	add	r9,	r12	;

00008352 <.Loc.89.1>:
      return (int)i;
}
int ntbl_bitcount(uint32_t x)
{
      return
            bits[ (int) (x & 0x0000000FUL)       ] +
    8352:	0d 48       	mov	r8,	r13	;
    8354:	7d f0 0f 00 	and.b	#15,	r13	;#0x000f
    8358:	0d 59       	add	r9,	r13	;
    835a:	6a 4d       	mov.b	@r13,	r10	;
    835c:	6c 4c       	mov.b	@r12,	r12	;
    835e:	0a 5c       	add	r12,	r10	;

00008360 <.Loc.91.1>:
            bits[ (int)((x & 0x000000F0UL) >> 4) ] +
            bits[ (int)((x & 0x00000F00UL) >> 8) ] +
    8360:	0c 48       	mov	r8,	r12	;
    8362:	0d 47       	mov	r7,	r13	;
    8364:	b0 12 66 88 	call	#34918		;#0x8866
    8368:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f
    836c:	0c 59       	add	r9,	r12	;

0000836e <.Loc.90.1>:
}
int ntbl_bitcount(uint32_t x)
{
      return
            bits[ (int) (x & 0x0000000FUL)       ] +
            bits[ (int)((x & 0x000000F0UL) >> 4) ] +
    836e:	6c 4c       	mov.b	@r12,	r12	;
    8370:	0a 5c       	add	r12,	r10	;

00008372 <.Loc.92.1>:
            bits[ (int)((x & 0x00000F00UL) >> 8) ] +
            bits[ (int)((x & 0x0000F000UL) >> 12)] +
    8372:	0c 48       	mov	r8,	r12	;
    8374:	0d 47       	mov	r7,	r13	;
    8376:	b0 12 4e 88 	call	#34894		;#0x884e
    837a:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f
    837e:	0c 59       	add	r9,	r12	;

00008380 <.Loc.91.1>:
int ntbl_bitcount(uint32_t x)
{
      return
            bits[ (int) (x & 0x0000000FUL)       ] +
            bits[ (int)((x & 0x000000F0UL) >> 4) ] +
            bits[ (int)((x & 0x00000F00UL) >> 8) ] +
    8380:	6c 4c       	mov.b	@r12,	r12	;
    8382:	0a 5c       	add	r12,	r10	;

00008384 <.Loc.93.1>:
            bits[ (int)((x & 0x0000F000UL) >> 12)] +
            bits[ (int)((x & 0x000F0000UL) >> 16)] +
    8384:	0c 48       	mov	r8,	r12	;
    8386:	0d 47       	mov	r7,	r13	;
    8388:	7e 40 10 00 	mov.b	#16,	r14	;#0x0010
    838c:	b0 12 a0 88 	call	#34976		;#0x88a0
    8390:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f
    8394:	0c 59       	add	r9,	r12	;

00008396 <.Loc.92.1>:
{
      return
            bits[ (int) (x & 0x0000000FUL)       ] +
            bits[ (int)((x & 0x000000F0UL) >> 4) ] +
            bits[ (int)((x & 0x00000F00UL) >> 8) ] +
            bits[ (int)((x & 0x0000F000UL) >> 12)] +
    8396:	6c 4c       	mov.b	@r12,	r12	;
    8398:	0a 5c       	add	r12,	r10	;

0000839a <.Loc.94.1>:
            bits[ (int)((x & 0x000F0000UL) >> 16)] +
            bits[ (int)((x & 0x00F00000UL) >> 20)] +
    839a:	0c 48       	mov	r8,	r12	;
    839c:	0d 47       	mov	r7,	r13	;
    839e:	7e 40 14 00 	mov.b	#20,	r14	;#0x0014
    83a2:	b0 12 a0 88 	call	#34976		;#0x88a0
    83a6:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f
    83aa:	0c 59       	add	r9,	r12	;

000083ac <.Loc.93.1>:
      return
            bits[ (int) (x & 0x0000000FUL)       ] +
            bits[ (int)((x & 0x000000F0UL) >> 4) ] +
            bits[ (int)((x & 0x00000F00UL) >> 8) ] +
            bits[ (int)((x & 0x0000F000UL) >> 12)] +
            bits[ (int)((x & 0x000F0000UL) >> 16)] +
    83ac:	6c 4c       	mov.b	@r12,	r12	;
    83ae:	0a 5c       	add	r12,	r10	;

000083b0 <.Loc.95.1>:
            bits[ (int)((x & 0x00F00000UL) >> 20)] +
            bits[ (int)((x & 0x0F000000UL) >> 24)] +
    83b0:	0c 48       	mov	r8,	r12	;
    83b2:	0d 47       	mov	r7,	r13	;
    83b4:	7e 40 18 00 	mov.b	#24,	r14	;#0x0018
    83b8:	b0 12 a0 88 	call	#34976		;#0x88a0
    83bc:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f
    83c0:	0c 59       	add	r9,	r12	;

000083c2 <.Loc.94.1>:
            bits[ (int) (x & 0x0000000FUL)       ] +
            bits[ (int)((x & 0x000000F0UL) >> 4) ] +
            bits[ (int)((x & 0x00000F00UL) >> 8) ] +
            bits[ (int)((x & 0x0000F000UL) >> 12)] +
            bits[ (int)((x & 0x000F0000UL) >> 16)] +
            bits[ (int)((x & 0x00F00000UL) >> 20)] +
    83c2:	6c 4c       	mov.b	@r12,	r12	;
    83c4:	0a 5c       	add	r12,	r10	;

000083c6 <.Loc.96.1>:
            bits[ (int)((x & 0x0F000000UL) >> 24)] +
            bits[ (int)((x & 0xF0000000UL) >> 28)];
    83c6:	0c 48       	mov	r8,	r12	;
    83c8:	0d 47       	mov	r7,	r13	;
    83ca:	7e 40 1c 00 	mov.b	#28,	r14	;#0x001c
    83ce:	b0 12 a0 88 	call	#34976		;#0x88a0
    83d2:	0c 59       	add	r9,	r12	;

000083d4 <.Loc.97.1>:
}
    83d4:	6c 4c       	mov.b	@r12,	r12	;
    83d6:	0c 5a       	add	r10,	r12	;
    83d8:	30 40 e8 87 	br	#0x87e8		;

000083dc <BW_btbl_bitcount>:
int BW_btbl_bitcount(uint32_t x)
{
    83dc:	0a 12       	push	r10		;

000083de <.LCFI11>:
    83de:	09 12       	push	r9		;

000083e0 <.LCFI12>:
    83e0:	08 12       	push	r8		;

000083e2 <.LCFI13>:
    83e2:	08 4d       	mov	r13,	r8	;

000083e4 <.Loc.108.1>:
            long y;
      } U;

      U.y = x;

      return bits[ U.ch[0] ] + bits[ U.ch[1] ] +
    83e4:	3a 40 00 80 	mov	#32768,	r10	;#0x8000
    83e8:	4d 4c       	mov.b	r12,	r13	;
    83ea:	0d 5a       	add	r10,	r13	;
    83ec:	69 4d       	mov.b	@r13,	r9	;
    83ee:	b0 12 0e 88 	call	#34830		;#0x880e

000083f2 <.LVL33>:
    83f2:	3c f0 ff 00 	and	#255,	r12	;#0x00ff
    83f6:	0c 5a       	add	r10,	r12	;
    83f8:	6c 4c       	mov.b	@r12,	r12	;
    83fa:	09 5c       	add	r12,	r9	;

000083fc <.Loc.109.1>:
             bits[ U.ch[3] ] + bits[ U.ch[2] ];
    83fc:	0c 48       	mov	r8,	r12	;
    83fe:	b0 12 0e 88 	call	#34830		;#0x880e
    8402:	3c f0 ff 00 	and	#255,	r12	;#0x00ff
    8406:	0c 5a       	add	r10,	r12	;

00008408 <.Loc.108.1>:
            long y;
      } U;

      U.y = x;

      return bits[ U.ch[0] ] + bits[ U.ch[1] ] +
    8408:	6c 4c       	mov.b	@r12,	r12	;
    840a:	0c 59       	add	r9,	r12	;

0000840c <.Loc.109.1>:
             bits[ U.ch[3] ] + bits[ U.ch[2] ];
    840c:	38 f0 ff 00 	and	#255,	r8	;#0x00ff
    8410:	0a 58       	add	r8,	r10	;

00008412 <.Loc.110.1>:
}
    8412:	6a 4a       	mov.b	@r10,	r10	;
    8414:	0c 5a       	add	r10,	r12	;
    8416:	30 40 ea 87 	br	#0x87ea		;

0000841a <AR_btbl_bitcount>:
int AR_btbl_bitcount(uint32_t x)
{
    841a:	0a 12       	push	r10		;

0000841c <.LCFI14>:
    841c:	09 12       	push	r9		;

0000841e <.LCFI15>:
    841e:	08 12       	push	r8		;

00008420 <.LCFI16>:
    8420:	08 4d       	mov	r13,	r8	;

00008422 <.Loc.116.1>:
      unsigned char * Ptr = (unsigned char *) &x ;
      int Accu ;

      Accu  = bits[ *Ptr++ ];
    8422:	3a 40 00 80 	mov	#32768,	r10	;#0x8000
    8426:	4e 4c       	mov.b	r12,	r14	;
    8428:	0e 5a       	add	r10,	r14	;
    842a:	69 4e       	mov.b	@r14,	r9	;

0000842c <.LVL37>:
      Accu += bits[ *Ptr++ ];
    842c:	b0 12 0e 88 	call	#34830		;#0x880e

00008430 <.LVL38>:
    8430:	3c f0 ff 00 	and	#255,	r12	;#0x00ff
    8434:	0c 5a       	add	r10,	r12	;
    8436:	6c 4c       	mov.b	@r12,	r12	;
    8438:	09 5c       	add	r12,	r9	;

0000843a <.Loc.118.1>:
      Accu += bits[ *Ptr++ ];
    843a:	4c 48       	mov.b	r8,	r12	;
    843c:	0c 5a       	add	r10,	r12	;
    843e:	6c 4c       	mov.b	@r12,	r12	;
    8440:	09 5c       	add	r12,	r9	;

00008442 <.LVL40>:
      Accu += bits[ *Ptr ];
    8442:	0c 48       	mov	r8,	r12	;
    8444:	b0 12 0e 88 	call	#34830		;#0x880e
    8448:	3c f0 ff 00 	and	#255,	r12	;#0x00ff
    844c:	0a 5c       	add	r12,	r10	;

0000844e <.Loc.121.1>:
      return Accu;
}
    844e:	6c 4a       	mov.b	@r10,	r12	;
    8450:	0c 59       	add	r9,	r12	;
    8452:	30 40 ea 87 	br	#0x87ea		;

00008456 <ntbl_bitcnt>:
int ntbl_bitcnt(uint32_t x)
{
    8456:	0a 12       	push	r10		;

00008458 <.LCFI17>:
    8458:	09 12       	push	r9		;

0000845a <.LCFI18>:
    845a:	08 12       	push	r8		;

0000845c <.LCFI19>:
      int cnt = bits[(int)(x & 0x0000000FL)];
    845c:	39 40 00 80 	mov	#32768,	r9	;#0x8000
    8460:	0e 4c       	mov	r12,	r14	;
    8462:	7e f0 0f 00 	and.b	#15,	r14	;#0x000f
    8466:	0e 59       	add	r9,	r14	;
    8468:	68 4e       	mov.b	@r14,	r8	;

0000846a <.Loc.126.1>:

      if (0L != (x >>= 4))
    846a:	b0 12 7e 88 	call	#34942		;#0x887e

0000846e <.LVL44>:
    846e:	0a 4c       	mov	r12,	r10	;
    8470:	0a dd       	bis	r13,	r10	;
    8472:	0a 93       	cmp	#0,	r10	;r3 As==00
    8474:	0d 24       	jz	$+28     	;abs 0x8490
    8476:	4a 43       	clr.b	r10		;

00008478 <.L22>:
    8478:	0a 58       	add	r8,	r10	;

0000847a <.Loc.124.1>:
      Accu += bits[ *Ptr ];
      return Accu;
}
int ntbl_bitcnt(uint32_t x)
{
      int cnt = bits[(int)(x & 0x0000000FL)];
    847a:	0e 4c       	mov	r12,	r14	;
    847c:	7e f0 0f 00 	and.b	#15,	r14	;#0x000f
    8480:	0e 59       	add	r9,	r14	;
    8482:	68 4e       	mov.b	@r14,	r8	;

00008484 <.Loc.126.1>:

      if (0L != (x >>= 4))
    8484:	b0 12 7e 88 	call	#34942		;#0x887e

00008488 <.LVL47>:
    8488:	0e 4c       	mov	r12,	r14	;
    848a:	0e dd       	bis	r13,	r14	;
    848c:	0e 93       	cmp	#0,	r14	;r3 As==00
    848e:	f4 23       	jnz	$-22     	;abs 0x8478

00008490 <.L20>:
            cnt += ntbl_bitcnt(x);

      return cnt;
}
    8490:	0c 48       	mov	r8,	r12	;
    8492:	0c 5a       	add	r10,	r12	;
    8494:	30 40 ea 87 	br	#0x87ea		;

00008498 <bit_shifter>:

int bit_shifter(uint32_t x)
{
    8498:	0e 4c       	mov	r12,	r14	;
    849a:	0f 4d       	mov	r13,	r15	;

0000849c <.LVL50>:
  int i, n;
  for (i = n = 0; x && (i < (sizeof(uint32_t) * CHAR_BIT)); ++i, x >>= 1)
    849c:	0c dd       	bis	r13,	r12	;
    849e:	0c 93       	cmp	#0,	r12	;r3 As==00
    84a0:	12 24       	jz	$+38     	;abs 0x84c6
    84a2:	7b 40 20 00 	mov.b	#32,	r11	;#0x0020
    84a6:	4c 43       	clr.b	r12		;
    84a8:	30 40 b2 84 	br	#0x84b2		;

000084ac <.L35>:
    84ac:	3b 53       	add	#-1,	r11	;r3 As==11

000084ae <.Loc.135.1>:
    84ae:	0b 93       	cmp	#0,	r11	;r3 As==00
    84b0:	0a 24       	jz	$+22     	;abs 0x84c6

000084b2 <.L29>:
    n += (int)(x & 1L);
    84b2:	0d 4e       	mov	r14,	r13	;
    84b4:	5d f3       	and.b	#1,	r13	;r3 As==01
    84b6:	0c 5d       	add	r13,	r12	;

000084b8 <.Loc.135.1>:
}

int bit_shifter(uint32_t x)
{
  int i, n;
  for (i = n = 0; x && (i < (sizeof(uint32_t) * CHAR_BIT)); ++i, x >>= 1)
    84b8:	12 c3       	clrc			
    84ba:	0f 10       	rrc	r15		;
    84bc:	0e 10       	rrc	r14		;
    84be:	0d 4e       	mov	r14,	r13	;
    84c0:	0d df       	bis	r15,	r13	;
    84c2:	0d 93       	cmp	#0,	r13	;r3 As==00
    84c4:	f3 23       	jnz	$-24     	;abs 0x84ac

000084c6 <.L25>:
    n += (int)(x & 1L);
  return n;
}
    84c6:	30 41       	ret			

000084c8 <main>:


int main()
{
    84c8:	0a 12       	push	r10		;

000084ca <.LCFI20>:
    84ca:	09 12       	push	r9		;

000084cc <.LCFI21>:
    84cc:	08 12       	push	r8		;

000084ce <.LCFI22>:
    84ce:	07 12       	push	r7		;

000084d0 <.LCFI23>:
    84d0:	06 12       	push	r6		;

000084d2 <.LCFI24>:
    84d2:	05 12       	push	r5		;

000084d4 <.LCFI25>:
    84d4:	04 12       	push	r4		;

000084d6 <.LCFI26>:
    84d6:	31 80 18 00 	sub	#24,	r1	;#0x0018

000084da <.LBB36>:
int bit_shifter(uint32_t x);

void init()
{

     WDTCTL = WDTPW | WDTHOLD; // Stop WDT
    84da:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    84de:	20 01 
    84e0:	3a 40 00 80 	mov	#32768,	r10	;#0x8000

000084e4 <.LBE36>:
    /* Each statement executes a different bitcount routine, with a different seed value, a 100 times*/
    while(1){


    //Initialize the variables upon every loop
    n_0=0;
    84e4:	48 43       	clr.b	r8		;

000084e6 <.L59>:
    84e6:	81 48 0a 00 	mov	r8,	10(r1)	; 0x000a

000084ea <.Loc.157.1>:
    n_1=0;
    84ea:	81 48 0c 00 	mov	r8,	12(r1)	; 0x000c

000084ee <.Loc.158.1>:
    n_2=0;
    84ee:	81 48 0e 00 	mov	r8,	14(r1)	; 0x000e

000084f2 <.Loc.159.1>:
    n_3=0;
    84f2:	81 48 10 00 	mov	r8,	16(r1)	; 0x0010

000084f6 <.Loc.160.1>:
    n_4=0;
    84f6:	81 48 12 00 	mov	r8,	18(r1)	; 0x0012

000084fa <.Loc.161.1>:
    n_5=0;
    84fa:	81 48 14 00 	mov	r8,	20(r1)	; 0x0014

000084fe <.Loc.162.1>:
    n_6=0;
    84fe:	81 48 16 00 	mov	r8,	22(r1)	; 0x0016

00008502 <.Loc.166.1>:

    //Toggle LED upon every execution
    //P1OUT ^= 0x09;
	LED_CTRL ^= 0x0F;
    8502:	7c 40 90 00 	mov.b	#144,	r12	;#0x0090
    8506:	fc e0 0f 00 	xor.b	#15,	0(r12)	;#0x000f
    850a:	00 00 
    850c:	91 43 04 00 	mov	#1,	4(r1)	;r3 As==01
    8510:	47 43       	clr.b	r7		;

00008512 <.LVL57>:

    for (func = 0; func < 7; func++) {

        seed = (uint32_t)SEED;
        if(func == 0){
    8512:	07 93       	cmp	#0,	r7	;r3 As==00
    8514:	35 24       	jz	$+108    	;abs 0x8580

00008516 <.L38>:
            for(iter = 0; iter < ITER; ++iter, seed += 13){

                n_0 += bit_count(seed);
            }
        }
        else if(func == 1){
    8516:	17 93       	cmp	#1,	r7	;r3 As==01
    8518:	21 25       	jz	$+580    	;abs 0x875c

0000851a <.Loc.183.1>:
            for(iter = 0; iter < ITER; ++iter, seed += 13){

                n_1 += bitcount(seed);
            }
        }
        else if(func == 2){
    851a:	27 93       	cmp	#2,	r7	;r3 As==10
    851c:	ec 24       	jz	$+474    	;abs 0x86f6

0000851e <.Loc.189.1>:
            for(iter = 0; iter < ITER; ++iter, seed += 13){

                n_2 += ntbl_bitcnt(seed);
            }
        }
        else if(func == 3){
    851e:	37 90 03 00 	cmp	#3,	r7	;
    8522:	bb 24       	jz	$+376    	;abs 0x869a

00008524 <.Loc.195.1>:
            for(iter = 0; iter < ITER; ++iter, seed += 13){

                n_3 += ntbl_bitcount(seed);
            }
        }
        else if(func == 4){
    8524:	27 92       	cmp	#4,	r7	;r2 As==10
    8526:	83 24       	jz	$+264    	;abs 0x862e

00008528 <.Loc.201.1>:
            for(iter = 0; iter < ITER; ++iter, seed += 13){

                n_4 += BW_btbl_bitcount(seed);
            }
        }
        else if(func == 5){
    8528:	37 90 05 00 	cmp	#5,	r7	;
    852c:	47 24       	jz	$+144    	;abs 0x85bc

0000852e <.Loc.170.1>:
    //P1OUT ^= 0x09;
	LED_CTRL ^= 0x0F;

    for (func = 0; func < 7; func++) {

        seed = (uint32_t)SEED;
    852e:	6e 42       	mov.b	#4,	r14	;r2 As==10
    8530:	4f 43       	clr.b	r15		;

00008532 <.L51>:
    8532:	0c 4e       	mov	r14,	r12	;
    8534:	0d 4f       	mov	r15,	r13	;
    8536:	76 40 20 00 	mov.b	#32,	r6	;#0x0020

0000853a <.LBB38>:
}

int bit_shifter(uint32_t x)
{
  int i, n;
  for (i = n = 0; x && (i < (sizeof(uint32_t) * CHAR_BIT)); ++i, x >>= 1)
    853a:	45 43       	clr.b	r5		;
    853c:	30 40 46 85 	br	#0x8546		;

00008540 <.L95>:
    8540:	36 53       	add	#-1,	r6	;r3 As==11
    8542:	06 93       	cmp	#0,	r6	;r3 As==00
    8544:	0a 24       	jz	$+22     	;abs 0x855a

00008546 <.L55>:
    n += (int)(x & 1L);
    8546:	09 4c       	mov	r12,	r9	;
    8548:	59 f3       	and.b	#1,	r9	;r3 As==01
    854a:	05 59       	add	r9,	r5	;

0000854c <.Loc.135.1>:
}

int bit_shifter(uint32_t x)
{
  int i, n;
  for (i = n = 0; x && (i < (sizeof(uint32_t) * CHAR_BIT)); ++i, x >>= 1)
    854c:	12 c3       	clrc			
    854e:	0d 10       	rrc	r13		;
    8550:	0c 10       	rrc	r12		;
    8552:	09 4c       	mov	r12,	r9	;
    8554:	09 dd       	bis	r13,	r9	;
    8556:	09 93       	cmp	#0,	r9	;r3 As==00
    8558:	f3 23       	jnz	$-24     	;abs 0x8540

0000855a <.L53>:
            }
        }
        else if(func == 6){
            for(iter = 0; iter < ITER; ++iter, seed += 13){

                n_6 += bit_shifter(seed);
    855a:	81 55 16 00 	add	r5,	22(r1)	; 0x0016

0000855e <.Loc.208.1>:

                n_5 += AR_btbl_bitcount(seed);
            }
        }
        else if(func == 6){
            for(iter = 0; iter < ITER; ++iter, seed += 13){
    855e:	3e 50 0d 00 	add	#13,	r14	;#0x000d

00008562 <.LVL65>:
    8562:	0f 63       	adc	r15		;

00008564 <.LVL66>:
    8564:	3e 90 18 05 	cmp	#1304,	r14	;#0x0518
    8568:	e4 23       	jnz	$-54     	;abs 0x8532
    856a:	0f 93       	cmp	#0,	r15	;r3 As==00
    856c:	e2 23       	jnz	$-58     	;abs 0x8532

0000856e <.LVL67>:

    //Toggle LED upon every execution
    //P1OUT ^= 0x09;
	LED_CTRL ^= 0x0F;

    for (func = 0; func < 7; func++) {
    856e:	b1 90 07 00 	cmp	#7,	4(r1)	;
    8572:	04 00 
    8574:	b8 27       	jz	$-142    	;abs 0x84e6

00008576 <.L58>:
    8576:	17 53       	inc	r7		;
    8578:	91 53 04 00 	inc	4(r1)		;

0000857c <.LVL69>:

        seed = (uint32_t)SEED;
        if(func == 0){
    857c:	07 93       	cmp	#0,	r7	;r3 As==00
    857e:	cb 23       	jnz	$-104    	;abs 0x8516

00008580 <.L89>:
    //P1OUT ^= 0x09;
	LED_CTRL ^= 0x0F;

    for (func = 0; func < 7; func++) {

        seed = (uint32_t)SEED;
    8580:	6e 42       	mov.b	#4,	r14	;r2 As==10
    8582:	4f 43       	clr.b	r15		;

00008584 <.L76>:
    8584:	0c 4e       	mov	r14,	r12	;
    8586:	0d 4f       	mov	r15,	r13	;

00008588 <.LBB40>:
            cnt += btbl_bitcnt(x);
      return cnt;
}
int bit_count(uint32_t x)
{
        int n = 0;
    8588:	45 43       	clr.b	r5		;

0000858a <.L39>:

        if (x) do
              n++;
    858a:	15 53       	inc	r5		;

0000858c <.Loc.74.1>:
        while (0 != (x = x&(x-1))) ;
    858c:	06 4c       	mov	r12,	r6	;
    858e:	36 53       	add	#-1,	r6	;r3 As==11
    8590:	09 4d       	mov	r13,	r9	;
    8592:	39 63       	addc	#-1,	r9	;r3 As==11
    8594:	06 fc       	and	r12,	r6	;
    8596:	09 fd       	and	r13,	r9	;
    8598:	0c 46       	mov	r6,	r12	;

0000859a <.LVL73>:
    859a:	0d 49       	mov	r9,	r13	;

0000859c <.LVL74>:
    859c:	09 46       	mov	r6,	r9	;

0000859e <.LVL75>:
    859e:	09 dd       	bis	r13,	r9	;
    85a0:	09 93       	cmp	#0,	r9	;r3 As==00
    85a2:	f3 23       	jnz	$-24     	;abs 0x858a

000085a4 <.LBE40>:

        seed = (uint32_t)SEED;
        if(func == 0){
            for(iter = 0; iter < ITER; ++iter, seed += 13){

                n_0 += bit_count(seed);
    85a4:	81 55 0a 00 	add	r5,	10(r1)	; 0x000a

000085a8 <.Loc.172.1>:

    for (func = 0; func < 7; func++) {

        seed = (uint32_t)SEED;
        if(func == 0){
            for(iter = 0; iter < ITER; ++iter, seed += 13){
    85a8:	3e 50 0d 00 	add	#13,	r14	;#0x000d

000085ac <.LVL77>:
    85ac:	0f 63       	adc	r15		;

000085ae <.LVL78>:
    85ae:	3e 90 18 05 	cmp	#1304,	r14	;#0x0518
    85b2:	e8 23       	jnz	$-46     	;abs 0x8584
    85b4:	0f 93       	cmp	#0,	r15	;r3 As==00
    85b6:	e6 23       	jnz	$-50     	;abs 0x8584
    85b8:	30 40 76 85 	br	#0x8576		;

000085bc <.L94>:
    85bc:	76 40 11 00 	mov.b	#17,	r6	;#0x0011
    85c0:	0e 48       	mov	r8,	r14	;
    85c2:	0d 48       	mov	r8,	r13	;
    85c4:	09 48       	mov	r8,	r9	;
    85c6:	5f 43       	mov.b	#1,	r15	;r3 As==01

000085c8 <.Loc.170.1>:
    //P1OUT ^= 0x09;
	LED_CTRL ^= 0x0F;

    for (func = 0; func < 7; func++) {

        seed = (uint32_t)SEED;
    85c8:	64 42       	mov.b	#4,	r4	;r2 As==10
    85ca:	45 43       	clr.b	r5		;
    85cc:	30 40 12 86 	br	#0x8612		;

000085d0 <.L96>:
    85d0:	0c 4a       	mov	r10,	r12	;
    85d2:	0c 56       	add	r6,	r12	;
    85d4:	6f 4c       	mov.b	@r12,	r15	;
    85d6:	0c 44       	mov	r4,	r12	;
    85d8:	81 4f 02 00 	mov	r15,	2(r1)	;
    85dc:	b0 12 0e 88 	call	#34830		;#0x880e
    85e0:	3c f0 ff 00 	and	#255,	r12	;#0x00ff
    85e4:	0c 5a       	add	r10,	r12	;
    85e6:	69 4c       	mov.b	@r12,	r9	;
    85e8:	4c 45       	mov.b	r5,	r12	;
    85ea:	3c f0 ff 00 	and	#255,	r12	;#0x00ff
    85ee:	0c 5a       	add	r10,	r12	;
    85f0:	6d 4c       	mov.b	@r12,	r13	;
    85f2:	0c 45       	mov	r5,	r12	;
    85f4:	81 4d 00 00 	mov	r13,	0(r1)	;
    85f8:	b0 12 0e 88 	call	#34830		;#0x880e
    85fc:	3c f0 ff 00 	and	#255,	r12	;#0x00ff
    8600:	0c 5a       	add	r10,	r12	;
    8602:	6e 4c       	mov.b	@r12,	r14	;
    8604:	76 50 0d 00 	add.b	#13,	r6	;#0x000d
    8608:	36 f0 ff 00 	and	#255,	r6	;#0x00ff
    860c:	2d 41       	mov	@r1,	r13	;
    860e:	1f 41 02 00 	mov	2(r1),	r15	;

00008612 <.L52>:
{
      unsigned char * Ptr = (unsigned char *) &x ;
      int Accu ;

      Accu  = bits[ *Ptr++ ];
      Accu += bits[ *Ptr++ ];
    8612:	0c 49       	mov	r9,	r12	;
    8614:	0c 5f       	add	r15,	r12	;

00008616 <.Loc.118.1>:
      Accu += bits[ *Ptr++ ];
    8616:	0c 5d       	add	r13,	r12	;

00008618 <.LVL85>:
      Accu += bits[ *Ptr ];
    8618:	0e 5c       	add	r12,	r14	;

0000861a <.LBE44>:
            }
        }
        else if(func == 5){
            for(iter = 0; iter < ITER; ++iter, seed += 13){

                n_5 += AR_btbl_bitcount(seed);
    861a:	81 5e 14 00 	add	r14,	20(r1)	; 0x0014

0000861e <.Loc.202.1>:

                n_4 += BW_btbl_bitcount(seed);
            }
        }
        else if(func == 5){
            for(iter = 0; iter < ITER; ++iter, seed += 13){
    861e:	34 50 0d 00 	add	#13,	r4	;#0x000d

00008622 <.LVL86>:
    8622:	05 63       	adc	r5		;

00008624 <.LVL87>:
    8624:	36 90 18 00 	cmp	#24,	r6	;#0x0018
    8628:	d3 23       	jnz	$-88     	;abs 0x85d0
    862a:	30 40 76 85 	br	#0x8576		;

0000862e <.L93>:
    862e:	76 40 11 00 	mov.b	#17,	r6	;#0x0011
    8632:	0c 48       	mov	r8,	r12	;
    8634:	0f 48       	mov	r8,	r15	;
    8636:	0e 48       	mov	r8,	r14	;
    8638:	5d 43       	mov.b	#1,	r13	;r3 As==01

0000863a <.Loc.170.1>:
    //P1OUT ^= 0x09;
	LED_CTRL ^= 0x0F;

    for (func = 0; func < 7; func++) {

        seed = (uint32_t)SEED;
    863a:	64 42       	mov.b	#4,	r4	;r2 As==10
    863c:	45 43       	clr.b	r5		;
    863e:	30 40 80 86 	br	#0x8680		;

00008642 <.L97>:
    8642:	0c 4a       	mov	r10,	r12	;
    8644:	0c 56       	add	r6,	r12	;
    8646:	6d 4c       	mov.b	@r12,	r13	;
    8648:	0c 44       	mov	r4,	r12	;
    864a:	81 4d 00 00 	mov	r13,	0(r1)	;
    864e:	b0 12 0e 88 	call	#34830		;#0x880e
    8652:	3c f0 ff 00 	and	#255,	r12	;#0x00ff
    8656:	0c 5a       	add	r10,	r12	;
    8658:	6e 4c       	mov.b	@r12,	r14	;
    865a:	0c 45       	mov	r5,	r12	;
    865c:	81 4e 02 00 	mov	r14,	2(r1)	;
    8660:	b0 12 0e 88 	call	#34830		;#0x880e
    8664:	3c f0 ff 00 	and	#255,	r12	;#0x00ff
    8668:	0c 5a       	add	r10,	r12	;
    866a:	6f 4c       	mov.b	@r12,	r15	;
    866c:	4c 45       	mov.b	r5,	r12	;
    866e:	0c 5a       	add	r10,	r12	;
    8670:	6c 4c       	mov.b	@r12,	r12	;
    8672:	76 50 0d 00 	add.b	#13,	r6	;#0x000d
    8676:	36 f0 ff 00 	and	#255,	r6	;#0x00ff
    867a:	2d 41       	mov	@r1,	r13	;
    867c:	1e 41 02 00 	mov	2(r1),	r14	;

00008680 <.L50>:
            long y;
      } U;

      U.y = x;

      return bits[ U.ch[0] ] + bits[ U.ch[1] ] +
    8680:	0d 5e       	add	r14,	r13	;
    8682:	0d 5f       	add	r15,	r13	;

00008684 <.Loc.109.1>:
             bits[ U.ch[3] ] + bits[ U.ch[2] ];
    8684:	0c 5d       	add	r13,	r12	;

00008686 <.LBE46>:
            }
        }
        else if(func == 4){
            for(iter = 0; iter < ITER; ++iter, seed += 13){

                n_4 += BW_btbl_bitcount(seed);
    8686:	81 5c 12 00 	add	r12,	18(r1)	; 0x0012

0000868a <.Loc.196.1>:

                n_3 += ntbl_bitcount(seed);
            }
        }
        else if(func == 4){
            for(iter = 0; iter < ITER; ++iter, seed += 13){
    868a:	34 50 0d 00 	add	#13,	r4	;#0x000d

0000868e <.LVL93>:
    868e:	05 63       	adc	r5		;

00008690 <.LVL94>:
    8690:	36 90 18 00 	cmp	#24,	r6	;#0x0018
    8694:	d6 23       	jnz	$-82     	;abs 0x8642
    8696:	30 40 76 85 	br	#0x8576		;

0000869a <.L92>:
    869a:	79 40 11 00 	mov.b	#17,	r9	;#0x0011
    869e:	0c 48       	mov	r8,	r12	;
    86a0:	0e 48       	mov	r8,	r14	;
    86a2:	56 43       	mov.b	#1,	r6	;r3 As==01

000086a4 <.Loc.170.1>:
    //P1OUT ^= 0x09;
	LED_CTRL ^= 0x0F;

    for (func = 0; func < 7; func++) {

        seed = (uint32_t)SEED;
    86a4:	64 42       	mov.b	#4,	r4	;r2 As==10
    86a6:	45 43       	clr.b	r5		;
    86a8:	30 40 de 86 	br	#0x86de		;

000086ac <.L98>:
    86ac:	0c 49       	mov	r9,	r12	;
    86ae:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f
    86b2:	0c 5a       	add	r10,	r12	;
    86b4:	66 4c       	mov.b	@r12,	r6	;
    86b6:	0c 44       	mov	r4,	r12	;
    86b8:	0d 45       	mov	r5,	r13	;
    86ba:	b0 12 7e 88 	call	#34942		;#0x887e
    86be:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f
    86c2:	0c 5a       	add	r10,	r12	;
    86c4:	6e 4c       	mov.b	@r12,	r14	;
    86c6:	0c 44       	mov	r4,	r12	;
    86c8:	0d 45       	mov	r5,	r13	;
    86ca:	81 4e 02 00 	mov	r14,	2(r1)	;
    86ce:	b0 12 66 88 	call	#34918		;#0x8866
    86d2:	0c 5a       	add	r10,	r12	;
    86d4:	6c 4c       	mov.b	@r12,	r12	;
    86d6:	39 50 0d 00 	add	#13,	r9	;#0x000d
    86da:	1e 41 02 00 	mov	2(r1),	r14	;

000086de <.L48>:
      return (int)i;
}
int ntbl_bitcount(uint32_t x)
{
      return
            bits[ (int) (x & 0x0000000FUL)       ] +
    86de:	0e 56       	add	r6,	r14	;

000086e0 <.Loc.90.1>:
            bits[ (int)((x & 0x000000F0UL) >> 4) ] +
    86e0:	0c 5e       	add	r14,	r12	;

000086e2 <.LBE48>:
            }
        }
        else if(func == 3){
            for(iter = 0; iter < ITER; ++iter, seed += 13){

                n_3 += ntbl_bitcount(seed);
    86e2:	81 5c 10 00 	add	r12,	16(r1)	; 0x0010

000086e6 <.Loc.190.1>:

                n_2 += ntbl_bitcnt(seed);
            }
        }
        else if(func == 3){
            for(iter = 0; iter < ITER; ++iter, seed += 13){
    86e6:	34 50 0d 00 	add	#13,	r4	;#0x000d

000086ea <.LVL100>:
    86ea:	05 63       	adc	r5		;

000086ec <.LVL101>:
    86ec:	39 90 18 05 	cmp	#1304,	r9	;#0x0518
    86f0:	dd 23       	jnz	$-68     	;abs 0x86ac
    86f2:	30 40 76 85 	br	#0x8576		;

000086f6 <.L91>:
    86f6:	76 40 11 00 	mov.b	#17,	r6	;#0x0011

000086fa <.Loc.170.1>:
    //P1OUT ^= 0x09;
	LED_CTRL ^= 0x0F;

    for (func = 0; func < 7; func++) {

        seed = (uint32_t)SEED;
    86fa:	a1 42 06 00 	mov	#4,	6(r1)	;r2 As==10
    86fe:	81 43 08 00 	mov	#0,	8(r1)	;r3 As==00
    8702:	45 43       	clr.b	r5		;

00008704 <.LBB50>:
      Accu += bits[ *Ptr ];
      return Accu;
}
int ntbl_bitcnt(uint32_t x)
{
      int cnt = bits[(int)(x & 0x0000000FL)];
    8704:	59 43       	mov.b	#1,	r9	;r3 As==01
    8706:	0c 49       	mov	r9,	r12	;
    8708:	09 45       	mov	r5,	r9	;
    870a:	05 4c       	mov	r12,	r5	;

0000870c <.L44>:
            }
        }
        else if(func == 2){
            for(iter = 0; iter < ITER; ++iter, seed += 13){

                n_2 += ntbl_bitcnt(seed);
    870c:	0e 49       	mov	r9,	r14	;
    870e:	0e 55       	add	r5,	r14	;
    8710:	81 5e 0e 00 	add	r14,	14(r1)	; 0x000e

00008714 <.Loc.184.1>:

                n_1 += bitcount(seed);
            }
        }
        else if(func == 2){
            for(iter = 0; iter < ITER; ++iter, seed += 13){
    8714:	b1 50 0d 00 	add	#13,	6(r1)	;#0x000d
    8718:	06 00 
    871a:	81 63 08 00 	adc	8(r1)		;

0000871e <.LVL104>:
    871e:	36 90 18 05 	cmp	#1304,	r6	;#0x0518
    8722:	29 27       	jz	$-428    	;abs 0x8576

00008724 <.LBB53>:
      Accu += bits[ *Ptr ];
      return Accu;
}
int ntbl_bitcnt(uint32_t x)
{
      int cnt = bits[(int)(x & 0x0000000FL)];
    8724:	0c 46       	mov	r6,	r12	;
    8726:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f
    872a:	0c 5a       	add	r10,	r12	;
    872c:	65 4c       	mov.b	@r12,	r5	;

0000872e <.Loc.126.1>:

      if (0L != (x >>= 4))
    872e:	1c 41 06 00 	mov	6(r1),	r12	;
    8732:	1d 41 08 00 	mov	8(r1),	r13	;
    8736:	b0 12 7e 88 	call	#34942		;#0x887e

0000873a <.LVL106>:
    873a:	49 43       	clr.b	r9		;

0000873c <.L46>:
    873c:	09 55       	add	r5,	r9	;

0000873e <.Loc.124.1>:
      Accu += bits[ *Ptr ];
      return Accu;
}
int ntbl_bitcnt(uint32_t x)
{
      int cnt = bits[(int)(x & 0x0000000FL)];
    873e:	0e 4c       	mov	r12,	r14	;
    8740:	7e f0 0f 00 	and.b	#15,	r14	;#0x000f
    8744:	0e 5a       	add	r10,	r14	;
    8746:	65 4e       	mov.b	@r14,	r5	;

00008748 <.Loc.126.1>:

      if (0L != (x >>= 4))
    8748:	b0 12 7e 88 	call	#34942		;#0x887e

0000874c <.LVL109>:
    874c:	0e 4c       	mov	r12,	r14	;
    874e:	0e dd       	bis	r13,	r14	;
    8750:	0e 93       	cmp	#0,	r14	;r3 As==00
    8752:	f4 23       	jnz	$-22     	;abs 0x873c
    8754:	36 50 0d 00 	add	#13,	r6	;#0x000d
    8758:	30 40 0c 87 	br	#0x870c		;

0000875c <.L90>:
    //P1OUT ^= 0x09;
	LED_CTRL ^= 0x0F;

    for (func = 0; func < 7; func++) {

        seed = (uint32_t)SEED;
    875c:	64 42       	mov.b	#4,	r4	;r2 As==10
    875e:	45 43       	clr.b	r5		;

00008760 <.L77>:
        while (0 != (x = x&(x-1))) ;
        return(n);
}
int bitcount(uint32_t i)
{
      i = ((i & 0xAAAAAAAAL) >>  1) + (i & 0x55555555L);
    8760:	0c 44       	mov	r4,	r12	;
    8762:	0d 45       	mov	r5,	r13	;
    8764:	12 c3       	clrc			
    8766:	0d 10       	rrc	r13		;
    8768:	0c 10       	rrc	r12		;
    876a:	09 4c       	mov	r12,	r9	;
    876c:	39 f0 55 55 	and	#21845,	r9	;#0x5555
    8770:	06 4d       	mov	r13,	r6	;
    8772:	36 f0 55 55 	and	#21845,	r6	;#0x5555
    8776:	0c 44       	mov	r4,	r12	;
    8778:	3c f0 55 55 	and	#21845,	r12	;#0x5555
    877c:	0d 45       	mov	r5,	r13	;
    877e:	3d f0 55 55 	and	#21845,	r13	;#0x5555
    8782:	09 5c       	add	r12,	r9	;
    8784:	06 6d       	addc	r13,	r6	;

00008786 <.LVL112>:
      i = ((i & 0xCCCCCCCCL) >>  2) + (i & 0x33333333L);
    8786:	0c 49       	mov	r9,	r12	;
    8788:	0d 46       	mov	r6,	r13	;
    878a:	b0 12 8a 88 	call	#34954		;#0x888a
    878e:	3c f0 33 33 	and	#13107,	r12	;#0x3333
    8792:	3d f0 33 33 	and	#13107,	r13	;#0x3333
    8796:	39 f0 33 33 	and	#13107,	r9	;#0x3333

0000879a <.LVL114>:
    879a:	36 f0 33 33 	and	#13107,	r6	;#0x3333
    879e:	09 5c       	add	r12,	r9	;
    87a0:	06 6d       	addc	r13,	r6	;

000087a2 <.LVL115>:
      i = ((i & 0xF0F0F0F0L) >>  4) + (i & 0x0F0F0F0FL);
    87a2:	0c 49       	mov	r9,	r12	;
    87a4:	0d 46       	mov	r6,	r13	;
    87a6:	b0 12 7e 88 	call	#34942		;#0x887e
    87aa:	3c f0 0f 0f 	and	#3855,	r12	;#0x0f0f
    87ae:	3d f0 0f 0f 	and	#3855,	r13	;#0x0f0f
    87b2:	39 f0 0f 0f 	and	#3855,	r9	;#0x0f0f

000087b6 <.LVL117>:
    87b6:	36 f0 0f 0f 	and	#3855,	r6	;#0x0f0f
    87ba:	09 5c       	add	r12,	r9	;
    87bc:	0d 66       	addc	r6,	r13	;

000087be <.LVL118>:
      i = ((i & 0xFF00FF00L) >>  8) + (i & 0x00FF00FFL);
    87be:	0c 49       	mov	r9,	r12	;
    87c0:	b0 12 66 88 	call	#34918		;#0x8866

000087c4 <.LVL119>:
    87c4:	79 f0 ff 00 	and.b	#255,	r9	;#0x00ff
    87c8:	09 5c       	add	r12,	r9	;

000087ca <.LBE54>:
            }
        }
        else if(func == 1){
            for(iter = 0; iter < ITER; ++iter, seed += 13){

                n_1 += bitcount(seed);
    87ca:	81 59 0c 00 	add	r9,	12(r1)	; 0x000c

000087ce <.Loc.178.1>:

                n_0 += bit_count(seed);
            }
        }
        else if(func == 1){
            for(iter = 0; iter < ITER; ++iter, seed += 13){
    87ce:	34 50 0d 00 	add	#13,	r4	;#0x000d

000087d2 <.LVL120>:
    87d2:	05 63       	adc	r5		;

000087d4 <.LVL121>:
    87d4:	34 90 18 05 	cmp	#1304,	r4	;#0x0518
    87d8:	c3 23       	jnz	$-120    	;abs 0x8760
    87da:	05 93       	cmp	#0,	r5	;r3 As==00
    87dc:	c1 23       	jnz	$-124    	;abs 0x8760
    87de:	30 40 76 85 	br	#0x8576		;

000087e2 <__mspabi_func_epilog_7>:
    87e2:	34 41       	pop	r4		;

000087e4 <__mspabi_func_epilog_6>:
    87e4:	35 41       	pop	r5		;

000087e6 <__mspabi_func_epilog_5>:
    87e6:	36 41       	pop	r6		;

000087e8 <__mspabi_func_epilog_4>:
    87e8:	37 41       	pop	r7		;

000087ea <__mspabi_func_epilog_3>:
    87ea:	38 41       	pop	r8		;

000087ec <__mspabi_func_epilog_2>:
    87ec:	39 41       	pop	r9		;

000087ee <__mspabi_func_epilog_1>:
    87ee:	3a 41       	pop	r10		;
    87f0:	30 41       	ret			

000087f2 <__mspabi_srli_15>:
    87f2:	12 c3       	clrc			
    87f4:	0c 10       	rrc	r12		;

000087f6 <__mspabi_srli_14>:
    87f6:	12 c3       	clrc			
    87f8:	0c 10       	rrc	r12		;

000087fa <__mspabi_srli_13>:
    87fa:	12 c3       	clrc			
    87fc:	0c 10       	rrc	r12		;

000087fe <__mspabi_srli_12>:
    87fe:	12 c3       	clrc			
    8800:	0c 10       	rrc	r12		;

00008802 <__mspabi_srli_11>:
    8802:	12 c3       	clrc			
    8804:	0c 10       	rrc	r12		;

00008806 <__mspabi_srli_10>:
    8806:	12 c3       	clrc			
    8808:	0c 10       	rrc	r12		;

0000880a <__mspabi_srli_9>:
    880a:	12 c3       	clrc			
    880c:	0c 10       	rrc	r12		;

0000880e <__mspabi_srli_8>:
    880e:	12 c3       	clrc			
    8810:	0c 10       	rrc	r12		;

00008812 <__mspabi_srli_7>:
    8812:	12 c3       	clrc			
    8814:	0c 10       	rrc	r12		;

00008816 <__mspabi_srli_6>:
    8816:	12 c3       	clrc			
    8818:	0c 10       	rrc	r12		;

0000881a <__mspabi_srli_5>:
    881a:	12 c3       	clrc			
    881c:	0c 10       	rrc	r12		;

0000881e <__mspabi_srli_4>:
    881e:	12 c3       	clrc			
    8820:	0c 10       	rrc	r12		;

00008822 <__mspabi_srli_3>:
    8822:	12 c3       	clrc			
    8824:	0c 10       	rrc	r12		;

00008826 <__mspabi_srli_2>:
    8826:	12 c3       	clrc			
    8828:	0c 10       	rrc	r12		;

0000882a <__mspabi_srli_1>:
    882a:	12 c3       	clrc			
    882c:	0c 10       	rrc	r12		;
    882e:	30 41       	ret			

00008830 <.L11>:
    8830:	3d 53       	add	#-1,	r13	;r3 As==11
    8832:	12 c3       	clrc			
    8834:	0c 10       	rrc	r12		;

00008836 <__mspabi_srli>:
    8836:	0d 93       	cmp	#0,	r13	;r3 As==00
    8838:	fb 23       	jnz	$-8      	;abs 0x8830
    883a:	30 41       	ret			

0000883c <__mspabi_srll_15>:
    883c:	12 c3       	clrc			
    883e:	0d 10       	rrc	r13		;
    8840:	0c 10       	rrc	r12		;

00008842 <__mspabi_srll_14>:
    8842:	12 c3       	clrc			
    8844:	0d 10       	rrc	r13		;
    8846:	0c 10       	rrc	r12		;

00008848 <__mspabi_srll_13>:
    8848:	12 c3       	clrc			
    884a:	0d 10       	rrc	r13		;
    884c:	0c 10       	rrc	r12		;

0000884e <__mspabi_srll_12>:
    884e:	12 c3       	clrc			
    8850:	0d 10       	rrc	r13		;
    8852:	0c 10       	rrc	r12		;

00008854 <__mspabi_srll_11>:
    8854:	12 c3       	clrc			
    8856:	0d 10       	rrc	r13		;
    8858:	0c 10       	rrc	r12		;

0000885a <__mspabi_srll_10>:
    885a:	12 c3       	clrc			
    885c:	0d 10       	rrc	r13		;
    885e:	0c 10       	rrc	r12		;

00008860 <__mspabi_srll_9>:
    8860:	12 c3       	clrc			
    8862:	0d 10       	rrc	r13		;
    8864:	0c 10       	rrc	r12		;

00008866 <__mspabi_srll_8>:
    8866:	12 c3       	clrc			
    8868:	0d 10       	rrc	r13		;
    886a:	0c 10       	rrc	r12		;

0000886c <__mspabi_srll_7>:
    886c:	12 c3       	clrc			
    886e:	0d 10       	rrc	r13		;
    8870:	0c 10       	rrc	r12		;

00008872 <__mspabi_srll_6>:
    8872:	12 c3       	clrc			
    8874:	0d 10       	rrc	r13		;
    8876:	0c 10       	rrc	r12		;

00008878 <__mspabi_srll_5>:
    8878:	12 c3       	clrc			
    887a:	0d 10       	rrc	r13		;
    887c:	0c 10       	rrc	r12		;

0000887e <__mspabi_srll_4>:
    887e:	12 c3       	clrc			
    8880:	0d 10       	rrc	r13		;
    8882:	0c 10       	rrc	r12		;

00008884 <__mspabi_srll_3>:
    8884:	12 c3       	clrc			
    8886:	0d 10       	rrc	r13		;
    8888:	0c 10       	rrc	r12		;

0000888a <__mspabi_srll_2>:
    888a:	12 c3       	clrc			
    888c:	0d 10       	rrc	r13		;
    888e:	0c 10       	rrc	r12		;

00008890 <__mspabi_srll_1>:
    8890:	12 c3       	clrc			
    8892:	0d 10       	rrc	r13		;
    8894:	0c 10       	rrc	r12		;
    8896:	30 41       	ret			

00008898 <.L12>:
    8898:	3e 53       	add	#-1,	r14	;r3 As==11
    889a:	12 c3       	clrc			
    889c:	0d 10       	rrc	r13		;
    889e:	0c 10       	rrc	r12		;

000088a0 <__mspabi_srll>:
    88a0:	0e 93       	cmp	#0,	r14	;r3 As==00
    88a2:	fa 23       	jnz	$-10     	;abs 0x8898
    88a4:	30 41       	ret			

000088a6 <memmove>:
    88a6:	0d 9c       	cmp	r12,	r13	;
    88a8:	0a 28       	jnc	$+22     	;abs 0x88be

000088aa <.L5>:
    88aa:	0f 4c       	mov	r12,	r15	;
    88ac:	0e 5c       	add	r12,	r14	;

000088ae <.L3>:
    88ae:	0e 9f       	cmp	r15,	r14	;
    88b0:	0d 24       	jz	$+28     	;abs 0x88cc

000088b2 <.LVL3>:
    88b2:	ef 4d 00 00 	mov.b	@r13,	0(r15)	;
    88b6:	1f 53       	inc	r15		;

000088b8 <.LVL4>:
    88b8:	1d 53       	inc	r13		;
    88ba:	30 40 ae 88 	br	#0x88ae		;

000088be <.L2>:
    88be:	0f 4d       	mov	r13,	r15	;
    88c0:	0f 5e       	add	r14,	r15	;
    88c2:	0c 9f       	cmp	r15,	r12	;
    88c4:	f2 2f       	jc	$-26     	;abs 0x88aa

000088c6 <.L4>:
    88c6:	3e 53       	add	#-1,	r14	;r3 As==11

000088c8 <.LVL7>:
    88c8:	3e 93       	cmp	#-1,	r14	;r3 As==11
    88ca:	01 20       	jnz	$+4      	;abs 0x88ce

000088cc <.L10>:
    88cc:	30 41       	ret			

000088ce <.L6>:
    88ce:	0b 4c       	mov	r12,	r11	;
    88d0:	0b 5e       	add	r14,	r11	;
    88d2:	0f 4d       	mov	r13,	r15	;
    88d4:	0f 5e       	add	r14,	r15	;
    88d6:	eb 4f 00 00 	mov.b	@r15,	0(r11)	;
    88da:	30 40 c6 88 	br	#0x88c6		;

000088de <memset>:
    88de:	0f 4c       	mov	r12,	r15	;
    88e0:	0e 5c       	add	r12,	r14	;

000088e2 <.L2>:
    88e2:	0f 9e       	cmp	r14,	r15	;
    88e4:	01 20       	jnz	$+4      	;abs 0x88e8

000088e6 <.Loc.104.1>:
    88e6:	30 41       	ret			

000088e8 <.L3>:
    88e8:	cf 4d 00 00 	mov.b	r13,	0(r15)	;
    88ec:	1f 53       	inc	r15		;

000088ee <.LVL4>:
    88ee:	30 40 e2 88 	br	#0x88e2		;

000088f2 <L0>:
    88f2:	30 41       	ret			

000088f4 <__do_global_ctors_aux>:
    88f4:	0a 12       	push	r10		;
    88f6:	3a 40 08 81 	mov	#33032,	r10	;#0x8108

000088fa <.L2>:
    88fa:	2c 4a       	mov	@r10,	r12	;
    88fc:	3c 93       	cmp	#-1,	r12	;r3 As==11
    88fe:	02 20       	jnz	$+6      	;abs 0x8904
    8900:	3a 41       	pop	r10		;
    8902:	30 41       	ret			

00008904 <.L3>:
    8904:	8c 12       	call	r12		;
    8906:	3a 50 fe ff 	add	#65534,	r10	;#0xfffe
    890a:	30 40 fa 88 	br	#0x88fa		;

0000890e <call___do_global_ctors_aux>:
    890e:	b0 12 16 82 	call	#33302		;#0x8216
    8912:	b0 12 f4 88 	call	#35060		;#0x88f4

00008916 <L0>:
    8916:	b0 12 4e 81 	call	#33102		;#0x814e

0000891a <.Loc.19.1>:
    891a:	b0 12 40 81 	call	#33088		;#0x8140

0000891e <.Loc.20.1>:
    891e:	30 41       	ret			

00008920 <__msp430_fini>:
    8920:	b0 12 5c 81 	call	#33116		;#0x815c

00008924 <L0>:
    8924:	b0 12 c8 81 	call	#33224		;#0x81c8

00008928 <L0>:
    8928:	30 41       	ret			
