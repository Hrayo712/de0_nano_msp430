
bitcount.elf:     file format elf32-msp430

SYMBOL TABLE:
0000fffe l    d  __reset_vector	00000000 __reset_vector
00008000 l    d  .rodata	00000000 .rodata
00008110 l    d  .text	00000000 .text
00004000 l    d  .data	00000000 .data
00004002 l    d  .bss	00000000 .bss
00004014 l    d  .noinit	00000000 .noinit
00000000 l    d  .MP430.attributes	00000000 .MP430.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_macinfo	00000000 .debug_macinfo
00000000 l    df *ABS*	00000000 /opt/ti/ccsv8/tools/compiler/msp430-gcc-7.3.1.24_linux64/bin/../lib/gcc/msp430-elf/7.3.1/../../../../msp430-elf/lib/430/crt0.o
0000fffe l       __reset_vector	00000000 __msp430_resetvec_hook
0000816c l       .text	00000000 _msp430_run_array
0000817a l       .text	00000000 _msp430_run_done
00000000 l    df *ABS*	00000000 main.c
00008000 l     O .rodata	00000100 bits
00000000 l    df *ABS*	00000000 /opt/ti/ccsv8/tools/compiler/msp430-gcc-7.3.1.24_linux64/bin/../lib/gcc/msp430-elf/7.3.1/430/crtbegin.o
00008108 l     O .rodata	00000000 __CTOR_LIST__
0000810c l     O .rodata	00000000 __DTOR_LIST__
00008100 l     O .rodata	00000000 __EH_FRAME_BEGIN__
00008764 l     O .text	00000000 __TMC_LIST__
00008180 l     F .text	00000000 deregister_tm_clones
0000819a l     F .text	00000000 register_tm_clones
000081c8 l     F .text	00000000 __do_global_dtors_aux
00004002 l     O .bss	00000000 completed.3056
00004004 l     O .bss	00000000 dtor_idx.3058
00008216 l     F .text	00000000 call___do_global_dtors_aux
00008216 l     F .text	00000000 frame_dummy
00004006 l     O .bss	00000000 object.3071
0000822e l     F .text	00000000 call_frame_dummy
00000000 l    df *ABS*	00000000 /opt/ti/ccsv8/tools/compiler/msp430-gcc-7.3.1.24_linux64/bin/../lib/gcc/msp430-elf/7.3.1/430/crtend.o
0000810a l     O .rodata	00000000 __CTOR_END__
00008100 l     O .rodata	00000000 __FRAME_END__
0000872e l     F .text	00000000 __do_global_ctors_aux
00008748 l     F .text	00000000 call___do_global_ctors_aux
00000000 l    df *ABS*	00000000 crt_bss.o
00000000 l    df *ABS*	00000000 crt_movedata.o
00000000 l    df *ABS*	00000000 crt_main.o
00000000 l    df *ABS*	00000000 srli.o
00000000 l    df *ABS*	00000000 lib_a-memmove.o
00000000 l    df *ABS*	00000000 lib_a-memset.o
00000000 l    df *ABS*	00000000 /opt/ti/ccsv8/tools/compiler/msp430-gcc-7.3.1.24_linux64/bin/../lib/gcc/msp430-elf/7.3.1/../../../../msp430-elf/lib/430/crtn.o
00008644 g       .text	00000000 .hidden __mspabi_srli_9
00008694 g       .text	00000000 .hidden __mspabi_srll_10
00008640 g       .text	00000000 .hidden __mspabi_srli_10
0000832c g     F .text	000000a4 ntbl_bitcount
0000862c g       .text	00000000 .hidden __mspabi_srli_15
000086e0 g     F .text	00000038 memmove
00008658 g       .text	00000000 .hidden __mspabi_srli_4
0000864c g       .text	00000000 .hidden __mspabi_srli_7
000086a6 g       .text	00000000 .hidden __mspabi_srll_7
000086be g       .text	00000000 .hidden __mspabi_srll_3
0000861e g       .text	00000000 .hidden __mspabi_func_epilog_6
00008764 g     O .text	00000000 .hidden __TMC_END__
00008682 g       .text	00000000 .hidden __mspabi_srll_13
0000810e g     O .rodata	00000000 .hidden __DTOR_END__
00008104 g       .rodata	00000000 __fini_array_end
00008638 g       .text	00000000 .hidden __mspabi_srli_12
00008110 g     F .text	00000004 __crt0_start
00004000 g     O .data	00000000 .hidden __dso_handle
00008114 g     F .text	0000000e __crt0_init_bss
00000012 g       *ABS*	00000000 __bsssize
00008136 g     F .text	0000000a __crt0_call_init_then_main
00008628 g       .text	00000000 .hidden __mspabi_func_epilog_1
00008624 g       .text	00000000 .hidden __mspabi_func_epilog_3
000086b2 g       .text	00000000 .hidden __mspabi_srll_5
00008670 g       .text	00000000 .hidden __mspabi_srli
0000868e g       .text	00000000 .hidden __mspabi_srll_11
00008654 g       .text	00000000 .hidden __mspabi_srli_5
000083d0 g     F .text	0000003e BW_btbl_bitcount
00000000  w      *UND*	00000000 __deregister_frame_info
00004014 g       .noinit	00000000 end
00000000  w      *UND*	00000000 _ITM_registerTMCloneTable
000086ac g       .text	00000000 .hidden __mspabi_srll_6
00008110 g       .text	00000000 _start
0000815c g     F .text	00000000 _msp430_run_fini_array
00008664 g       .text	00000000 .hidden __mspabi_srli_1
0000867c g       .text	00000000 .hidden __mspabi_srll_14
00008286 g     F .text	000000a6 bitcount
00008630 g       .text	00000000 .hidden __mspabi_srli_14
00000002 g       *ABS*	00000000 __romdatacopysize
0000822e g     F .text	00000008 init
0000863c g       .text	00000000 .hidden __mspabi_srli_11
00000000  w      *UND*	00000000 _ITM_deregisterTMCloneTable
00008104 g       .rodata	00000000 __fini_array_start
00000000  w      *ABS*	00000000 __rom_highdatacopysize
0000844a g     F .text	00000028 ntbl_bitcnt
00008748 g       .text	00000000 __msp430_init
00008718 g     F .text	00000014 memset
000084a4 g     F .text	00000178 main
000086b8 g       .text	00000000 .hidden __mspabi_srll_4
00008104 g       .rodata	00000000 __init_array_end
00008660 g       .text	00000000 .hidden __mspabi_srli_2
00008472 g     F .text	00000032 bit_shifter
00000000  w      *ABS*	00000000 __high_bsssize
0000825a g     F .text	0000002c bit_count
00000000  w      *ABS*	00000000 __rom_highdatastart
00008764 g       .text	00000000 __msp430_fini_end
00008688 g       .text	00000000 .hidden __mspabi_srll_12
00008764 g       *ABS*	00000000 __romdatastart
00008140 g     F .text	00000000 _msp430_run_init_array
00008650 g       .text	00000000 .hidden __mspabi_srli_6
00008104 g       .rodata	00000000 __preinit_array_end
0000865c g       .text	00000000 .hidden __mspabi_srli_3
00000000  w      *ABS*	00000000 __high_datastart
00000000  w      *ABS*	00000000 __upper_data_init
00004002 g       .bss	00000000 __bssstart
00008620 g       .text	00000000 .hidden __mspabi_func_epilog_5
00008236 g     F .text	00000024 btbl_bitcnt
00008000 g       .noinit	00000000 __stack
0000869a g       .text	00000000 .hidden __mspabi_srll_9
00004002 g       .data	00000000 _edata
0000875a g       .text	00000000 __msp430_init_end
000086da g       .text	00000000 .hidden __mspabi_srll
00000000  w      *ABS*	00000000 __high_bssstart
00008676 g       .text	00000000 .hidden __mspabi_srll_15
00008104 g       .rodata	00000000 __init_array_start
0000840e g     F .text	0000003c AR_btbl_bitcount
00008634 g       .text	00000000 .hidden __mspabi_srli_13
00004000 g       .data	00000000 __datastart
000086a0 g       .text	00000000 .hidden __mspabi_srll_8
000086ca g       .text	00000000 .hidden __mspabi_srll_1
00008104 g       .rodata	00000000 __preinit_array_start
00008122 g     F .text	00000014 __crt0_movedata
00008626 g       .text	00000000 .hidden __mspabi_func_epilog_2
00000000  w      *UND*	00000000 __register_frame_info
0000814e g     F .text	00000000 _msp430_run_preinit_array
0000861c g       .text	00000000 .hidden __mspabi_func_epilog_7
00008622 g       .text	00000000 .hidden __mspabi_func_epilog_4
000086c4 g       .text	00000000 .hidden __mspabi_srll_2
0000875a g       .text	00000000 __msp430_fini
00008648 g       .text	00000000 .hidden __mspabi_srli_8



Disassembly of section .text:

00008110 <__crt0_start>:
    8110:	31 40 00 80 	mov	#32768,	r1	;#0x8000

00008114 <__crt0_init_bss>:
    8114:	3c 40 02 40 	mov	#16386,	r12	;#0x4002

00008118 <.Loc.74.1>:
    8118:	0d 43       	clr	r13		;

0000811a <.Loc.75.1>:
    811a:	3e 40 12 00 	mov	#18,	r14	;#0x0012

0000811e <.Loc.79.1>:
    811e:	b0 12 18 87 	call	#34584		;#0x8718

00008122 <__crt0_movedata>:
    8122:	3c 40 00 40 	mov	#16384,	r12	;#0x4000

00008126 <.Loc.116.1>:
    8126:	3d 40 64 87 	mov	#34660,	r13	;#0x8764

0000812a <.Loc.119.1>:
    812a:	0d 9c       	cmp	r12,	r13	;

0000812c <.Loc.120.1>:
    812c:	04 24       	jz	$+10     	;abs 0x8136

0000812e <.Loc.122.1>:
    812e:	3e 40 02 00 	mov	#2,	r14	;

00008132 <.Loc.124.1>:
    8132:	b0 12 e0 86 	call	#34528		;#0x86e0

00008136 <__crt0_call_init_then_main>:
    8136:	b0 12 48 87 	call	#34632		;#0x8748

0000813a <.Loc.196.1>:
    813a:	0c 43       	clr	r12		;

0000813c <.Loc.197.1>:
    813c:	b0 12 a4 84 	call	#33956		;#0x84a4

00008140 <_msp430_run_init_array>:
    8140:	34 40 04 81 	mov	#33028,	r4	;#0x8104

00008144 <.Loc.224.1>:
    8144:	35 40 04 81 	mov	#33028,	r5	;#0x8104

00008148 <.Loc.225.1>:
    8148:	26 43       	mov	#2,	r6	;r3 As==10

0000814a <.Loc.226.1>:
    814a:	30 40 6c 81 	br	#0x816c		;

0000814e <_msp430_run_preinit_array>:
    814e:	34 40 04 81 	mov	#33028,	r4	;#0x8104

00008152 <.Loc.232.1>:
    8152:	35 40 04 81 	mov	#33028,	r5	;#0x8104

00008156 <.Loc.233.1>:
    8156:	26 43       	mov	#2,	r6	;r3 As==10

00008158 <.Loc.234.1>:
    8158:	30 40 6c 81 	br	#0x816c		;

0000815c <_msp430_run_fini_array>:
    815c:	34 40 04 81 	mov	#33028,	r4	;#0x8104

00008160 <.Loc.240.1>:
    8160:	35 40 04 81 	mov	#33028,	r5	;#0x8104

00008164 <.Loc.241.1>:
    8164:	36 40 fe ff 	mov	#65534,	r6	;#0xfffe

00008168 <.Loc.242.1>:
    8168:	30 40 6c 81 	br	#0x816c		;

0000816c <_msp430_run_array>:
    816c:	05 94       	cmp	r4,	r5	;

0000816e <.Loc.246.1>:
    816e:	05 24       	jz	$+12     	;abs 0x817a

00008170 <.Loc.247.1>:
    8170:	27 44       	mov	@r4,	r7	;

00008172 <.Loc.248.1>:
    8172:	04 56       	add	r6,	r4	;

00008174 <.Loc.249.1>:
    8174:	a7 12       	call	@r7		;

00008176 <.Loc.250.1>:
    8176:	10 40 f4 ff 	br	0xfff4		;PC rel. 0x816c

0000817a <_msp430_run_done>:
    817a:	30 41       	ret			

0000817c <L0>:
    817c:	30 41       	ret			
    817e:	30 41       	ret			

00008180 <deregister_tm_clones>:
    8180:	3c 40 64 87 	mov	#34660,	r12	;#0x8764
    8184:	3c 90 64 87 	cmp	#34660,	r12	;#0x8764
    8188:	07 24       	jz	$+16     	;abs 0x8198
    818a:	3d 40 00 00 	mov	#0,	r13	;
    818e:	0d 93       	cmp	#0,	r13	;r3 As==00
    8190:	03 24       	jz	$+8      	;abs 0x8198
    8192:	3c 40 64 87 	mov	#34660,	r12	;#0x8764
    8196:	8d 12       	call	r13		;

00008198 <.L1>:
    8198:	30 41       	ret			

0000819a <register_tm_clones>:
    819a:	0a 12       	push	r10		;
    819c:	3a 40 64 87 	mov	#34660,	r10	;#0x8764
    81a0:	3a 80 64 87 	sub	#34660,	r10	;#0x8764
    81a4:	0a 11       	rra	r10		;
    81a6:	0c 4a       	mov	r10,	r12	;
    81a8:	b0 12 2c 86 	call	#34348		;#0x862c
    81ac:	0c 5a       	add	r10,	r12	;
    81ae:	0d 4c       	mov	r12,	r13	;
    81b0:	0d 11       	rra	r13		;
    81b2:	0d 93       	cmp	#0,	r13	;r3 As==00
    81b4:	07 24       	jz	$+16     	;abs 0x81c4
    81b6:	3e 40 00 00 	mov	#0,	r14	;
    81ba:	0e 93       	cmp	#0,	r14	;r3 As==00
    81bc:	03 24       	jz	$+8      	;abs 0x81c4
    81be:	3c 40 64 87 	mov	#34660,	r12	;#0x8764
    81c2:	8e 12       	call	r14		;

000081c4 <.L9>:
    81c4:	3a 41       	pop	r10		;
    81c6:	30 41       	ret			

000081c8 <__do_global_dtors_aux>:
    81c8:	0a 12       	push	r10		;
    81ca:	09 12       	push	r9		;
    81cc:	c2 93 02 40 	cmp.b	#0,	&0x4002	;r3 As==00
    81d0:	17 20       	jnz	$+48     	;abs 0x8200
    81d2:	3a 40 0e 81 	mov	#33038,	r10	;#0x810e
    81d6:	3a 80 0c 81 	sub	#33036,	r10	;#0x810c
    81da:	0a 11       	rra	r10		;
    81dc:	3a 53       	add	#-1,	r10	;r3 As==11
    81de:	39 40 0c 81 	mov	#33036,	r9	;#0x810c

000081e2 <.L19>:
    81e2:	1c 42 04 40 	mov	&0x4004,r12	;0x4004
    81e6:	0c 9a       	cmp	r10,	r12	;
    81e8:	0d 28       	jnc	$+28     	;abs 0x8204
    81ea:	b0 12 80 81 	call	#33152		;#0x8180
    81ee:	3d 40 00 00 	mov	#0,	r13	;
    81f2:	0d 93       	cmp	#0,	r13	;r3 As==00
    81f4:	03 24       	jz	$+8      	;abs 0x81fc
    81f6:	3c 40 00 81 	mov	#33024,	r12	;#0x8100
    81fa:	8d 12       	call	r13		;

000081fc <.L21>:
    81fc:	d2 43 02 40 	mov.b	#1,	&0x4002	;r3 As==01

00008200 <.L17>:
    8200:	30 40 26 86 	br	#0x8626		;

00008204 <.L20>:
    8204:	1c 53       	inc	r12		;
    8206:	82 4c 04 40 	mov	r12,	&0x4004	;
    820a:	0c 5c       	rla	r12		;
    820c:	0c 59       	add	r9,	r12	;
    820e:	2c 4c       	mov	@r12,	r12	;
    8210:	8c 12       	call	r12		;
    8212:	30 40 e2 81 	br	#0x81e2		;

00008216 <call___do_global_dtors_aux>:
    8216:	3e 40 00 00 	mov	#0,	r14	;
    821a:	0e 93       	cmp	#0,	r14	;r3 As==00
    821c:	05 24       	jz	$+12     	;abs 0x8228
    821e:	3d 40 06 40 	mov	#16390,	r13	;#0x4006
    8222:	3c 40 00 81 	mov	#33024,	r12	;#0x8100
    8226:	8e 12       	call	r14		;

00008228 <.L27>:
    8228:	b0 12 9a 81 	call	#33178		;#0x819a
    822c:	30 41       	ret			

0000822e <init>:
int bit_shifter(uint32_t x);

void init()
{

     WDTCTL = WDTPW | WDTHOLD; // Stop WDT
    822e:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    8232:	20 01 

00008234 <.Loc.58.1>:
    //__delay_cycles(3);

    /* init FRAM */
    //FRCTL0_H |= (FWPW) >> 8;

}
    8234:	30 41       	ret			

00008236 <btbl_bitcnt>:

int btbl_bitcnt(uint32_t x)
{
    8236:	0a 12       	push	r10		;

00008238 <.LCFI0>:
      int cnt = bits[ ((char *)&x)[0] & 0xFF ];
    8238:	4e 4c       	mov.b	r12,	r14	;
    823a:	5a 4e 00 80 	mov.b	-32768(r14),r10	;0xffff8000

0000823e <.LVL1>:

      if (0L != (x >>= 8))
    823e:	b0 12 a0 86 	call	#34464		;#0x86a0

00008242 <.LVL2>:
    8242:	0e 4c       	mov	r12,	r14	;
    8244:	0e dd       	bis	r13,	r14	;
    8246:	0e 93       	cmp	#0,	r14	;r3 As==00
    8248:	03 20       	jnz	$+8      	;abs 0x8250

0000824a <.L2>:
            cnt += btbl_bitcnt(x);
      return cnt;
}
    824a:	0c 4a       	mov	r10,	r12	;
    824c:	3a 41       	pop	r10		;

0000824e <.LVL4>:
    824e:	30 41       	ret			

00008250 <.L5>:
int btbl_bitcnt(uint32_t x)
{
      int cnt = bits[ ((char *)&x)[0] & 0xFF ];

      if (0L != (x >>= 8))
            cnt += btbl_bitcnt(x);
    8250:	b0 12 36 82 	call	#33334		;#0x8236

00008254 <.LVL6>:
    8254:	0a 5c       	add	r12,	r10	;

00008256 <.Loc.66.1>:
      return cnt;
    8256:	30 40 4a 82 	br	#0x824a		;

0000825a <bit_count>:
}
int bit_count(uint32_t x)
{
    825a:	0e 4c       	mov	r12,	r14	;

0000825c <.Loc.72.1>:
        int n = 0;

        if (x) do
    825c:	0c dd       	bis	r13,	r12	;

0000825e <.LVL10>:
    825e:	0c 93       	cmp	#0,	r12	;r3 As==00
    8260:	0f 24       	jz	$+32     	;abs 0x8280

00008262 <.Loc.70.1>:
            cnt += btbl_bitcnt(x);
      return cnt;
}
int bit_count(uint32_t x)
{
        int n = 0;
    8262:	4c 43       	clr.b	r12		;

00008264 <.L9>:

        if (x) do
              n++;
    8264:	1c 53       	inc	r12		;

00008266 <.Loc.74.1>:
        while (0 != (x = x&(x-1))) ;
    8266:	0b 4e       	mov	r14,	r11	;
    8268:	3b 53       	add	#-1,	r11	;r3 As==11
    826a:	0f 4d       	mov	r13,	r15	;
    826c:	3f 63       	addc	#-1,	r15	;r3 As==11
    826e:	0b fe       	and	r14,	r11	;
    8270:	0f fd       	and	r13,	r15	;
    8272:	0e 4b       	mov	r11,	r14	;

00008274 <.LVL13>:
    8274:	0d 4f       	mov	r15,	r13	;

00008276 <.LVL14>:
    8276:	0f 4b       	mov	r11,	r15	;
    8278:	0f dd       	bis	r13,	r15	;
    827a:	0f 93       	cmp	#0,	r15	;r3 As==00
    827c:	f3 23       	jnz	$-24     	;abs 0x8264

0000827e <.L6>:
        return(n);
}
    827e:	30 41       	ret			

00008280 <.L10>:
            cnt += btbl_bitcnt(x);
      return cnt;
}
int bit_count(uint32_t x)
{
        int n = 0;
    8280:	4c 43       	clr.b	r12		;

00008282 <.Loc.75.1>:

        if (x) do
              n++;
        while (0 != (x = x&(x-1))) ;
        return(n);
    8282:	30 40 7e 82 	br	#0x827e		;

00008286 <bitcount>:
}
int bitcount(uint32_t i)
{
    8286:	0a 12       	push	r10		;

00008288 <.LCFI1>:
    8288:	09 12       	push	r9		;

0000828a <.LCFI2>:
    828a:	08 12       	push	r8		;

0000828c <.LCFI3>:
    828c:	0a 4c       	mov	r12,	r10	;
    828e:	0b 4d       	mov	r13,	r11	;

00008290 <.Loc.79.1>:
      i = ((i & 0xAAAAAAAAL) >>  1) + (i & 0x55555555L);
    8290:	12 c3       	clrc			
    8292:	0d 10       	rrc	r13		;
    8294:	0c 10       	rrc	r12		;

00008296 <.LVL18>:
    8296:	0e 4c       	mov	r12,	r14	;
    8298:	3e f0 55 55 	and	#21845,	r14	;#0x5555
    829c:	09 4d       	mov	r13,	r9	;
    829e:	39 f0 55 55 	and	#21845,	r9	;#0x5555
    82a2:	0d 4a       	mov	r10,	r13	;
    82a4:	3d f0 55 55 	and	#21845,	r13	;#0x5555
    82a8:	0c 4b       	mov	r11,	r12	;
    82aa:	3c f0 55 55 	and	#21845,	r12	;#0x5555
    82ae:	08 4e       	mov	r14,	r8	;
    82b0:	08 5d       	add	r13,	r8	;
    82b2:	09 6c       	addc	r12,	r9	;

000082b4 <.LVL19>:
      i = ((i & 0xCCCCCCCCL) >>  2) + (i & 0x33333333L);
    82b4:	0c 48       	mov	r8,	r12	;
    82b6:	0d 49       	mov	r9,	r13	;
    82b8:	b0 12 c4 86 	call	#34500		;#0x86c4
    82bc:	0e 4c       	mov	r12,	r14	;
    82be:	3e f0 33 33 	and	#13107,	r14	;#0x3333
    82c2:	0a 4d       	mov	r13,	r10	;
    82c4:	3a f0 33 33 	and	#13107,	r10	;#0x3333
    82c8:	0c 48       	mov	r8,	r12	;
    82ca:	3c f0 33 33 	and	#13107,	r12	;#0x3333
    82ce:	0d 49       	mov	r9,	r13	;
    82d0:	3d f0 33 33 	and	#13107,	r13	;#0x3333
    82d4:	08 4e       	mov	r14,	r8	;

000082d6 <.LVL21>:
    82d6:	08 5c       	add	r12,	r8	;
    82d8:	0a 6d       	addc	r13,	r10	;

000082da <.LVL22>:
      i = ((i & 0xF0F0F0F0L) >>  4) + (i & 0x0F0F0F0FL);
    82da:	0c 48       	mov	r8,	r12	;
    82dc:	0d 4a       	mov	r10,	r13	;
    82de:	b0 12 b8 86 	call	#34488		;#0x86b8
    82e2:	0e 4c       	mov	r12,	r14	;
    82e4:	3e f0 0f 0f 	and	#3855,	r14	;#0x0f0f
    82e8:	09 4d       	mov	r13,	r9	;
    82ea:	39 f0 0f 0f 	and	#3855,	r9	;#0x0f0f
    82ee:	0d 48       	mov	r8,	r13	;
    82f0:	3d f0 0f 0f 	and	#3855,	r13	;#0x0f0f
    82f4:	0c 4a       	mov	r10,	r12	;
    82f6:	3c f0 0f 0f 	and	#3855,	r12	;#0x0f0f
    82fa:	08 4e       	mov	r14,	r8	;

000082fc <.LVL24>:
    82fc:	08 5d       	add	r13,	r8	;
    82fe:	09 6c       	addc	r12,	r9	;

00008300 <.LVL25>:
      i = ((i & 0xFF00FF00L) >>  8) + (i & 0x00FF00FFL);
    8300:	0c 48       	mov	r8,	r12	;
    8302:	0d 49       	mov	r9,	r13	;
    8304:	b0 12 a0 86 	call	#34464		;#0x86a0
    8308:	4e 4c       	mov.b	r12,	r14	;
    830a:	4f 4d       	mov.b	r13,	r15	;
    830c:	0a 48       	mov	r8,	r10	;
    830e:	7a f0 ff 00 	and.b	#255,	r10	;#0x00ff
    8312:	0d 49       	mov	r9,	r13	;
    8314:	7d f0 ff 00 	and.b	#255,	r13	;#0x00ff
    8318:	0a 5e       	add	r14,	r10	;
    831a:	0d 6f       	addc	r15,	r13	;

0000831c <.LVL27>:
      i = ((i & 0xFFFF0000L) >> 16) + (i & 0x0000FFFFL);
    831c:	0c 4a       	mov	r10,	r12	;
    831e:	7e 40 10 00 	mov.b	#16,	r14	;#0x0010
    8322:	b0 12 da 86 	call	#34522		;#0x86da

00008326 <.LVL28>:
      return (int)i;
}
    8326:	0c 5a       	add	r10,	r12	;
    8328:	30 40 24 86 	br	#0x8624		;

0000832c <ntbl_bitcount>:
int ntbl_bitcount(uint32_t x)
{
    832c:	0a 12       	push	r10		;

0000832e <.LCFI4>:
    832e:	09 12       	push	r9		;

00008330 <.LCFI5>:
    8330:	08 12       	push	r8		;

00008332 <.LCFI6>:
    8332:	07 12       	push	r7		;

00008334 <.LCFI7>:
    8334:	08 4c       	mov	r12,	r8	;
    8336:	07 4d       	mov	r13,	r7	;

00008338 <.Loc.90.1>:
      return
            bits[ (int) (x & 0x0000000FUL)       ] +
            bits[ (int)((x & 0x000000F0UL) >> 4) ] +
    8338:	39 40 00 80 	mov	#32768,	r9	;#0x8000
    833c:	b0 12 b8 86 	call	#34488		;#0x86b8

00008340 <.LVL30>:
    8340:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f
    8344:	0c 59       	add	r9,	r12	;

00008346 <.Loc.89.1>:
      return (int)i;
}
int ntbl_bitcount(uint32_t x)
{
      return
            bits[ (int) (x & 0x0000000FUL)       ] +
    8346:	0d 48       	mov	r8,	r13	;
    8348:	7d f0 0f 00 	and.b	#15,	r13	;#0x000f
    834c:	0d 59       	add	r9,	r13	;
    834e:	6a 4d       	mov.b	@r13,	r10	;
    8350:	6c 4c       	mov.b	@r12,	r12	;
    8352:	0a 5c       	add	r12,	r10	;

00008354 <.Loc.91.1>:
            bits[ (int)((x & 0x000000F0UL) >> 4) ] +
            bits[ (int)((x & 0x00000F00UL) >> 8) ] +
    8354:	0c 48       	mov	r8,	r12	;
    8356:	0d 47       	mov	r7,	r13	;
    8358:	b0 12 a0 86 	call	#34464		;#0x86a0
    835c:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f
    8360:	0c 59       	add	r9,	r12	;

00008362 <.Loc.90.1>:
}
int ntbl_bitcount(uint32_t x)
{
      return
            bits[ (int) (x & 0x0000000FUL)       ] +
            bits[ (int)((x & 0x000000F0UL) >> 4) ] +
    8362:	6c 4c       	mov.b	@r12,	r12	;
    8364:	0a 5c       	add	r12,	r10	;

00008366 <.Loc.92.1>:
            bits[ (int)((x & 0x00000F00UL) >> 8) ] +
            bits[ (int)((x & 0x0000F000UL) >> 12)] +
    8366:	0c 48       	mov	r8,	r12	;
    8368:	0d 47       	mov	r7,	r13	;
    836a:	b0 12 88 86 	call	#34440		;#0x8688
    836e:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f
    8372:	0c 59       	add	r9,	r12	;

00008374 <.Loc.91.1>:
int ntbl_bitcount(uint32_t x)
{
      return
            bits[ (int) (x & 0x0000000FUL)       ] +
            bits[ (int)((x & 0x000000F0UL) >> 4) ] +
            bits[ (int)((x & 0x00000F00UL) >> 8) ] +
    8374:	6c 4c       	mov.b	@r12,	r12	;
    8376:	0a 5c       	add	r12,	r10	;

00008378 <.Loc.93.1>:
            bits[ (int)((x & 0x0000F000UL) >> 12)] +
            bits[ (int)((x & 0x000F0000UL) >> 16)] +
    8378:	0c 48       	mov	r8,	r12	;
    837a:	0d 47       	mov	r7,	r13	;
    837c:	7e 40 10 00 	mov.b	#16,	r14	;#0x0010
    8380:	b0 12 da 86 	call	#34522		;#0x86da
    8384:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f
    8388:	0c 59       	add	r9,	r12	;

0000838a <.Loc.92.1>:
{
      return
            bits[ (int) (x & 0x0000000FUL)       ] +
            bits[ (int)((x & 0x000000F0UL) >> 4) ] +
            bits[ (int)((x & 0x00000F00UL) >> 8) ] +
            bits[ (int)((x & 0x0000F000UL) >> 12)] +
    838a:	6c 4c       	mov.b	@r12,	r12	;
    838c:	0a 5c       	add	r12,	r10	;

0000838e <.Loc.94.1>:
            bits[ (int)((x & 0x000F0000UL) >> 16)] +
            bits[ (int)((x & 0x00F00000UL) >> 20)] +
    838e:	0c 48       	mov	r8,	r12	;
    8390:	0d 47       	mov	r7,	r13	;
    8392:	7e 40 14 00 	mov.b	#20,	r14	;#0x0014
    8396:	b0 12 da 86 	call	#34522		;#0x86da
    839a:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f
    839e:	0c 59       	add	r9,	r12	;

000083a0 <.Loc.93.1>:
      return
            bits[ (int) (x & 0x0000000FUL)       ] +
            bits[ (int)((x & 0x000000F0UL) >> 4) ] +
            bits[ (int)((x & 0x00000F00UL) >> 8) ] +
            bits[ (int)((x & 0x0000F000UL) >> 12)] +
            bits[ (int)((x & 0x000F0000UL) >> 16)] +
    83a0:	6c 4c       	mov.b	@r12,	r12	;
    83a2:	0a 5c       	add	r12,	r10	;

000083a4 <.Loc.95.1>:
            bits[ (int)((x & 0x00F00000UL) >> 20)] +
            bits[ (int)((x & 0x0F000000UL) >> 24)] +
    83a4:	0c 48       	mov	r8,	r12	;
    83a6:	0d 47       	mov	r7,	r13	;
    83a8:	7e 40 18 00 	mov.b	#24,	r14	;#0x0018
    83ac:	b0 12 da 86 	call	#34522		;#0x86da
    83b0:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f
    83b4:	0c 59       	add	r9,	r12	;

000083b6 <.Loc.94.1>:
            bits[ (int) (x & 0x0000000FUL)       ] +
            bits[ (int)((x & 0x000000F0UL) >> 4) ] +
            bits[ (int)((x & 0x00000F00UL) >> 8) ] +
            bits[ (int)((x & 0x0000F000UL) >> 12)] +
            bits[ (int)((x & 0x000F0000UL) >> 16)] +
            bits[ (int)((x & 0x00F00000UL) >> 20)] +
    83b6:	6c 4c       	mov.b	@r12,	r12	;
    83b8:	0a 5c       	add	r12,	r10	;

000083ba <.Loc.96.1>:
            bits[ (int)((x & 0x0F000000UL) >> 24)] +
            bits[ (int)((x & 0xF0000000UL) >> 28)];
    83ba:	0c 48       	mov	r8,	r12	;
    83bc:	0d 47       	mov	r7,	r13	;
    83be:	7e 40 1c 00 	mov.b	#28,	r14	;#0x001c
    83c2:	b0 12 da 86 	call	#34522		;#0x86da
    83c6:	0c 59       	add	r9,	r12	;

000083c8 <.Loc.97.1>:
}
    83c8:	6c 4c       	mov.b	@r12,	r12	;
    83ca:	0c 5a       	add	r10,	r12	;
    83cc:	30 40 22 86 	br	#0x8622		;

000083d0 <BW_btbl_bitcount>:
int BW_btbl_bitcount(uint32_t x)
{
    83d0:	0a 12       	push	r10		;

000083d2 <.LCFI8>:
    83d2:	09 12       	push	r9		;

000083d4 <.LCFI9>:
    83d4:	08 12       	push	r8		;

000083d6 <.LCFI10>:
    83d6:	08 4d       	mov	r13,	r8	;

000083d8 <.Loc.108.1>:
            long y;
      } U;

      U.y = x;

      return bits[ U.ch[0] ] + bits[ U.ch[1] ] +
    83d8:	3a 40 00 80 	mov	#32768,	r10	;#0x8000
    83dc:	4d 4c       	mov.b	r12,	r13	;
    83de:	0d 5a       	add	r10,	r13	;
    83e0:	69 4d       	mov.b	@r13,	r9	;
    83e2:	b0 12 48 86 	call	#34376		;#0x8648

000083e6 <.LVL38>:
    83e6:	3c f0 ff 00 	and	#255,	r12	;#0x00ff
    83ea:	0c 5a       	add	r10,	r12	;
    83ec:	6c 4c       	mov.b	@r12,	r12	;
    83ee:	09 5c       	add	r12,	r9	;

000083f0 <.Loc.109.1>:
             bits[ U.ch[3] ] + bits[ U.ch[2] ];
    83f0:	0c 48       	mov	r8,	r12	;
    83f2:	b0 12 48 86 	call	#34376		;#0x8648
    83f6:	3c f0 ff 00 	and	#255,	r12	;#0x00ff
    83fa:	0c 5a       	add	r10,	r12	;

000083fc <.Loc.108.1>:
            long y;
      } U;

      U.y = x;

      return bits[ U.ch[0] ] + bits[ U.ch[1] ] +
    83fc:	6c 4c       	mov.b	@r12,	r12	;
    83fe:	0c 59       	add	r9,	r12	;

00008400 <.Loc.109.1>:
             bits[ U.ch[3] ] + bits[ U.ch[2] ];
    8400:	38 f0 ff 00 	and	#255,	r8	;#0x00ff
    8404:	0a 58       	add	r8,	r10	;

00008406 <.Loc.110.1>:
}
    8406:	6a 4a       	mov.b	@r10,	r10	;
    8408:	0c 5a       	add	r10,	r12	;
    840a:	30 40 24 86 	br	#0x8624		;

0000840e <AR_btbl_bitcount>:
int AR_btbl_bitcount(uint32_t x)
{
    840e:	0a 12       	push	r10		;

00008410 <.LCFI11>:
    8410:	09 12       	push	r9		;

00008412 <.LCFI12>:
    8412:	08 12       	push	r8		;

00008414 <.LCFI13>:
    8414:	08 4d       	mov	r13,	r8	;

00008416 <.Loc.116.1>:
      unsigned char * Ptr = (unsigned char *) &x ;
      int Accu ;

      Accu  = bits[ *Ptr++ ];
    8416:	3a 40 00 80 	mov	#32768,	r10	;#0x8000
    841a:	4d 4c       	mov.b	r12,	r13	;
    841c:	0d 5a       	add	r10,	r13	;
    841e:	69 4d       	mov.b	@r13,	r9	;

00008420 <.LVL42>:
      Accu += bits[ *Ptr++ ];
    8420:	b0 12 48 86 	call	#34376		;#0x8648

00008424 <.LVL43>:
    8424:	3c f0 ff 00 	and	#255,	r12	;#0x00ff
    8428:	0c 5a       	add	r10,	r12	;
    842a:	6c 4c       	mov.b	@r12,	r12	;
    842c:	09 5c       	add	r12,	r9	;

0000842e <.Loc.118.1>:
      Accu += bits[ *Ptr++ ];
    842e:	4c 48       	mov.b	r8,	r12	;
    8430:	0c 5a       	add	r10,	r12	;
    8432:	6c 4c       	mov.b	@r12,	r12	;
    8434:	09 5c       	add	r12,	r9	;

00008436 <.LVL45>:
      Accu += bits[ *Ptr ];
    8436:	0c 48       	mov	r8,	r12	;
    8438:	b0 12 48 86 	call	#34376		;#0x8648
    843c:	3c f0 ff 00 	and	#255,	r12	;#0x00ff
    8440:	0a 5c       	add	r12,	r10	;

00008442 <.Loc.121.1>:
      return Accu;
}
    8442:	6c 4a       	mov.b	@r10,	r12	;
    8444:	0c 59       	add	r9,	r12	;
    8446:	30 40 24 86 	br	#0x8624		;

0000844a <ntbl_bitcnt>:
int ntbl_bitcnt(uint32_t x)
{
    844a:	0a 12       	push	r10		;

0000844c <.LCFI14>:
      int cnt = bits[(int)(x & 0x0000000FL)];
    844c:	0e 4c       	mov	r12,	r14	;
    844e:	7e f0 0f 00 	and.b	#15,	r14	;#0x000f
    8452:	5a 4e 00 80 	mov.b	-32768(r14),r10	;0xffff8000

00008456 <.LVL48>:

      if (0L != (x >>= 4))
    8456:	b0 12 b8 86 	call	#34488		;#0x86b8

0000845a <.LVL49>:
    845a:	0e 4c       	mov	r12,	r14	;
    845c:	0e dd       	bis	r13,	r14	;
    845e:	0e 93       	cmp	#0,	r14	;r3 As==00
    8460:	03 20       	jnz	$+8      	;abs 0x8468

00008462 <.L16>:
            cnt += ntbl_bitcnt(x);

      return cnt;
}
    8462:	0c 4a       	mov	r10,	r12	;
    8464:	3a 41       	pop	r10		;

00008466 <.LVL51>:
    8466:	30 41       	ret			

00008468 <.L19>:
int ntbl_bitcnt(uint32_t x)
{
      int cnt = bits[(int)(x & 0x0000000FL)];

      if (0L != (x >>= 4))
            cnt += ntbl_bitcnt(x);
    8468:	b0 12 4a 84 	call	#33866		;#0x844a

0000846c <.LVL53>:
    846c:	0a 5c       	add	r12,	r10	;

0000846e <.Loc.129.1>:

      return cnt;
    846e:	30 40 62 84 	br	#0x8462		;

00008472 <bit_shifter>:
}

int bit_shifter(uint32_t x)
{
    8472:	0e 4c       	mov	r12,	r14	;
    8474:	0f 4d       	mov	r13,	r15	;

00008476 <.LVL56>:
  int i, n;
  for (i = n = 0; x && (i < (sizeof(uint32_t) * CHAR_BIT)); ++i, x >>= 1)
    8476:	0c dd       	bis	r13,	r12	;
    8478:	0c 93       	cmp	#0,	r12	;r3 As==00
    847a:	11 24       	jz	$+36     	;abs 0x849e
    847c:	7b 40 20 00 	mov.b	#32,	r11	;#0x0020
    8480:	4c 43       	clr.b	r12		;

00008482 <.L24>:
    n += (int)(x & 1L);
    8482:	0d 4e       	mov	r14,	r13	;
    8484:	5d f3       	and.b	#1,	r13	;r3 As==01
    8486:	0c 5d       	add	r13,	r12	;

00008488 <.Loc.135.1>:
}

int bit_shifter(uint32_t x)
{
  int i, n;
  for (i = n = 0; x && (i < (sizeof(uint32_t) * CHAR_BIT)); ++i, x >>= 1)
    8488:	12 c3       	clrc			
    848a:	0f 10       	rrc	r15		;
    848c:	0e 10       	rrc	r14		;
    848e:	0d 4e       	mov	r14,	r13	;
    8490:	0d df       	bis	r15,	r13	;
    8492:	0d 93       	cmp	#0,	r13	;r3 As==00
    8494:	03 24       	jz	$+8      	;abs 0x849c
    8496:	3b 53       	add	#-1,	r11	;r3 As==11

00008498 <.Loc.135.1>:
    8498:	0b 93       	cmp	#0,	r11	;r3 As==00
    849a:	f3 23       	jnz	$-24     	;abs 0x8482

0000849c <.L20>:
    n += (int)(x & 1L);
  return n;
}
    849c:	30 41       	ret			

0000849e <.L25>:
}

int bit_shifter(uint32_t x)
{
  int i, n;
  for (i = n = 0; x && (i < (sizeof(uint32_t) * CHAR_BIT)); ++i, x >>= 1)
    849e:	4c 43       	clr.b	r12		;

000084a0 <.Loc.137.1>:
    n += (int)(x & 1L);
  return n;
    84a0:	30 40 9c 84 	br	#0x849c		;

000084a4 <main>:
}


int main()
{
    84a4:	0a 12       	push	r10		;

000084a6 <.LCFI15>:
    84a6:	09 12       	push	r9		;

000084a8 <.LCFI16>:
    84a8:	08 12       	push	r8		;

000084aa <.LCFI17>:
    84aa:	07 12       	push	r7		;

000084ac <.LCFI18>:
    84ac:	06 12       	push	r6		;

000084ae <.LCFI19>:
    84ae:	05 12       	push	r5		;

000084b0 <.LCFI20>:
    84b0:	04 12       	push	r4		;

000084b2 <.LCFI21>:
    84b2:	31 80 0e 00 	sub	#14,	r1	;#0x000e

000084b6 <.LBB4>:
int bit_shifter(uint32_t x);

void init()
{

     WDTCTL = WDTPW | WDTHOLD; // Stop WDT
    84b6:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    84ba:	20 01 

000084bc <.LBE4>:
    /* Each statement executes a different bitcount routine, with a different seed value, a 100 times*/
    while(1){


    //Initialize the variables upon every loop
    n_0=0;
    84bc:	45 43       	clr.b	r5		;
    84be:	30 40 0e 85 	br	#0x850e		;

000084c2 <.L54>:
    //P1OUT ^= 0x09;
	LED_CTRL ^= 0x0F;

    for (func = 0; func < 7; func++) {

        seed = (uint32_t)SEED;
    84c2:	68 42       	mov.b	#4,	r8	;r2 As==10
    84c4:	49 43       	clr.b	r9		;

000084c6 <.Loc.174.1>:
        if(func == 0){
            for(iter = 0; iter < ITER; ++iter, seed += 13){

                n_0 += bit_count(seed);
    84c6:	34 40 5a 82 	mov	#33370,	r4	;#0x825a

000084ca <.L47>:
    84ca:	0c 48       	mov	r8,	r12	;
    84cc:	0d 49       	mov	r9,	r13	;
    84ce:	84 12       	call	r4		;
    84d0:	81 5c 0c 00 	add	r12,	12(r1)	; 0x000c

000084d4 <.Loc.172.1>:

    for (func = 0; func < 7; func++) {

        seed = (uint32_t)SEED;
        if(func == 0){
            for(iter = 0; iter < ITER; ++iter, seed += 13){
    84d4:	38 50 0d 00 	add	#13,	r8	;#0x000d

000084d8 <.LVL67>:
    84d8:	09 63       	adc	r9		;

000084da <.LVL68>:
    84da:	38 90 18 05 	cmp	#1304,	r8	;#0x0518
    84de:	f5 23       	jnz	$-20     	;abs 0x84ca
    84e0:	09 93       	cmp	#0,	r9	;r3 As==00
    84e2:	f3 23       	jnz	$-24     	;abs 0x84ca

000084e4 <.L45>:
    84e4:	1a 53       	inc	r10		;
    84e6:	17 53       	inc	r7		;

000084e8 <.L28>:
	LED_CTRL ^= 0x0F;

    for (func = 0; func < 7; func++) {

        seed = (uint32_t)SEED;
        if(func == 0){
    84e8:	0a 93       	cmp	#0,	r10	;r3 As==00
    84ea:	eb 27       	jz	$-40     	;abs 0x84c2

000084ec <.Loc.177.1>:
            for(iter = 0; iter < ITER; ++iter, seed += 13){

                n_0 += bit_count(seed);
            }
        }
        else if(func == 1){
    84ec:	1a 93       	cmp	#1,	r10	;r3 As==01
    84ee:	26 24       	jz	$+78     	;abs 0x853c

000084f0 <.Loc.183.1>:
            for(iter = 0; iter < ITER; ++iter, seed += 13){

                n_1 += bitcount(seed);
            }
        }
        else if(func == 2){
    84f0:	2a 93       	cmp	#2,	r10	;r3 As==10
    84f2:	37 24       	jz	$+112    	;abs 0x8562

000084f4 <.Loc.189.1>:
            for(iter = 0; iter < ITER; ++iter, seed += 13){

                n_2 += ntbl_bitcnt(seed);
            }
        }
        else if(func == 3){
    84f4:	3a 90 03 00 	cmp	#3,	r10	;
    84f8:	47 24       	jz	$+144    	;abs 0x8588

000084fa <.Loc.195.1>:
            for(iter = 0; iter < ITER; ++iter, seed += 13){

                n_3 += ntbl_bitcount(seed);
            }
        }
        else if(func == 4){
    84fa:	2a 92       	cmp	#4,	r10	;r2 As==10
    84fc:	58 24       	jz	$+178    	;abs 0x85ae

000084fe <.Loc.201.1>:
            for(iter = 0; iter < ITER; ++iter, seed += 13){

                n_4 += BW_btbl_bitcount(seed);
            }
        }
        else if(func == 5){
    84fe:	3a 90 05 00 	cmp	#5,	r10	;
    8502:	67 24       	jz	$+208    	;abs 0x85d2

00008504 <.Loc.207.1>:
            for(iter = 0; iter < ITER; ++iter, seed += 13){

                n_5 += AR_btbl_bitcount(seed);
            }
        }
        else if(func == 6){
    8504:	3a 90 06 00 	cmp	#6,	r10	;
    8508:	76 24       	jz	$+238    	;abs 0x85f6

0000850a <.LVL71>:

    //Toggle LED upon every execution
    //P1OUT ^= 0x09;
	LED_CTRL ^= 0x0F;

    for (func = 0; func < 7; func++) {
    850a:	06 97       	cmp	r7,	r6	;
    850c:	eb 2f       	jc	$-40     	;abs 0x84e4

0000850e <.L46>:
    /* Each statement executes a different bitcount routine, with a different seed value, a 100 times*/
    while(1){


    //Initialize the variables upon every loop
    n_0=0;
    850e:	81 45 0c 00 	mov	r5,	12(r1)	; 0x000c

00008512 <.Loc.157.1>:
    n_1=0;
    8512:	81 45 0a 00 	mov	r5,	10(r1)	; 0x000a

00008516 <.Loc.158.1>:
    n_2=0;
    8516:	81 45 08 00 	mov	r5,	8(r1)	;

0000851a <.Loc.159.1>:
    n_3=0;
    851a:	81 45 06 00 	mov	r5,	6(r1)	;

0000851e <.Loc.160.1>:
    n_4=0;
    851e:	81 45 04 00 	mov	r5,	4(r1)	;

00008522 <.Loc.161.1>:
    n_5=0;
    8522:	81 45 02 00 	mov	r5,	2(r1)	;

00008526 <.Loc.162.1>:
    n_6=0;
    8526:	81 45 00 00 	mov	r5,	0(r1)	;

0000852a <.Loc.166.1>:

    //Toggle LED upon every execution
    //P1OUT ^= 0x09;
	LED_CTRL ^= 0x0F;
    852a:	f2 e0 0f 00 	xor.b	#15,	&0x0090	;#0x000f
    852e:	90 00 
    8530:	57 43       	mov.b	#1,	r7	;r3 As==01
    8532:	4a 43       	clr.b	r10		;

00008534 <.Loc.168.1>:

    for (func = 0; func < 7; func++) {
    8534:	76 40 06 00 	mov.b	#6,	r6	;
    8538:	30 40 e8 84 	br	#0x84e8		;

0000853c <.L55>:

        seed = (uint32_t)SEED;
    853c:	68 42       	mov.b	#4,	r8	;r2 As==10
    853e:	49 43       	clr.b	r9		;

00008540 <.Loc.180.1>:
            }
        }
        else if(func == 1){
            for(iter = 0; iter < ITER; ++iter, seed += 13){

                n_1 += bitcount(seed);
    8540:	34 40 86 82 	mov	#33414,	r4	;#0x8286

00008544 <.L48>:
    8544:	0c 48       	mov	r8,	r12	;
    8546:	0d 49       	mov	r9,	r13	;
    8548:	84 12       	call	r4		;
    854a:	81 5c 0a 00 	add	r12,	10(r1)	; 0x000a

0000854e <.Loc.178.1>:

                n_0 += bit_count(seed);
            }
        }
        else if(func == 1){
            for(iter = 0; iter < ITER; ++iter, seed += 13){
    854e:	38 50 0d 00 	add	#13,	r8	;#0x000d

00008552 <.LVL77>:
    8552:	09 63       	adc	r9		;

00008554 <.LVL78>:
    8554:	38 90 18 05 	cmp	#1304,	r8	;#0x0518
    8558:	f5 23       	jnz	$-20     	;abs 0x8544
    855a:	09 93       	cmp	#0,	r9	;r3 As==00
    855c:	f3 23       	jnz	$-24     	;abs 0x8544
    855e:	30 40 e4 84 	br	#0x84e4		;

00008562 <.L56>:
    //P1OUT ^= 0x09;
	LED_CTRL ^= 0x0F;

    for (func = 0; func < 7; func++) {

        seed = (uint32_t)SEED;
    8562:	68 42       	mov.b	#4,	r8	;r2 As==10
    8564:	49 43       	clr.b	r9		;

00008566 <.Loc.186.1>:
            }
        }
        else if(func == 2){
            for(iter = 0; iter < ITER; ++iter, seed += 13){

                n_2 += ntbl_bitcnt(seed);
    8566:	34 40 4a 84 	mov	#33866,	r4	;#0x844a

0000856a <.L49>:
    856a:	0c 48       	mov	r8,	r12	;
    856c:	0d 49       	mov	r9,	r13	;
    856e:	84 12       	call	r4		;
    8570:	81 5c 08 00 	add	r12,	8(r1)	;

00008574 <.Loc.184.1>:

                n_1 += bitcount(seed);
            }
        }
        else if(func == 2){
            for(iter = 0; iter < ITER; ++iter, seed += 13){
    8574:	38 50 0d 00 	add	#13,	r8	;#0x000d

00008578 <.LVL82>:
    8578:	09 63       	adc	r9		;

0000857a <.LVL83>:
    857a:	38 90 18 05 	cmp	#1304,	r8	;#0x0518
    857e:	f5 23       	jnz	$-20     	;abs 0x856a
    8580:	09 93       	cmp	#0,	r9	;r3 As==00
    8582:	f3 23       	jnz	$-24     	;abs 0x856a
    8584:	30 40 e4 84 	br	#0x84e4		;

00008588 <.L57>:
    //P1OUT ^= 0x09;
	LED_CTRL ^= 0x0F;

    for (func = 0; func < 7; func++) {

        seed = (uint32_t)SEED;
    8588:	68 42       	mov.b	#4,	r8	;r2 As==10
    858a:	49 43       	clr.b	r9		;

0000858c <.Loc.192.1>:
            }
        }
        else if(func == 3){
            for(iter = 0; iter < ITER; ++iter, seed += 13){

                n_3 += ntbl_bitcount(seed);
    858c:	34 40 2c 83 	mov	#33580,	r4	;#0x832c

00008590 <.L50>:
    8590:	0c 48       	mov	r8,	r12	;
    8592:	0d 49       	mov	r9,	r13	;
    8594:	84 12       	call	r4		;
    8596:	81 5c 06 00 	add	r12,	6(r1)	;

0000859a <.Loc.190.1>:

                n_2 += ntbl_bitcnt(seed);
            }
        }
        else if(func == 3){
            for(iter = 0; iter < ITER; ++iter, seed += 13){
    859a:	38 50 0d 00 	add	#13,	r8	;#0x000d

0000859e <.LVL87>:
    859e:	09 63       	adc	r9		;

000085a0 <.LVL88>:
    85a0:	38 90 18 05 	cmp	#1304,	r8	;#0x0518
    85a4:	f5 23       	jnz	$-20     	;abs 0x8590
    85a6:	09 93       	cmp	#0,	r9	;r3 As==00
    85a8:	f3 23       	jnz	$-24     	;abs 0x8590
    85aa:	30 40 e4 84 	br	#0x84e4		;

000085ae <.L58>:
    //P1OUT ^= 0x09;
	LED_CTRL ^= 0x0F;

    for (func = 0; func < 7; func++) {

        seed = (uint32_t)SEED;
    85ae:	68 42       	mov.b	#4,	r8	;r2 As==10
    85b0:	49 43       	clr.b	r9		;

000085b2 <.L51>:
            }
        }
        else if(func == 4){
            for(iter = 0; iter < ITER; ++iter, seed += 13){

                n_4 += BW_btbl_bitcount(seed);
    85b2:	0c 48       	mov	r8,	r12	;
    85b4:	0d 49       	mov	r9,	r13	;
    85b6:	b0 12 d0 83 	call	#33744		;#0x83d0
    85ba:	81 5c 04 00 	add	r12,	4(r1)	;

000085be <.Loc.196.1>:

                n_3 += ntbl_bitcount(seed);
            }
        }
        else if(func == 4){
            for(iter = 0; iter < ITER; ++iter, seed += 13){
    85be:	38 50 0d 00 	add	#13,	r8	;#0x000d

000085c2 <.LVL92>:
    85c2:	09 63       	adc	r9		;

000085c4 <.LVL93>:
    85c4:	38 90 18 05 	cmp	#1304,	r8	;#0x0518
    85c8:	f4 23       	jnz	$-22     	;abs 0x85b2
    85ca:	09 93       	cmp	#0,	r9	;r3 As==00
    85cc:	f2 23       	jnz	$-26     	;abs 0x85b2
    85ce:	30 40 e4 84 	br	#0x84e4		;

000085d2 <.L59>:
    //P1OUT ^= 0x09;
	LED_CTRL ^= 0x0F;

    for (func = 0; func < 7; func++) {

        seed = (uint32_t)SEED;
    85d2:	68 42       	mov.b	#4,	r8	;r2 As==10
    85d4:	49 43       	clr.b	r9		;

000085d6 <.L52>:
            }
        }
        else if(func == 5){
            for(iter = 0; iter < ITER; ++iter, seed += 13){

                n_5 += AR_btbl_bitcount(seed);
    85d6:	0c 48       	mov	r8,	r12	;
    85d8:	0d 49       	mov	r9,	r13	;
    85da:	b0 12 0e 84 	call	#33806		;#0x840e
    85de:	81 5c 02 00 	add	r12,	2(r1)	;

000085e2 <.Loc.202.1>:

                n_4 += BW_btbl_bitcount(seed);
            }
        }
        else if(func == 5){
            for(iter = 0; iter < ITER; ++iter, seed += 13){
    85e2:	38 50 0d 00 	add	#13,	r8	;#0x000d

000085e6 <.LVL97>:
    85e6:	09 63       	adc	r9		;

000085e8 <.LVL98>:
    85e8:	38 90 18 05 	cmp	#1304,	r8	;#0x0518
    85ec:	f4 23       	jnz	$-22     	;abs 0x85d6
    85ee:	09 93       	cmp	#0,	r9	;r3 As==00
    85f0:	f2 23       	jnz	$-26     	;abs 0x85d6
    85f2:	30 40 e4 84 	br	#0x84e4		;

000085f6 <.L60>:
    //P1OUT ^= 0x09;
	LED_CTRL ^= 0x0F;

    for (func = 0; func < 7; func++) {

        seed = (uint32_t)SEED;
    85f6:	68 42       	mov.b	#4,	r8	;r2 As==10
    85f8:	49 43       	clr.b	r9		;

000085fa <.Loc.210.1>:
            }
        }
        else if(func == 6){
            for(iter = 0; iter < ITER; ++iter, seed += 13){

                n_6 += bit_shifter(seed);
    85fa:	3a 40 72 84 	mov	#33906,	r10	;#0x8472

000085fe <.L53>:
    85fe:	0c 48       	mov	r8,	r12	;
    8600:	0d 49       	mov	r9,	r13	;
    8602:	8a 12       	call	r10		;
    8604:	81 5c 00 00 	add	r12,	0(r1)	;

00008608 <.Loc.208.1>:

                n_5 += AR_btbl_bitcount(seed);
            }
        }
        else if(func == 6){
            for(iter = 0; iter < ITER; ++iter, seed += 13){
    8608:	38 50 0d 00 	add	#13,	r8	;#0x000d

0000860c <.LVL102>:
    860c:	09 63       	adc	r9		;

0000860e <.LVL103>:
    860e:	38 90 18 05 	cmp	#1304,	r8	;#0x0518
    8612:	f5 23       	jnz	$-20     	;abs 0x85fe
    8614:	09 93       	cmp	#0,	r9	;r3 As==00
    8616:	f3 23       	jnz	$-24     	;abs 0x85fe
    8618:	30 40 0e 85 	br	#0x850e		;

0000861c <__mspabi_func_epilog_7>:
    861c:	34 41       	pop	r4		;

0000861e <__mspabi_func_epilog_6>:
    861e:	35 41       	pop	r5		;

00008620 <__mspabi_func_epilog_5>:
    8620:	36 41       	pop	r6		;

00008622 <__mspabi_func_epilog_4>:
    8622:	37 41       	pop	r7		;

00008624 <__mspabi_func_epilog_3>:
    8624:	38 41       	pop	r8		;

00008626 <__mspabi_func_epilog_2>:
    8626:	39 41       	pop	r9		;

00008628 <__mspabi_func_epilog_1>:
    8628:	3a 41       	pop	r10		;
    862a:	30 41       	ret			

0000862c <__mspabi_srli_15>:
    862c:	12 c3       	clrc			
    862e:	0c 10       	rrc	r12		;

00008630 <__mspabi_srli_14>:
    8630:	12 c3       	clrc			
    8632:	0c 10       	rrc	r12		;

00008634 <__mspabi_srli_13>:
    8634:	12 c3       	clrc			
    8636:	0c 10       	rrc	r12		;

00008638 <__mspabi_srli_12>:
    8638:	12 c3       	clrc			
    863a:	0c 10       	rrc	r12		;

0000863c <__mspabi_srli_11>:
    863c:	12 c3       	clrc			
    863e:	0c 10       	rrc	r12		;

00008640 <__mspabi_srli_10>:
    8640:	12 c3       	clrc			
    8642:	0c 10       	rrc	r12		;

00008644 <__mspabi_srli_9>:
    8644:	12 c3       	clrc			
    8646:	0c 10       	rrc	r12		;

00008648 <__mspabi_srli_8>:
    8648:	12 c3       	clrc			
    864a:	0c 10       	rrc	r12		;

0000864c <__mspabi_srli_7>:
    864c:	12 c3       	clrc			
    864e:	0c 10       	rrc	r12		;

00008650 <__mspabi_srli_6>:
    8650:	12 c3       	clrc			
    8652:	0c 10       	rrc	r12		;

00008654 <__mspabi_srli_5>:
    8654:	12 c3       	clrc			
    8656:	0c 10       	rrc	r12		;

00008658 <__mspabi_srli_4>:
    8658:	12 c3       	clrc			
    865a:	0c 10       	rrc	r12		;

0000865c <__mspabi_srli_3>:
    865c:	12 c3       	clrc			
    865e:	0c 10       	rrc	r12		;

00008660 <__mspabi_srli_2>:
    8660:	12 c3       	clrc			
    8662:	0c 10       	rrc	r12		;

00008664 <__mspabi_srli_1>:
    8664:	12 c3       	clrc			
    8666:	0c 10       	rrc	r12		;
    8668:	30 41       	ret			

0000866a <.L11>:
    866a:	3d 53       	add	#-1,	r13	;r3 As==11
    866c:	12 c3       	clrc			
    866e:	0c 10       	rrc	r12		;

00008670 <__mspabi_srli>:
    8670:	0d 93       	cmp	#0,	r13	;r3 As==00
    8672:	fb 23       	jnz	$-8      	;abs 0x866a
    8674:	30 41       	ret			

00008676 <__mspabi_srll_15>:
    8676:	12 c3       	clrc			
    8678:	0d 10       	rrc	r13		;
    867a:	0c 10       	rrc	r12		;

0000867c <__mspabi_srll_14>:
    867c:	12 c3       	clrc			
    867e:	0d 10       	rrc	r13		;
    8680:	0c 10       	rrc	r12		;

00008682 <__mspabi_srll_13>:
    8682:	12 c3       	clrc			
    8684:	0d 10       	rrc	r13		;
    8686:	0c 10       	rrc	r12		;

00008688 <__mspabi_srll_12>:
    8688:	12 c3       	clrc			
    868a:	0d 10       	rrc	r13		;
    868c:	0c 10       	rrc	r12		;

0000868e <__mspabi_srll_11>:
    868e:	12 c3       	clrc			
    8690:	0d 10       	rrc	r13		;
    8692:	0c 10       	rrc	r12		;

00008694 <__mspabi_srll_10>:
    8694:	12 c3       	clrc			
    8696:	0d 10       	rrc	r13		;
    8698:	0c 10       	rrc	r12		;

0000869a <__mspabi_srll_9>:
    869a:	12 c3       	clrc			
    869c:	0d 10       	rrc	r13		;
    869e:	0c 10       	rrc	r12		;

000086a0 <__mspabi_srll_8>:
    86a0:	12 c3       	clrc			
    86a2:	0d 10       	rrc	r13		;
    86a4:	0c 10       	rrc	r12		;

000086a6 <__mspabi_srll_7>:
    86a6:	12 c3       	clrc			
    86a8:	0d 10       	rrc	r13		;
    86aa:	0c 10       	rrc	r12		;

000086ac <__mspabi_srll_6>:
    86ac:	12 c3       	clrc			
    86ae:	0d 10       	rrc	r13		;
    86b0:	0c 10       	rrc	r12		;

000086b2 <__mspabi_srll_5>:
    86b2:	12 c3       	clrc			
    86b4:	0d 10       	rrc	r13		;
    86b6:	0c 10       	rrc	r12		;

000086b8 <__mspabi_srll_4>:
    86b8:	12 c3       	clrc			
    86ba:	0d 10       	rrc	r13		;
    86bc:	0c 10       	rrc	r12		;

000086be <__mspabi_srll_3>:
    86be:	12 c3       	clrc			
    86c0:	0d 10       	rrc	r13		;
    86c2:	0c 10       	rrc	r12		;

000086c4 <__mspabi_srll_2>:
    86c4:	12 c3       	clrc			
    86c6:	0d 10       	rrc	r13		;
    86c8:	0c 10       	rrc	r12		;

000086ca <__mspabi_srll_1>:
    86ca:	12 c3       	clrc			
    86cc:	0d 10       	rrc	r13		;
    86ce:	0c 10       	rrc	r12		;
    86d0:	30 41       	ret			

000086d2 <.L12>:
    86d2:	3e 53       	add	#-1,	r14	;r3 As==11
    86d4:	12 c3       	clrc			
    86d6:	0d 10       	rrc	r13		;
    86d8:	0c 10       	rrc	r12		;

000086da <__mspabi_srll>:
    86da:	0e 93       	cmp	#0,	r14	;r3 As==00
    86dc:	fa 23       	jnz	$-10     	;abs 0x86d2
    86de:	30 41       	ret			

000086e0 <memmove>:
    86e0:	0d 9c       	cmp	r12,	r13	;
    86e2:	0a 28       	jnc	$+22     	;abs 0x86f8

000086e4 <.L5>:
    86e4:	0f 4c       	mov	r12,	r15	;
    86e6:	0e 5c       	add	r12,	r14	;

000086e8 <.L3>:
    86e8:	0e 9f       	cmp	r15,	r14	;
    86ea:	0d 24       	jz	$+28     	;abs 0x8706

000086ec <.LVL3>:
    86ec:	ef 4d 00 00 	mov.b	@r13,	0(r15)	;
    86f0:	1f 53       	inc	r15		;

000086f2 <.LVL4>:
    86f2:	1d 53       	inc	r13		;
    86f4:	30 40 e8 86 	br	#0x86e8		;

000086f8 <.L2>:
    86f8:	0f 4d       	mov	r13,	r15	;
    86fa:	0f 5e       	add	r14,	r15	;
    86fc:	0c 9f       	cmp	r15,	r12	;
    86fe:	f2 2f       	jc	$-26     	;abs 0x86e4

00008700 <.L4>:
    8700:	3e 53       	add	#-1,	r14	;r3 As==11

00008702 <.LVL7>:
    8702:	3e 93       	cmp	#-1,	r14	;r3 As==11
    8704:	01 20       	jnz	$+4      	;abs 0x8708

00008706 <.L10>:
    8706:	30 41       	ret			

00008708 <.L6>:
    8708:	0b 4c       	mov	r12,	r11	;
    870a:	0b 5e       	add	r14,	r11	;
    870c:	0f 4d       	mov	r13,	r15	;
    870e:	0f 5e       	add	r14,	r15	;
    8710:	eb 4f 00 00 	mov.b	@r15,	0(r11)	;
    8714:	30 40 00 87 	br	#0x8700		;

00008718 <memset>:
    8718:	0f 4c       	mov	r12,	r15	;
    871a:	0e 5c       	add	r12,	r14	;

0000871c <.L2>:
    871c:	0f 9e       	cmp	r14,	r15	;
    871e:	01 20       	jnz	$+4      	;abs 0x8722

00008720 <.Loc.104.1>:
    8720:	30 41       	ret			

00008722 <.L3>:
    8722:	cf 4d 00 00 	mov.b	r13,	0(r15)	;
    8726:	1f 53       	inc	r15		;

00008728 <.LVL4>:
    8728:	30 40 1c 87 	br	#0x871c		;

0000872c <L0>:
    872c:	30 41       	ret			

0000872e <__do_global_ctors_aux>:
    872e:	0a 12       	push	r10		;
    8730:	3a 40 08 81 	mov	#33032,	r10	;#0x8108

00008734 <.L2>:
    8734:	2c 4a       	mov	@r10,	r12	;
    8736:	3c 93       	cmp	#-1,	r12	;r3 As==11
    8738:	02 20       	jnz	$+6      	;abs 0x873e
    873a:	3a 41       	pop	r10		;
    873c:	30 41       	ret			

0000873e <.L3>:
    873e:	8c 12       	call	r12		;
    8740:	3a 50 fe ff 	add	#65534,	r10	;#0xfffe
    8744:	30 40 34 87 	br	#0x8734		;

00008748 <call___do_global_ctors_aux>:
    8748:	b0 12 16 82 	call	#33302		;#0x8216
    874c:	b0 12 2e 87 	call	#34606		;#0x872e

00008750 <L0>:
    8750:	b0 12 4e 81 	call	#33102		;#0x814e

00008754 <.Loc.19.1>:
    8754:	b0 12 40 81 	call	#33088		;#0x8140

00008758 <.Loc.20.1>:
    8758:	30 41       	ret			

0000875a <__msp430_fini>:
    875a:	b0 12 5c 81 	call	#33116		;#0x815c

0000875e <L0>:
    875e:	b0 12 c8 81 	call	#33224		;#0x81c8

00008762 <L0>:
    8762:	30 41       	ret			
