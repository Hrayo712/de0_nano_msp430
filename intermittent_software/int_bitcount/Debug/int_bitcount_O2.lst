
int_bitcount.elf:     file format elf32-msp430

SYMBOL TABLE:
0000ffe8 l    d  __interrupt_vector_5	00000000 __interrupt_vector_5
0000fff0 l    d  __interrupt_vector_9	00000000 __interrupt_vector_9
0000fffe l    d  __reset_vector	00000000 __reset_vector
00008000 l    d  .rodata	00000000 .rodata
0000802c l    d  .text	00000000 .text
00004000 l    d  .data	00000000 .data
00004100 l    d  .bss	00000000 .bss
00004122 l    d  .noinit	00000000 .noinit
00000000 l    d  .MP430.attributes	00000000 .MP430.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_macinfo	00000000 .debug_macinfo
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 qwark.c
00008068 l       .text	00000000 __qwark_retry_1st_setup
0000805c l       .text	00000000 __qwark_restore_2nd_setup
0000807c l       .text	00000000 __qwark_retry_2nd_setup
00008050 l       .text	00000000 __qwark_restore_1st_setup
000080dc l       .text	00000000 __system_restore
0000808c l       .text	00000000 __second_stage_retry
00008094 l       .text	00000000 _retry_second_phase_commit_strt
000080b0 l       .text	00000000 _retry_byte_copy
000080c6 l       .text	00000000 __retry_complete
000080d6 l       .text	00000000 __set_flag_complete
0000810e l       .text	00000000 __erase_stack
0000811e l       .text	00000000 __deletion_stack_complete
00008124 l       .text	00000000 __restore_stack
00008134 l       .text	00000000 __init_restore_stack_complete
0000817c l       .text	00000000 __Second_buffer_restore_stack
0000813c l       .text	00000000 __First_buffer_restore_stack
0000888c l       .text	00000000 __second_buffer_init
00008890 l       .text	00000000 __first_phase_commit
00008914 l       .text	00000000 _chkpt_stack
00008908 l       .text	00000000 _scratchpad_addr_cpy
0000892e l       .text	00000000 __pre_copy_stack
00008930 l       .text	00000000 __copy_stack
00008940 l       .text	00000000 __copy_stack_complete
0000894e l       .text	00000000 __set_flag_2nd
00008952 l       .text	00000000 _second_phase_commit
0000899a l       .text	00000000 _chkpt_finished
00008968 l       .text	00000000 _second_phase_commit_strt
00008984 l       .text	00000000 _byte_copy
000089be l       .text	00000000 __pre_finish_2nd_buffer
000089d8 l       .text	00000000 _finish
00000000 l    df *ABS*	00000000 timerA.c
00000000 l    df *ABS*	00000000 /opt/ti/ccsv8/tools/compiler/msp430-gcc-7.3.1.24_linux64/bin/../lib/gcc/msp430-elf/7.3.1/../../../../msp430-elf/lib/430/crt0.o
0000fffe l       __reset_vector	00000000 __msp430_resetvec_hook
00008214 l       .text	00000000 _msp430_run_array
00008222 l       .text	00000000 _msp430_run_done
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 /opt/ti/ccsv8/tools/compiler/msp430-gcc-7.3.1.24_linux64/bin/../lib/gcc/msp430-elf/7.3.1/430/crtbegin.o
00008024 l     O .rodata	00000000 __CTOR_LIST__
00008028 l     O .rodata	00000000 __DTOR_LIST__
0000801c l     O .rodata	00000000 __EH_FRAME_BEGIN__
00008d18 l     O .text	00000000 __TMC_LIST__
00008224 l     F .text	00000000 deregister_tm_clones
0000823e l     F .text	00000000 register_tm_clones
0000826c l     F .text	00000000 __do_global_dtors_aux
00004100 l     O .bss	00000000 completed.3056
00004102 l     O .bss	00000000 dtor_idx.3058
000082ba l     F .text	00000000 frame_dummy
00004104 l     O .bss	00000000 object.3071
00000000 l    df *ABS*	00000000 /opt/ti/ccsv8/tools/compiler/msp430-gcc-7.3.1.24_linux64/bin/../lib/gcc/msp430-elf/7.3.1/430/crtend.o
00008026 l     O .rodata	00000000 __CTOR_END__
0000801c l     O .rodata	00000000 __FRAME_END__
00008ce2 l     F .text	00000000 __do_global_ctors_aux
00000000 l    df *ABS*	00000000 crt_bss.o
00000000 l    df *ABS*	00000000 crt_movedata.o
00000000 l    df *ABS*	00000000 crt_main.o
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 lib2divHI.o
00000000 l    df *ABS*	00000000 srli.o
00000000 l    df *ABS*	00000000 lib_a-memmove.o
00000000 l    df *ABS*	00000000 lib_a-memset.o
00000000 l    df *ABS*	00000000 /opt/ti/ccsv8/tools/compiler/msp430-gcc-7.3.1.24_linux64/bin/../lib/gcc/msp430-elf/7.3.1/../../../../msp430-elf/lib/430/crtn.o
00000000 l    df *ABS*	00000000 lib2hw_mul_16.o
00000130 l       *ABS*	00000000 MPY_OP1
00000132 l       *ABS*	00000000 MPY_OP1_S
00000134 l       *ABS*	00000000 MAC_OP1
00000138 l       *ABS*	00000000 MPY_OP2
00000138 l       *ABS*	00000000 MAC_OP2
0000013a l       *ABS*	00000000 RESULT_LO
0000013c l       *ABS*	00000000 RESULT_HI
00000000 l    df *ABS*	00000000 
0000802c l       .text	00000000 _start
00008bfa g       .text	00000000 .hidden __mspabi_srli_9
00008c4a g       .text	00000000 .hidden __mspabi_srll_10
00008bf6 g       .text	00000000 .hidden __mspabi_srli_10
000083d4 g     F .text	000000a4 ntbl_bitcount
00008be2 g       .text	00000000 .hidden __mspabi_srli_15
00008c96 g     F .text	00000038 memmove
00008c0e g       .text	00000000 .hidden __mspabi_srli_4
00008b14 g     F .text	00000040 .hidden udivmodhi4
00008c02 g       .text	00000000 .hidden __mspabi_srli_7
00008c5c g       .text	00000000 .hidden __mspabi_srll_7
00008c74 g       .text	00000000 .hidden __mspabi_srll_3
00008bd4 g       .text	00000000 .hidden __mspabi_func_epilog_6
00008d18 g     O .text	00000000 .hidden __TMC_END__
00008c38 g       .text	00000000 .hidden __mspabi_srll_13
0000802a g     O .rodata	00000000 .hidden __DTOR_END__
00008020 g       .rodata	00000000 __fini_array_end
00008bee g       .text	00000000 .hidden __mspabi_srli_12
0000802c g     F .text	00000004 __crt0_start
000081bc g     F .text	0000000e __crt0_init_bss
00004000 g     O .data	00000100 bits
00000022 g       *ABS*	00000000 __bsssize
00008ba0 g     F .text	00000032 .hidden __mspabi_remi
000081de g     F .text	0000000a __crt0_call_init_then_main
00008bde g       .text	00000000 .hidden __mspabi_func_epilog_1
00008bda g       .text	00000000 .hidden __mspabi_func_epilog_3
00008c68 g       .text	00000000 .hidden __mspabi_srll_5
00008c26 g       .text	00000000 .hidden __mspabi_srli
00004112 g     O .bss	00000002 n_6
00008c44 g       .text	00000000 .hidden __mspabi_srll_11
00008c0a g       .text	00000000 .hidden __mspabi_srli_5
00008478 g     F .text	0000003e BW_btbl_bitcount
00008a22 g     F .text	000000c6 UART_WriteNumber
00000000  w      *UND*	00000000 __deregister_frame_info
00004122 g       .noinit	00000000 end
00000000  w      *UND*	00000000 _ITM_registerTMCloneTable
00008c62 g       .text	00000000 .hidden __mspabi_srll_6
00008204 g     F .text	00000000 _msp430_run_fini_array
00008a0c g     F .text	00000016 UART_WriteChar
00008c1a g       .text	00000000 .hidden __mspabi_srli_1
00008c32 g       .text	00000000 .hidden __mspabi_srll_14
00008332 g     F .text	000000a2 bitcount
00008030 g     F .text	0000018c qwark_restore
00008be6 g       .text	00000000 .hidden __mspabi_srli_14
00000100 g       *ABS*	00000000 __romdatacopysize
00004114 g     O .bss	00000002 n_5
00008534 g     F .text	0000001a init
00008bf2 g       .text	00000000 .hidden __mspabi_srli_11
00004120 g     O .bss	00000002 periodic_val
00000000  w      *UND*	00000000 _ITM_deregisterTMCloneTable
00008020 g       .rodata	00000000 __fini_array_start
00008b54 g     F .text	0000004c .hidden __mspabi_divi
00000000  w      *ABS*	00000000 __rom_highdatacopysize
000084f2 g     F .text	00000042 ntbl_bitcnt
00008cfc g       .text	00000000 __msp430_init
00008cce g     F .text	00000014 memset
0000854e g     F .text	00000328 main
00004116 g     O .bss	00000002 n_0
000089f0 g     F .text	00000010 ta_wait
00008c6e g       .text	00000000 .hidden __mspabi_srll_4
00008020 g       .rodata	00000000 __init_array_end
00008c16 g       .text	00000000 .hidden __mspabi_srli_2
00000000  w      *ABS*	00000000 __high_bsssize
0000830c g     F .text	00000026 bit_count
00000000  w      *ABS*	00000000 __rom_highdatastart
00008a00 g     F .text	0000000c INT_timerA1
00008d18 g       .text	00000000 __msp430_fini_end
00008c3e g       .text	00000000 .hidden __mspabi_srll_12
00008d18 g       *ABS*	00000000 __romdatastart
00008ae8 g     F .text	0000002c UART_WriteString
000081e8 g     F .text	00000000 _msp430_run_init_array
000089de g     F .text	00000012 ta_wait_no_lpm
00008c06 g       .text	00000000 .hidden __mspabi_srli_6
00004118 g     O .bss	00000002 n_1
00008020 g       .rodata	00000000 __preinit_array_end
00008c12 g       .text	00000000 .hidden __mspabi_srli_3
00000000  w      *ABS*	00000000 __high_datastart
00000000  w      *ABS*	00000000 __upper_data_init
00004100 g       .bss	00000000 __bssstart
00008bd6 g       .text	00000000 .hidden __mspabi_func_epilog_5
000082d2 g     F .text	0000003a btbl_bitcnt
00008000 g       .noinit	00000000 __stack
00008876 g     F .text	00000168 INT_Qwark
00008c50 g       .text	00000000 .hidden __mspabi_srll_9
00004100 g       .data	00000000 _edata
00008d0e g       .text	00000000 __msp430_init_end
00008c90 g       .text	00000000 .hidden __mspabi_srll
00000000  w      *ABS*	00000000 __high_bssstart
00008c2c g       .text	00000000 .hidden __mspabi_srll_15
0000411a g     O .bss	00000002 n_4
0000411c g     O .bss	00000002 n_2
00008020 g       .rodata	00000000 __init_array_start
000084b6 g     F .text	0000003c AR_btbl_bitcount
0000411e g     O .bss	00000002 n_3
00008bea g       .text	00000000 .hidden __mspabi_srli_13
00004000 g       .data	00000000 __datastart
00008c56 g       .text	00000000 .hidden __mspabi_srll_8
00008c80 g       .text	00000000 .hidden __mspabi_srll_1
00008020 g       .rodata	00000000 __preinit_array_start
000081ca g     F .text	00000014 __crt0_movedata
00008bdc g       .text	00000000 .hidden __mspabi_func_epilog_2
00000000  w      *UND*	00000000 __register_frame_info
000081f6 g     F .text	00000000 _msp430_run_preinit_array
00008bd2 g       .text	00000000 .hidden __mspabi_func_epilog_7
00008bd8 g       .text	00000000 .hidden __mspabi_func_epilog_4
00008c7a g       .text	00000000 .hidden __mspabi_srll_2
00008d0e g       .text	00000000 __msp430_fini
00008bfe g       .text	00000000 .hidden __mspabi_srli_8



Disassembly of section __interrupt_vector_5:

0000ffe8 <__interrupt_vector_5>:
    ffe8:	76 88       	interrupt service routine at 0x8876

Disassembly of section __interrupt_vector_9:

0000fff0 <__interrupt_vector_9>:
    fff0:	00 8a       	interrupt service routine at 0x8a00

Disassembly of section .text:

0000802c <__crt0_start>:
    802c:	31 40 00 80 	mov	#32768,	r1	;#0x8000

00008030 <qwark_restore>:
	//    RESTORE HANDLING LOGIC																  				   //
	//	  W.C 30 CYCLES																							   //
	//-------------------------------------------------------------------------------------------------------------//

	/* Disable Qwark */
	__asm__ __volatile__ ("mov #0x0000, &0x02A0");				// 4 cycles
    8030:	82 43 a0 02 	mov	#0,	&0x02a0	;r3 As==00

00008034 <.Loc.29.1>:

	__asm__ __volatile__ ("cmp.b #0x02, &0x6074");				// 2 cycles
    8034:	e2 93 74 60 	cmp.b	#2,	&0x6074	;r3 As==10

00008038 <.Loc.30.1>:
	__asm__ __volatile__ ("jz __qwark_retry_1st_setup");		// 2 cycles
    8038:	17 24       	jz	$+48     	;abs 0x8068

0000803a <.Loc.32.1>:

	__asm__ __volatile__ ("cmp.b #0x03, &0x6075");				// 3 cycles
    803a:	f2 90 03 00 	cmp.b	#3,	&0x6075	;
    803e:	75 60 

00008040 <.Loc.33.1>:
	__asm__ __volatile__ ("jz __qwark_restore_2nd_setup");		// 2 cycles
    8040:	0d 24       	jz	$+28     	;abs 0x805c

00008042 <.Loc.34.1>:
	__asm__ __volatile__ ("cmp.b #0x03, &0x6074");				// 3 cycles
    8042:	f2 90 03 00 	cmp.b	#3,	&0x6074	;
    8046:	74 60 

00008048 <.Loc.35.1>:
	__asm__ __volatile__ ("jnz __crt0_init_bss");				// 2 cycles
    8048:	b9 20       	jnz	$+372    	;abs 0x81bc

0000804a <.Loc.37.1>:

	__asm__ __volatile__ ("cmp.b #0x02, &0x6075");				// 2 cycles
    804a:	e2 93 75 60 	cmp.b	#2,	&0x6075	;r3 As==10

0000804e <.Loc.38.1>:
	__asm__ __volatile__ ("jz  __qwark_retry_2nd_setup");		// 2 cycles
    804e:	16 24       	jz	$+46     	;abs 0x807c

00008050 <__qwark_restore_1st_setup>:

	__asm__ __volatile__ ("__qwark_restore_1st_setup:");

	__asm__ __volatile__ ("mov &0X6012,   r12 ");				// 3 cycles
    8050:	1c 42 12 60 	mov	&0x6012,r12	;0x6012

00008054 <.Loc.43.1>:
    __asm__ __volatile__ ("mov #0x6FFE,   r13 ");				// 2 cycles
    8054:	3d 40 fe 6f 	mov	#28670,	r13	;#0x6ffe

00008058 <.Loc.44.1>:
	__asm__ __volatile__ ("br  #__system_restore");				// 2 cycles
    8058:	30 40 dc 80 	br	#0x80dc		;

0000805c <__qwark_restore_2nd_setup>:

	__asm__ __volatile__ ("__qwark_restore_2nd_setup:");

	__asm__ __volatile__ ("mov &0X6042, r12   ");				// 3 cycles
    805c:	1c 42 42 60 	mov	&0x6042,r12	;0x6042

00008060 <.Loc.49.1>:
    __asm__ __volatile__ ("mov #0x6BFE, r13   ");				// 2 cycles
    8060:	3d 40 fe 6b 	mov	#27646,	r13	;#0x6bfe

00008064 <.Loc.50.1>:
	__asm__ __volatile__ ("br  #__system_restore");				// 2 cycles
    8064:	30 40 dc 80 	br	#0x80dc		;

00008068 <__qwark_retry_1st_setup>:

	__asm__ __volatile__ ("__qwark_retry_1st_setup:");

	__asm__ __volatile__ ("mov  #0x6030,   r10 ");				// 2 cycles
    8068:	3a 40 30 60 	mov	#24624,	r10	;#0x6030

0000806c <.Loc.55.1>:
	__asm__ __volatile__ ("mov  &0X6012,   r12 ");				// 3 cycles
    806c:	1c 42 12 60 	mov	&0x6012,r12	;0x6012

00008070 <.Loc.56.1>:
    __asm__ __volatile__ ("mov  #0x6FFE,   r13 ");				// 2 cycles
    8070:	3d 40 fe 6f 	mov	#28670,	r13	;#0x6ffe

00008074 <.Loc.57.1>:
	__asm__ __volatile__ ("mov  &0x602E,   r15 ");				// 3 cycles
    8074:	1f 42 2e 60 	mov	&0x602e,r15	;0x602e

00008078 <.Loc.58.1>:
	__asm__ __volatile__ ("br  #__second_stage_retry");			// 2 cycles
    8078:	30 40 8c 80 	br	#0x808c		;

0000807c <__qwark_retry_2nd_setup>:

	__asm__ __volatile__ ("__qwark_retry_2nd_setup:");

	__asm__ __volatile__ ("mov #0x6060,   r10 ");				// 2 cycles
    807c:	3a 40 60 60 	mov	#24672,	r10	;#0x6060

00008080 <.Loc.63.1>:
	__asm__ __volatile__ ("mov &0X6042,   r12 ");				// 3 cycles
    8080:	1c 42 42 60 	mov	&0x6042,r12	;0x6042

00008084 <.Loc.64.1>:
    __asm__ __volatile__ ("mov #0x6BFE,   r13 ");				// 2 cycles
    8084:	3d 40 fe 6b 	mov	#27646,	r13	;#0x6bfe

00008088 <.Loc.65.1>:
	__asm__ __volatile__ ("mov &0x605E,   r15 ");				// 3 cycles
    8088:	1f 42 5e 60 	mov	&0x605e,r15	;0x605e

0000808c <__second_stage_retry>:
	//-------------------------------------------------------------------------------------------------------------//
	//    RETRY SECOND PHASE OF THE COMMIT PROCESS	: 148 cycles												   //
	//-------------------------------------------------------------------------------------------------------------//
	__asm__ __volatile__ ("__second_stage_retry:");

	__asm__ __volatile__ ("tst r15 ");     		            // 1 cycles
    808c:	0f 93       	cmp	#0,	r15	;r3 As==00

0000808e <.Loc.73.1>:
	__asm__ __volatile__ ("jz  __system_restore");		    // 2 cycles
    808e:	26 24       	jz	$+78     	;abs 0x80dc

00008090 <.Loc.75.1>:

	__asm__ __volatile__ ("mov #0x6000,  r14");			    // 2 cycles
    8090:	3e 40 00 60 	mov	#24576,	r14	;#0x6000

00008094 <_retry_second_phase_commit_strt>:

	__asm__ __volatile__ ("_retry_second_phase_commit_strt:");  // Worst case

	__asm__ __volatile__ ("mov @r10+2,  r9 ");   			// 2 cycles
    8094:	39 4a       	mov	@r10+,	r9	;

00008096 <.Loc.81.1>:

	__asm__ __volatile__ ("mov r9,  r11 ");   			    // 1 cycle
    8096:	0b 49       	mov	r9,	r11	;

00008098 <.Loc.83.1>:

	__asm__ __volatile__ ("and #0x8000,  r11 ");   			// 2 cycles
    8098:	3b f0 00 80 	and	#32768,	r11	;#0x8000

0000809c <.Loc.84.1>:
	__asm__ __volatile__ ("cmp #0x8000,  r11 ");   			// 2 cycles
    809c:	3b 90 00 80 	cmp	#32768,	r11	;#0x8000

000080a0 <.Loc.85.1>:
	__asm__ __volatile__ ("jeq _retry_byte_copy ");   		// 2 cycles
    80a0:	07 24       	jz	$+16     	;abs 0x80b0

000080a2 <.Loc.87.1>:

	__asm__ __volatile__ ("mov @r14+2, @r9 ");    			// 5 cycles
    80a2:	b9 4e 00 00 	mov	@r14+,	0(r9)	;

000080a6 <.Loc.89.1>:

	__asm__ __volatile__ ("dec r15");    					// 1 cycles
    80a6:	1f 83       	dec	r15		;

000080a8 <.Loc.90.1>:
	__asm__ __volatile__ ("tst r15");    					// 1 cycles
    80a8:	0f 93       	cmp	#0,	r15	;r3 As==00

000080aa <.Loc.92.1>:

	__asm__ __volatile__ ("jnz  _retry_second_phase_commit_strt");// 2 cycles
    80aa:	f4 23       	jnz	$-22     	;abs 0x8094

000080ac <.Loc.93.1>:
	__asm__ __volatile__ ("br #__retry_complete");		    // 2 cycle
    80ac:	30 40 c6 80 	br	#0x80c6		;

000080b0 <_retry_byte_copy>:

	__asm__ __volatile__ ("_retry_byte_copy: ");
	__asm__ __volatile__ ("and #0x7FFF,  r9  ");   			// mask the highest bit 2 cycles
    80b0:	39 f0 ff 7f 	and	#32767,	r9	;#0x7fff

000080b4 <.Loc.97.1>:
	__asm__ __volatile__ ("mov r9,      r11  ");   			// 1 cycle
    80b4:	0b 49       	mov	r9,	r11	;

000080b6 <.Loc.98.1>:
	__asm__ __volatile__ ("and #0x01,    r11 ");   			// detect if its a byte write - 2 cycles
    80b6:	1b f3       	and	#1,	r11	;r3 As==01

000080b8 <.Loc.99.1>:
	__asm__ __volatile__ ("bis  r11,     r14 ");   			// detect if its a byte write - 2 cycles
    80b8:	0e db       	bis	r11,	r14	;

000080ba <.Loc.101.1>:

	__asm__ __volatile__ ("mov.b @r14, @r9  ");    			// 5 cycles
    80ba:	e9 4e 00 00 	mov.b	@r14,	0(r9)	;

000080be <.Loc.102.1>:
	__asm__ __volatile__ ("incd r14 ");    					// 1 cycle
    80be:	2e 53       	incd	r14		;

000080c0 <.Loc.104.1>:

	__asm__ __volatile__ ("dec r15");    					// 1 cycles
    80c0:	1f 83       	dec	r15		;

000080c2 <.Loc.105.1>:
	__asm__ __volatile__ ("tst r15");    					// 1 cycles
    80c2:	0f 93       	cmp	#0,	r15	;r3 As==00

000080c4 <.Loc.106.1>:
	__asm__ __volatile__ ("jnz  _retry_second_phase_commit_strt");// 2 cycles
    80c4:	e7 23       	jnz	$-48     	;abs 0x8094

000080c6 <__retry_complete>:

	//-------------------------------------------------------------------------------------------------------------//
	//    END OF THE RETRY-SECOND PHASE	: Atomic Flag Set														   //
	//	  W.C 18 Cycles																							   //
	//-------------------------------------------------------------------------------------------------------------//
	__asm__ __volatile__ ("cmp.b #0x02, &0x6074");		// 4 cycles
    80c6:	e2 93 74 60 	cmp.b	#2,	&0x6074	;r3 As==10

000080ca <.Loc.115.1>:
	__asm__ __volatile__ ("jz __set_flag_complete");	// 2 cycles
    80ca:	05 24       	jz	$+12     	;abs 0x80d6

000080cc <.Loc.117.1>:

	__asm__ __volatile__ ("mov #0x0301, &0x6074 ");		// 5 cycles
    80cc:	b2 40 01 03 	mov	#769,	&0x6074	;#0x0301
    80d0:	74 60 

000080d2 <.Loc.118.1>:
	__asm__ __volatile__ ("br #__system_restore:");		// 2 cycles
    80d2:	30 40 dc 80 	br	#0x80dc		;

000080d6 <__set_flag_complete>:

	__asm__ __volatile__ ("__set_flag_complete:");
	__asm__ __volatile__ ("mov #0x0103, &0x6074 ");		// 5 cycles
    80d6:	b2 40 03 01 	mov	#259,	&0x6074	;#0x0103
    80da:	74 60 

000080dc <__system_restore>:
	//	 12 CYCLES																								   //
	//-------------------------------------------------------------------------------------------------------------//
	__asm__ __volatile__ ("__system_restore:");

	/* Disable The Watchdog */
	__asm__ __volatile__ ("mov #288, r8");		// 2 cycles
    80dc:	38 40 20 01 	mov	#288,	r8	;#0x0120

000080e0 <.Loc.131.1>:
	__asm__ __volatile__ ("mov #23168, 0(r8)");	// 2 cycles
    80e0:	b8 40 80 5a 	mov	#23168,	0(r8)	;#0x5a80
    80e4:	00 00 

000080e6 <.Loc.134.1>:

	/* Enable and Configure the UART */
	__asm__ __volatile__ ("mov.b #130, r8");	// 2 cycles
    80e6:	78 40 82 00 	mov.b	#130,	r8	;#0x0082

000080ea <.Loc.135.1>:
	__asm__ __volatile__ ("mov   #8, 0(r8)");	// 2 cycles
    80ea:	b8 42 00 00 	mov	#8,	0(r8)	;r2 As==11

000080ee <.Loc.137.1>:

	__asm__ __volatile__ ("mov.b #128, r8");	// 2 cycles
    80ee:	78 40 80 00 	mov.b	#128,	r8	;#0x0080

000080f2 <.Loc.138.1>:
	__asm__ __volatile__ ("mov.b   #1, 0(r8)"); // 2 cycles
    80f2:	d8 43 00 00 	mov.b	#1,	0(r8)	;r3 As==01

000080f6 <.Loc.141.1>:

	/* Configure the timer */
	__asm__ __volatile__ ("mov  #370, r8");		    // 2 cycles
    80f6:	38 40 72 01 	mov	#370,	r8	;#0x0172

000080fa <.Loc.142.1>:
	__asm__ __volatile__ ("mov  #10000, 0(r8)");	// 2 cycles
    80fa:	b8 40 10 27 	mov	#10000,	0(r8)	;#0x2710
    80fe:	00 00 

00008100 <.Loc.144.1>:

	__asm__ __volatile__ ("mov  #352, r8");		    // 2 cycles
    8100:	38 40 60 01 	mov	#352,	r8	;#0x0160

00008104 <.Loc.145.1>:
	__asm__ __volatile__ ("mov  #534, 0(r8)");	    // 2 cycles
    8104:	b8 40 16 02 	mov	#534,	0(r8)	;#0x0216
    8108:	00 00 

0000810a <.Loc.159.1>:
	//-------------------------------------------------------------------------------------------------------------//
	//   TESTING ONLY: Wipe out the stack first to verify the restoration works									   //
	//	 N.A.																								       //
	//-------------------------------------------------------------------------------------------------------------//

	__asm__ __volatile__ ("mov #0x7FFE, r14");
    810a:	3e 40 fe 7f 	mov	#32766,	r14	;#0x7ffe

0000810e <__erase_stack>:

	__asm__ __volatile__ ("__erase_stack:");

	__asm__ __volatile__ ("cmp #0x7EFE,r14");
    810e:	3e 90 fe 7e 	cmp	#32510,	r14	;#0x7efe

00008112 <.Loc.164.1>:
	__asm__ __volatile__ ("jz __deletion_stack_complete");
    8112:	05 24       	jz	$+12     	;abs 0x811e

00008114 <.Loc.166.1>:

	__asm__ __volatile__ ("mov #0x00000,@r14");
    8114:	8e 43 00 00 	mov	#0,	0(r14)	;r3 As==00

00008118 <.Loc.167.1>:
	__asm__ __volatile__ ("decd r14");
    8118:	2e 83       	decd	r14		;

0000811a <.Loc.168.1>:
	__asm__ __volatile__ ("br #__erase_stack");
    811a:	30 40 0e 81 	br	#0x810e		;

0000811e <__deletion_stack_complete>:
	//-------------------------------------------------------------------------------------------------------------//
	//   STACK RESTORE 							   							  									   //
	//	 12 cycles per word		384 cycles	per 64B		+ 3 CYCLES OF LOGIC										   //
	//-------------------------------------------------------------------------------------------------------------//

	__asm__ __volatile__ ("mov #0x7FFE, r14");		//2 cycles
    811e:	3e 40 fe 7f 	mov	#32766,	r14	;#0x7ffe

00008122 <.Loc.179.1>:

	__asm__ __volatile__ ("decd r12");				//1 cycle
    8122:	2c 83       	decd	r12		;

00008124 <__restore_stack>:

	__asm__ __volatile__ ("__restore_stack:");

	__asm__ __volatile__ ("cmp r14,r12");	   		// compare and verify if the base has been reached - 1 cycle
    8124:	0c 9e       	cmp	r14,	r12	;

00008126 <.Loc.184.1>:
	__asm__ __volatile__ ("jz __init_restore_stack_complete"); //2 cycles
    8126:	06 24       	jz	$+14     	;abs 0x8134

00008128 <.Loc.186.1>:

	__asm__ __volatile__ ("mov @r13,@r14");					//5 cycles
    8128:	ae 4d 00 00 	mov	@r13,	0(r14)	;

0000812c <.Loc.187.1>:
	__asm__ __volatile__ ("decd r13");						//1 cycle
    812c:	2d 83       	decd	r13		;

0000812e <.Loc.188.1>:
	__asm__ __volatile__ ("decd r14");						//1 cycle
    812e:	2e 83       	decd	r14		;

00008130 <.Loc.189.1>:
	__asm__ __volatile__ ("br #__restore_stack");			//2 cycles
    8130:	30 40 24 81 	br	#0x8124		;

00008134 <__init_restore_stack_complete>:
	//-------------------------------------------------------------------------------------------------------------//
	//   REGISTERS RESTORE: VERIFY WHICH REGISTERS SHOULD BE RESTORED					   						   //
	//	 																										   //
	//-------------------------------------------------------------------------------------------------------------//

	__asm__ __volatile__ ("cmp.b #0x03,&0x6075");				// 5 cycles
    8134:	f2 90 03 00 	cmp.b	#3,	&0x6075	;
    8138:	75 60 

0000813a <.Loc.199.1>:
	__asm__ __volatile__ ("jeq __Second_buffer_restore_stack"); // 2 cycles
    813a:	20 24       	jz	$+66     	;abs 0x817c

0000813c <__First_buffer_restore_stack>:
	/* EDE -> Rm  : 3 cycles each 											  				  			  */
	/* EDE -> PC  : 4 cycles (1 extra cycle penalty) for openMSP430 		  				  			  */
	/* Register time: 14x3 = 42 cycles + 4 cycles (PC) = 49 Cycles + 4(Qwark enable) = 53 cycles 		  */
	__asm__ __volatile__ ("__First_buffer_restore_stack:");

	__asm__ __volatile__ ("mov &0x6016,r4"); 		//R4
    813c:	14 42 16 60 	mov	&0x6016,r4	;0x6016

00008140 <.Loc.209.1>:
	__asm__ __volatile__ ("mov &0x6018,r5"); 		//R5
    8140:	15 42 18 60 	mov	&0x6018,r5	;0x6018

00008144 <.Loc.210.1>:
	__asm__ __volatile__ ("mov &0x601A,r6"); 		//R6
    8144:	16 42 1a 60 	mov	&0x601a,r6	;0x601a

00008148 <.Loc.211.1>:
	__asm__ __volatile__ ("mov &0x601C,r7"); 		//R7
    8148:	17 42 1c 60 	mov	&0x601c,r7	;0x601c

0000814c <.Loc.212.1>:
	__asm__ __volatile__ ("mov &0x601E,r8"); 		//R8
    814c:	18 42 1e 60 	mov	&0x601e,r8	;0x601e

00008150 <.Loc.213.1>:
	__asm__ __volatile__ ("mov &0x6020,r9"); 		//R9
    8150:	19 42 20 60 	mov	&0x6020,r9	;0x6020

00008154 <.Loc.214.1>:
	__asm__ __volatile__ ("mov &0x6022,r10"); 		//R10
    8154:	1a 42 22 60 	mov	&0x6022,r10	;0x6022

00008158 <.Loc.215.1>:
	__asm__ __volatile__ ("mov &0x6024,r11"); 		//R11
    8158:	1b 42 24 60 	mov	&0x6024,r11	;0x6024

0000815c <.Loc.216.1>:
	__asm__ __volatile__ ("mov &0x6026,r12"); 		//R12
    815c:	1c 42 26 60 	mov	&0x6026,r12	;0x6026

00008160 <.Loc.217.1>:
	__asm__ __volatile__ ("mov &0x6028,r13"); 	    //R13
    8160:	1d 42 28 60 	mov	&0x6028,r13	;0x6028

00008164 <.Loc.218.1>:
	__asm__ __volatile__ ("mov &0x602A,r14"); 		//R14
    8164:	1e 42 2a 60 	mov	&0x602a,r14	;0x602a

00008168 <.Loc.219.1>:
	__asm__ __volatile__ ("mov &0x602C,r15"); 		//R15
    8168:	1f 42 2c 60 	mov	&0x602c,r15	;0x602c

0000816c <.Loc.220.1>:
	__asm__ __volatile__ ("mov &0x6012,r1");   		//SP/R1
    816c:	11 42 12 60 	mov	&0x6012,r1	;0x6012

00008170 <.Loc.221.1>:
	__asm__ __volatile__ ("mov &0x6014,r2"); 	    //SR/R2
    8170:	12 42 14 60 	mov	&0x6014,r2	;0x6014

00008174 <.Loc.224.1>:

	/* Enable Idempotency Tracking before restarting operation 		 				  	  */
	__asm__ __volatile__ ("mov #0x0001 , &0x02A0");	/* QWARK_CTL Enable 4 cycles 		  */
    8174:	92 43 a0 02 	mov	#1,	&0x02a0	;r3 As==01

00008178 <.Loc.227.1>:

	/*Restore program Counter */
	__asm__ __volatile__ ("mov &0x6010, pc"); 	    //PC/R0
    8178:	10 42 10 60 	br	&0x6010		;

0000817c <__Second_buffer_restore_stack>:

	__asm__ __volatile__ ("__Second_buffer_restore_stack:");

	__asm__ __volatile__ ("mov &0x6046,r4"); 		//R4
    817c:	14 42 46 60 	mov	&0x6046,r4	;0x6046

00008180 <.Loc.232.1>:
	__asm__ __volatile__ ("mov &0x6048,r5"); 		//R5
    8180:	15 42 48 60 	mov	&0x6048,r5	;0x6048

00008184 <.Loc.233.1>:
	__asm__ __volatile__ ("mov &0x604A,r6"); 		//R6
    8184:	16 42 4a 60 	mov	&0x604a,r6	;0x604a

00008188 <.Loc.234.1>:
	__asm__ __volatile__ ("mov &0x604C,r7"); 		//R7
    8188:	17 42 4c 60 	mov	&0x604c,r7	;0x604c

0000818c <.Loc.235.1>:
	__asm__ __volatile__ ("mov &0x604E,r8"); 		//R8
    818c:	18 42 4e 60 	mov	&0x604e,r8	;0x604e

00008190 <.Loc.236.1>:
	__asm__ __volatile__ ("mov &0x6050,r9"); 		//R9
    8190:	19 42 50 60 	mov	&0x6050,r9	;0x6050

00008194 <.Loc.237.1>:
	__asm__ __volatile__ ("mov &0x6052,r10"); 		//R10
    8194:	1a 42 52 60 	mov	&0x6052,r10	;0x6052

00008198 <.Loc.238.1>:
	__asm__ __volatile__ ("mov &0x6054,r11"); 		//R11
    8198:	1b 42 54 60 	mov	&0x6054,r11	;0x6054

0000819c <.Loc.239.1>:
	__asm__ __volatile__ ("mov &0x6056,r12"); 		//R12
    819c:	1c 42 56 60 	mov	&0x6056,r12	;0x6056

000081a0 <.Loc.240.1>:
	__asm__ __volatile__ ("mov &0x6058,r13"); 	    //R13
    81a0:	1d 42 58 60 	mov	&0x6058,r13	;0x6058

000081a4 <.Loc.241.1>:
	__asm__ __volatile__ ("mov &0x605A,r14"); 		//R14
    81a4:	1e 42 5a 60 	mov	&0x605a,r14	;0x605a

000081a8 <.Loc.242.1>:
	__asm__ __volatile__ ("mov &0x605C,r15"); 		//R15
    81a8:	1f 42 5c 60 	mov	&0x605c,r15	;0x605c

000081ac <.Loc.243.1>:
	__asm__ __volatile__ ("mov &0x6042,r1");   		//SP/R1
    81ac:	11 42 42 60 	mov	&0x6042,r1	;0x6042

000081b0 <.Loc.244.1>:
	__asm__ __volatile__ ("mov &0x6044,r2"); 	    //SR/R2
    81b0:	12 42 44 60 	mov	&0x6044,r2	;0x6044

000081b4 <.Loc.247.1>:

	/* Enable Idempotency Tracking before restarting operation 		 				  	  */
	__asm__ __volatile__ ("mov #0x0001 , &0x02A0");	/* QWARK_CTL Enable 4 cycles 		  */
    81b4:	92 43 a0 02 	mov	#1,	&0x02a0	;r3 As==01

000081b8 <.Loc.250.1>:

	/*Restore program Counter */
	__asm__ __volatile__ ("mov &0x6040, pc"); 	    //PC/R0
    81b8:	10 42 40 60 	br	&0x6040		;

000081bc <__crt0_init_bss>:
    81bc:	3c 40 00 41 	mov	#16640,	r12	;#0x4100

000081c0 <.Loc.74.1>:
    81c0:	0d 43       	clr	r13		;

000081c2 <.Loc.75.1>:
    81c2:	3e 40 22 00 	mov	#34,	r14	;#0x0022

000081c6 <.Loc.79.1>:
    81c6:	b0 12 ce 8c 	call	#36046		;#0x8cce

000081ca <__crt0_movedata>:
    81ca:	3c 40 00 40 	mov	#16384,	r12	;#0x4000

000081ce <.Loc.116.1>:
    81ce:	3d 40 18 8d 	mov	#36120,	r13	;#0x8d18

000081d2 <.Loc.119.1>:
    81d2:	0d 9c       	cmp	r12,	r13	;

000081d4 <.Loc.120.1>:
    81d4:	04 24       	jz	$+10     	;abs 0x81de

000081d6 <.Loc.122.1>:
    81d6:	3e 40 00 01 	mov	#256,	r14	;#0x0100

000081da <.Loc.124.1>:
    81da:	b0 12 96 8c 	call	#35990		;#0x8c96

000081de <__crt0_call_init_then_main>:
    81de:	b0 12 fc 8c 	call	#36092		;#0x8cfc

000081e2 <.Loc.196.1>:
    81e2:	0c 43       	clr	r12		;

000081e4 <.Loc.197.1>:
    81e4:	b0 12 4e 85 	call	#34126		;#0x854e

000081e8 <_msp430_run_init_array>:
    81e8:	34 40 20 80 	mov	#32800,	r4	;#0x8020

000081ec <.Loc.224.1>:
    81ec:	35 40 20 80 	mov	#32800,	r5	;#0x8020

000081f0 <.Loc.225.1>:
    81f0:	26 43       	mov	#2,	r6	;r3 As==10

000081f2 <.Loc.226.1>:
    81f2:	30 40 14 82 	br	#0x8214		;

000081f6 <_msp430_run_preinit_array>:
    81f6:	34 40 20 80 	mov	#32800,	r4	;#0x8020

000081fa <.Loc.232.1>:
    81fa:	35 40 20 80 	mov	#32800,	r5	;#0x8020

000081fe <.Loc.233.1>:
    81fe:	26 43       	mov	#2,	r6	;r3 As==10

00008200 <.Loc.234.1>:
    8200:	30 40 14 82 	br	#0x8214		;

00008204 <_msp430_run_fini_array>:
    8204:	34 40 20 80 	mov	#32800,	r4	;#0x8020

00008208 <.Loc.240.1>:
    8208:	35 40 20 80 	mov	#32800,	r5	;#0x8020

0000820c <.Loc.241.1>:
    820c:	36 40 fe ff 	mov	#65534,	r6	;#0xfffe

00008210 <.Loc.242.1>:
    8210:	30 40 14 82 	br	#0x8214		;

00008214 <_msp430_run_array>:
    8214:	05 94       	cmp	r4,	r5	;

00008216 <.Loc.246.1>:
    8216:	05 24       	jz	$+12     	;abs 0x8222

00008218 <.Loc.247.1>:
    8218:	27 44       	mov	@r4,	r7	;

0000821a <.Loc.248.1>:
    821a:	04 56       	add	r6,	r4	;

0000821c <.Loc.249.1>:
    821c:	a7 12       	call	@r7		;

0000821e <.Loc.250.1>:
    821e:	10 40 f4 ff 	br	0xfff4		;PC rel. 0x8214

00008222 <_msp430_run_done>:
    8222:	30 41       	ret			

00008224 <deregister_tm_clones>:
    8224:	3c 40 18 8d 	mov	#36120,	r12	;#0x8d18
    8228:	3c 90 18 8d 	cmp	#36120,	r12	;#0x8d18
    822c:	07 24       	jz	$+16     	;abs 0x823c
    822e:	3d 40 00 00 	mov	#0,	r13	;
    8232:	0d 93       	cmp	#0,	r13	;r3 As==00
    8234:	03 24       	jz	$+8      	;abs 0x823c
    8236:	3c 40 18 8d 	mov	#36120,	r12	;#0x8d18
    823a:	8d 12       	call	r13		;

0000823c <.L1>:
    823c:	30 41       	ret			

0000823e <register_tm_clones>:
    823e:	0a 12       	push	r10		;
    8240:	3a 40 18 8d 	mov	#36120,	r10	;#0x8d18
    8244:	3a 80 18 8d 	sub	#36120,	r10	;#0x8d18
    8248:	0a 11       	rra	r10		;
    824a:	0c 4a       	mov	r10,	r12	;
    824c:	b0 12 e2 8b 	call	#35810		;#0x8be2
    8250:	0c 5a       	add	r10,	r12	;
    8252:	0d 4c       	mov	r12,	r13	;
    8254:	0d 11       	rra	r13		;
    8256:	0d 93       	cmp	#0,	r13	;r3 As==00
    8258:	07 24       	jz	$+16     	;abs 0x8268
    825a:	3e 40 00 00 	mov	#0,	r14	;
    825e:	0e 93       	cmp	#0,	r14	;r3 As==00
    8260:	03 24       	jz	$+8      	;abs 0x8268
    8262:	3c 40 18 8d 	mov	#36120,	r12	;#0x8d18
    8266:	8e 12       	call	r14		;

00008268 <.L9>:
    8268:	3a 41       	pop	r10		;
    826a:	30 41       	ret			

0000826c <__do_global_dtors_aux>:
    826c:	0a 12       	push	r10		;
    826e:	09 12       	push	r9		;
    8270:	c2 93 00 41 	cmp.b	#0,	&0x4100	;r3 As==00
    8274:	17 20       	jnz	$+48     	;abs 0x82a4
    8276:	3a 40 2a 80 	mov	#32810,	r10	;#0x802a
    827a:	3a 80 28 80 	sub	#32808,	r10	;#0x8028
    827e:	0a 11       	rra	r10		;
    8280:	3a 53       	add	#-1,	r10	;r3 As==11
    8282:	39 40 28 80 	mov	#32808,	r9	;#0x8028

00008286 <.L19>:
    8286:	1c 42 02 41 	mov	&0x4102,r12	;0x4102
    828a:	0c 9a       	cmp	r10,	r12	;
    828c:	0d 28       	jnc	$+28     	;abs 0x82a8
    828e:	b0 12 24 82 	call	#33316		;#0x8224
    8292:	3d 40 00 00 	mov	#0,	r13	;
    8296:	0d 93       	cmp	#0,	r13	;r3 As==00
    8298:	03 24       	jz	$+8      	;abs 0x82a0
    829a:	3c 40 1c 80 	mov	#32796,	r12	;#0x801c
    829e:	8d 12       	call	r13		;

000082a0 <.L21>:
    82a0:	d2 43 00 41 	mov.b	#1,	&0x4100	;r3 As==01

000082a4 <.L17>:
    82a4:	30 40 dc 8b 	br	#0x8bdc		;

000082a8 <.L20>:
    82a8:	1c 53       	inc	r12		;
    82aa:	82 4c 02 41 	mov	r12,	&0x4102	;
    82ae:	0c 5c       	rla	r12		;
    82b0:	0c 59       	add	r9,	r12	;
    82b2:	2c 4c       	mov	@r12,	r12	;
    82b4:	8c 12       	call	r12		;
    82b6:	30 40 86 82 	br	#0x8286		;

000082ba <frame_dummy>:
    82ba:	3e 40 00 00 	mov	#0,	r14	;
    82be:	0e 93       	cmp	#0,	r14	;r3 As==00
    82c0:	05 24       	jz	$+12     	;abs 0x82cc
    82c2:	3d 40 04 41 	mov	#16644,	r13	;#0x4104
    82c6:	3c 40 1c 80 	mov	#32796,	r12	;#0x801c
    82ca:	8e 12       	call	r14		;

000082cc <.L27>:
    82cc:	b0 12 3e 82 	call	#33342		;#0x823e
    82d0:	30 41       	ret			

000082d2 <btbl_bitcnt>:
      4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8   /* 240 - 255 */
};


int btbl_bitcnt(uint32_t x)
{
    82d2:	0a 12       	push	r10		;

000082d4 <.LCFI0>:
    82d4:	09 12       	push	r9		;

000082d6 <.LCFI1>:
    82d6:	08 12       	push	r8		;

000082d8 <.LCFI2>:
      int cnt = bits[ ((char *)&x)[0] & 0xFF ];
    82d8:	39 40 00 40 	mov	#16384,	r9	;#0x4000
    82dc:	4e 4c       	mov.b	r12,	r14	;
    82de:	0e 59       	add	r9,	r14	;
    82e0:	68 4e       	mov.b	@r14,	r8	;

000082e2 <.Loc.43.1>:

      if (0L != (x >>= 8))
    82e2:	b0 12 56 8c 	call	#35926		;#0x8c56

000082e6 <.LVL2>:
    82e6:	0a 4c       	mov	r12,	r10	;
    82e8:	0a dd       	bis	r13,	r10	;
    82ea:	0a 93       	cmp	#0,	r10	;r3 As==00
    82ec:	0b 24       	jz	$+24     	;abs 0x8304
    82ee:	4a 43       	clr.b	r10		;

000082f0 <.L4>:
    82f0:	0a 58       	add	r8,	r10	;

000082f2 <.Loc.41.1>:
};


int btbl_bitcnt(uint32_t x)
{
      int cnt = bits[ ((char *)&x)[0] & 0xFF ];
    82f2:	4e 4c       	mov.b	r12,	r14	;
    82f4:	0e 59       	add	r9,	r14	;
    82f6:	68 4e       	mov.b	@r14,	r8	;

000082f8 <.Loc.43.1>:

      if (0L != (x >>= 8))
    82f8:	b0 12 56 8c 	call	#35926		;#0x8c56

000082fc <.LVL5>:
    82fc:	0e 4c       	mov	r12,	r14	;
    82fe:	0e dd       	bis	r13,	r14	;
    8300:	0e 93       	cmp	#0,	r14	;r3 As==00
    8302:	f6 23       	jnz	$-18     	;abs 0x82f0

00008304 <.L2>:
            cnt += btbl_bitcnt(x);
      return cnt;
}
    8304:	0c 48       	mov	r8,	r12	;
    8306:	0c 5a       	add	r10,	r12	;
    8308:	30 40 da 8b 	br	#0x8bda		;

0000830c <bit_count>:
int bit_count(uint32_t x)
{
    830c:	0e 4c       	mov	r12,	r14	;

0000830e <.Loc.51.1>:
        int n = 0;

        if (x) do
    830e:	0c dd       	bis	r13,	r12	;

00008310 <.LVL9>:
    8310:	0c 93       	cmp	#0,	r12	;r3 As==00
    8312:	0e 24       	jz	$+30     	;abs 0x8330

00008314 <.LBB16>:
            cnt += btbl_bitcnt(x);
      return cnt;
}
int bit_count(uint32_t x)
{
        int n = 0;
    8314:	4c 43       	clr.b	r12		;

00008316 <.L11>:

        if (x) do
              n++;
    8316:	1c 53       	inc	r12		;

00008318 <.Loc.53.1>:
        while (0 != (x = x&(x-1))) ;
    8318:	0b 4e       	mov	r14,	r11	;
    831a:	3b 53       	add	#-1,	r11	;r3 As==11
    831c:	0f 4d       	mov	r13,	r15	;
    831e:	3f 63       	addc	#-1,	r15	;r3 As==11
    8320:	0b fe       	and	r14,	r11	;
    8322:	0f fd       	and	r13,	r15	;
    8324:	0e 4b       	mov	r11,	r14	;

00008326 <.LVL12>:
    8326:	0d 4f       	mov	r15,	r13	;

00008328 <.LVL13>:
    8328:	0f 4b       	mov	r11,	r15	;
    832a:	0f dd       	bis	r13,	r15	;
    832c:	0f 93       	cmp	#0,	r15	;r3 As==00
    832e:	f3 23       	jnz	$-24     	;abs 0x8316

00008330 <.L8>:
        return(n);
}
    8330:	30 41       	ret			

00008332 <bitcount>:
int bitcount(uint32_t i)
{
    8332:	0a 12       	push	r10		;

00008334 <.LCFI3>:
    8334:	09 12       	push	r9		;

00008336 <.LCFI4>:
    8336:	08 12       	push	r8		;

00008338 <.LCFI5>:
    8338:	07 12       	push	r7		;

0000833a <.LCFI6>:
      i = ((i & 0xAAAAAAAAL) >>  1) + (i & 0x55555555L);
    833a:	0a 4c       	mov	r12,	r10	;
    833c:	0b 4d       	mov	r13,	r11	;
    833e:	12 c3       	clrc			
    8340:	0b 10       	rrc	r11		;
    8342:	0a 10       	rrc	r10		;
    8344:	0e 4a       	mov	r10,	r14	;
    8346:	3e f0 55 55 	and	#21845,	r14	;#0x5555
    834a:	08 4b       	mov	r11,	r8	;
    834c:	38 f0 55 55 	and	#21845,	r8	;#0x5555
    8350:	09 4c       	mov	r12,	r9	;
    8352:	39 f0 55 55 	and	#21845,	r9	;#0x5555
    8356:	0f 4d       	mov	r13,	r15	;
    8358:	3f f0 55 55 	and	#21845,	r15	;#0x5555
    835c:	09 5e       	add	r14,	r9	;
    835e:	08 6f       	addc	r15,	r8	;

00008360 <.LVL16>:
      i = ((i & 0xCCCCCCCCL) >>  2) + (i & 0x33333333L);
    8360:	0c 49       	mov	r9,	r12	;
    8362:	0d 48       	mov	r8,	r13	;
    8364:	b0 12 7a 8c 	call	#35962		;#0x8c7a
    8368:	0e 4c       	mov	r12,	r14	;
    836a:	3e f0 33 33 	and	#13107,	r14	;#0x3333
    836e:	07 4d       	mov	r13,	r7	;
    8370:	37 f0 33 33 	and	#13107,	r7	;#0x3333
    8374:	0a 49       	mov	r9,	r10	;
    8376:	3a f0 33 33 	and	#13107,	r10	;#0x3333
    837a:	0c 48       	mov	r8,	r12	;
    837c:	3c f0 33 33 	and	#13107,	r12	;#0x3333
    8380:	0a 5e       	add	r14,	r10	;
    8382:	07 6c       	addc	r12,	r7	;

00008384 <.LVL18>:
      i = ((i & 0xF0F0F0F0L) >>  4) + (i & 0x0F0F0F0FL);
    8384:	0c 4a       	mov	r10,	r12	;
    8386:	0d 47       	mov	r7,	r13	;
    8388:	b0 12 6e 8c 	call	#35950		;#0x8c6e
    838c:	0e 4c       	mov	r12,	r14	;
    838e:	3e f0 0f 0f 	and	#3855,	r14	;#0x0f0f
    8392:	08 4d       	mov	r13,	r8	;
    8394:	38 f0 0f 0f 	and	#3855,	r8	;#0x0f0f
    8398:	09 4a       	mov	r10,	r9	;
    839a:	39 f0 0f 0f 	and	#3855,	r9	;#0x0f0f
    839e:	0c 47       	mov	r7,	r12	;
    83a0:	3c f0 0f 0f 	and	#3855,	r12	;#0x0f0f
    83a4:	09 5e       	add	r14,	r9	;
    83a6:	08 6c       	addc	r12,	r8	;

000083a8 <.LVL20>:
      i = ((i & 0xFF00FF00L) >>  8) + (i & 0x00FF00FFL);
    83a8:	0c 49       	mov	r9,	r12	;
    83aa:	0d 48       	mov	r8,	r13	;
    83ac:	b0 12 56 8c 	call	#35926		;#0x8c56
    83b0:	4e 4c       	mov.b	r12,	r14	;
    83b2:	4f 4d       	mov.b	r13,	r15	;
    83b4:	0a 49       	mov	r9,	r10	;
    83b6:	7a f0 ff 00 	and.b	#255,	r10	;#0x00ff
    83ba:	0d 48       	mov	r8,	r13	;
    83bc:	7d f0 ff 00 	and.b	#255,	r13	;#0x00ff
    83c0:	0a 5e       	add	r14,	r10	;
    83c2:	0d 6f       	addc	r15,	r13	;

000083c4 <.LVL22>:
      i = ((i & 0xFFFF0000L) >> 16) + (i & 0x0000FFFFL);
    83c4:	0c 4a       	mov	r10,	r12	;
    83c6:	7e 40 10 00 	mov.b	#16,	r14	;#0x0010
    83ca:	b0 12 90 8c 	call	#35984		;#0x8c90

000083ce <.LVL23>:
      return (int)i;
}
    83ce:	0c 5a       	add	r10,	r12	;
    83d0:	30 40 d8 8b 	br	#0x8bd8		;

000083d4 <ntbl_bitcount>:
int ntbl_bitcount(uint32_t x)
{
    83d4:	0a 12       	push	r10		;

000083d6 <.LCFI7>:
    83d6:	09 12       	push	r9		;

000083d8 <.LCFI8>:
    83d8:	08 12       	push	r8		;

000083da <.LCFI9>:
    83da:	07 12       	push	r7		;

000083dc <.LCFI10>:
    83dc:	08 4c       	mov	r12,	r8	;
    83de:	07 4d       	mov	r13,	r7	;

000083e0 <.Loc.69.1>:
      return
            bits[ (int) (x & 0x0000000FUL)       ] +
            bits[ (int)((x & 0x000000F0UL) >> 4) ] +
    83e0:	39 40 00 40 	mov	#16384,	r9	;#0x4000
    83e4:	b0 12 6e 8c 	call	#35950		;#0x8c6e

000083e8 <.LVL25>:
    83e8:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f
    83ec:	0c 59       	add	r9,	r12	;

000083ee <.Loc.68.1>:
      return (int)i;
}
int ntbl_bitcount(uint32_t x)
{
      return
            bits[ (int) (x & 0x0000000FUL)       ] +
    83ee:	0d 48       	mov	r8,	r13	;
    83f0:	7d f0 0f 00 	and.b	#15,	r13	;#0x000f
    83f4:	0d 59       	add	r9,	r13	;
    83f6:	6a 4d       	mov.b	@r13,	r10	;
    83f8:	6c 4c       	mov.b	@r12,	r12	;
    83fa:	0a 5c       	add	r12,	r10	;

000083fc <.Loc.70.1>:
            bits[ (int)((x & 0x000000F0UL) >> 4) ] +
            bits[ (int)((x & 0x00000F00UL) >> 8) ] +
    83fc:	0c 48       	mov	r8,	r12	;
    83fe:	0d 47       	mov	r7,	r13	;
    8400:	b0 12 56 8c 	call	#35926		;#0x8c56
    8404:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f
    8408:	0c 59       	add	r9,	r12	;

0000840a <.Loc.69.1>:
}
int ntbl_bitcount(uint32_t x)
{
      return
            bits[ (int) (x & 0x0000000FUL)       ] +
            bits[ (int)((x & 0x000000F0UL) >> 4) ] +
    840a:	6c 4c       	mov.b	@r12,	r12	;
    840c:	0a 5c       	add	r12,	r10	;

0000840e <.Loc.71.1>:
            bits[ (int)((x & 0x00000F00UL) >> 8) ] +
            bits[ (int)((x & 0x0000F000UL) >> 12)] +
    840e:	0c 48       	mov	r8,	r12	;
    8410:	0d 47       	mov	r7,	r13	;
    8412:	b0 12 3e 8c 	call	#35902		;#0x8c3e
    8416:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f
    841a:	0c 59       	add	r9,	r12	;

0000841c <.Loc.70.1>:
int ntbl_bitcount(uint32_t x)
{
      return
            bits[ (int) (x & 0x0000000FUL)       ] +
            bits[ (int)((x & 0x000000F0UL) >> 4) ] +
            bits[ (int)((x & 0x00000F00UL) >> 8) ] +
    841c:	6c 4c       	mov.b	@r12,	r12	;
    841e:	0a 5c       	add	r12,	r10	;

00008420 <.Loc.72.1>:
            bits[ (int)((x & 0x0000F000UL) >> 12)] +
            bits[ (int)((x & 0x000F0000UL) >> 16)] +
    8420:	0c 48       	mov	r8,	r12	;
    8422:	0d 47       	mov	r7,	r13	;
    8424:	7e 40 10 00 	mov.b	#16,	r14	;#0x0010
    8428:	b0 12 90 8c 	call	#35984		;#0x8c90
    842c:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f
    8430:	0c 59       	add	r9,	r12	;

00008432 <.Loc.71.1>:
{
      return
            bits[ (int) (x & 0x0000000FUL)       ] +
            bits[ (int)((x & 0x000000F0UL) >> 4) ] +
            bits[ (int)((x & 0x00000F00UL) >> 8) ] +
            bits[ (int)((x & 0x0000F000UL) >> 12)] +
    8432:	6c 4c       	mov.b	@r12,	r12	;
    8434:	0a 5c       	add	r12,	r10	;

00008436 <.Loc.73.1>:
            bits[ (int)((x & 0x000F0000UL) >> 16)] +
            bits[ (int)((x & 0x00F00000UL) >> 20)] +
    8436:	0c 48       	mov	r8,	r12	;
    8438:	0d 47       	mov	r7,	r13	;
    843a:	7e 40 14 00 	mov.b	#20,	r14	;#0x0014
    843e:	b0 12 90 8c 	call	#35984		;#0x8c90
    8442:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f
    8446:	0c 59       	add	r9,	r12	;

00008448 <.Loc.72.1>:
      return
            bits[ (int) (x & 0x0000000FUL)       ] +
            bits[ (int)((x & 0x000000F0UL) >> 4) ] +
            bits[ (int)((x & 0x00000F00UL) >> 8) ] +
            bits[ (int)((x & 0x0000F000UL) >> 12)] +
            bits[ (int)((x & 0x000F0000UL) >> 16)] +
    8448:	6c 4c       	mov.b	@r12,	r12	;
    844a:	0a 5c       	add	r12,	r10	;

0000844c <.Loc.74.1>:
            bits[ (int)((x & 0x00F00000UL) >> 20)] +
            bits[ (int)((x & 0x0F000000UL) >> 24)] +
    844c:	0c 48       	mov	r8,	r12	;
    844e:	0d 47       	mov	r7,	r13	;
    8450:	7e 40 18 00 	mov.b	#24,	r14	;#0x0018
    8454:	b0 12 90 8c 	call	#35984		;#0x8c90
    8458:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f
    845c:	0c 59       	add	r9,	r12	;

0000845e <.Loc.73.1>:
            bits[ (int) (x & 0x0000000FUL)       ] +
            bits[ (int)((x & 0x000000F0UL) >> 4) ] +
            bits[ (int)((x & 0x00000F00UL) >> 8) ] +
            bits[ (int)((x & 0x0000F000UL) >> 12)] +
            bits[ (int)((x & 0x000F0000UL) >> 16)] +
            bits[ (int)((x & 0x00F00000UL) >> 20)] +
    845e:	6c 4c       	mov.b	@r12,	r12	;
    8460:	0a 5c       	add	r12,	r10	;

00008462 <.Loc.75.1>:
            bits[ (int)((x & 0x0F000000UL) >> 24)] +
            bits[ (int)((x & 0xF0000000UL) >> 28)];
    8462:	0c 48       	mov	r8,	r12	;
    8464:	0d 47       	mov	r7,	r13	;
    8466:	7e 40 1c 00 	mov.b	#28,	r14	;#0x001c
    846a:	b0 12 90 8c 	call	#35984		;#0x8c90
    846e:	0c 59       	add	r9,	r12	;

00008470 <.Loc.76.1>:
}
    8470:	6c 4c       	mov.b	@r12,	r12	;
    8472:	0c 5a       	add	r10,	r12	;
    8474:	30 40 d8 8b 	br	#0x8bd8		;

00008478 <BW_btbl_bitcount>:
int BW_btbl_bitcount(uint32_t x)
{
    8478:	0a 12       	push	r10		;

0000847a <.LCFI11>:
    847a:	09 12       	push	r9		;

0000847c <.LCFI12>:
    847c:	08 12       	push	r8		;

0000847e <.LCFI13>:
    847e:	08 4d       	mov	r13,	r8	;

00008480 <.Loc.87.1>:
            long y;
      } U;

      U.y = x;

      return bits[ U.ch[0] ] + bits[ U.ch[1] ] +
    8480:	3a 40 00 40 	mov	#16384,	r10	;#0x4000
    8484:	4d 4c       	mov.b	r12,	r13	;
    8486:	0d 5a       	add	r10,	r13	;
    8488:	69 4d       	mov.b	@r13,	r9	;
    848a:	b0 12 fe 8b 	call	#35838		;#0x8bfe

0000848e <.LVL33>:
    848e:	3c f0 ff 00 	and	#255,	r12	;#0x00ff
    8492:	0c 5a       	add	r10,	r12	;
    8494:	6c 4c       	mov.b	@r12,	r12	;
    8496:	09 5c       	add	r12,	r9	;

00008498 <.Loc.88.1>:
             bits[ U.ch[3] ] + bits[ U.ch[2] ];
    8498:	0c 48       	mov	r8,	r12	;
    849a:	b0 12 fe 8b 	call	#35838		;#0x8bfe
    849e:	3c f0 ff 00 	and	#255,	r12	;#0x00ff
    84a2:	0c 5a       	add	r10,	r12	;

000084a4 <.Loc.87.1>:
            long y;
      } U;

      U.y = x;

      return bits[ U.ch[0] ] + bits[ U.ch[1] ] +
    84a4:	6c 4c       	mov.b	@r12,	r12	;
    84a6:	0c 59       	add	r9,	r12	;

000084a8 <.Loc.88.1>:
             bits[ U.ch[3] ] + bits[ U.ch[2] ];
    84a8:	38 f0 ff 00 	and	#255,	r8	;#0x00ff
    84ac:	0a 58       	add	r8,	r10	;

000084ae <.Loc.89.1>:
}
    84ae:	6a 4a       	mov.b	@r10,	r10	;
    84b0:	0c 5a       	add	r10,	r12	;
    84b2:	30 40 da 8b 	br	#0x8bda		;

000084b6 <AR_btbl_bitcount>:
int AR_btbl_bitcount(uint32_t x)
{
    84b6:	0a 12       	push	r10		;

000084b8 <.LCFI14>:
    84b8:	09 12       	push	r9		;

000084ba <.LCFI15>:
    84ba:	08 12       	push	r8		;

000084bc <.LCFI16>:
    84bc:	08 4d       	mov	r13,	r8	;

000084be <.Loc.95.1>:
      unsigned char * Ptr = (unsigned char *) &x ;
      int Accu ;

      Accu  = bits[ *Ptr++ ];
    84be:	3a 40 00 40 	mov	#16384,	r10	;#0x4000
    84c2:	4e 4c       	mov.b	r12,	r14	;
    84c4:	0e 5a       	add	r10,	r14	;
    84c6:	69 4e       	mov.b	@r14,	r9	;

000084c8 <.LVL37>:
      Accu += bits[ *Ptr++ ];
    84c8:	b0 12 fe 8b 	call	#35838		;#0x8bfe

000084cc <.LVL38>:
    84cc:	3c f0 ff 00 	and	#255,	r12	;#0x00ff
    84d0:	0c 5a       	add	r10,	r12	;
    84d2:	6c 4c       	mov.b	@r12,	r12	;
    84d4:	09 5c       	add	r12,	r9	;

000084d6 <.Loc.97.1>:
      Accu += bits[ *Ptr++ ];
    84d6:	4c 48       	mov.b	r8,	r12	;
    84d8:	0c 5a       	add	r10,	r12	;
    84da:	6c 4c       	mov.b	@r12,	r12	;
    84dc:	09 5c       	add	r12,	r9	;

000084de <.LVL40>:
      Accu += bits[ *Ptr ];
    84de:	0c 48       	mov	r8,	r12	;
    84e0:	b0 12 fe 8b 	call	#35838		;#0x8bfe
    84e4:	3c f0 ff 00 	and	#255,	r12	;#0x00ff
    84e8:	0a 5c       	add	r12,	r10	;

000084ea <.Loc.100.1>:
      return Accu;
}
    84ea:	6c 4a       	mov.b	@r10,	r12	;
    84ec:	0c 59       	add	r9,	r12	;
    84ee:	30 40 da 8b 	br	#0x8bda		;

000084f2 <ntbl_bitcnt>:
int ntbl_bitcnt(uint32_t x)
{
    84f2:	0a 12       	push	r10		;

000084f4 <.LCFI17>:
    84f4:	09 12       	push	r9		;

000084f6 <.LCFI18>:
    84f6:	08 12       	push	r8		;

000084f8 <.LCFI19>:
      int cnt = bits[(int)(x & 0x0000000FL)];
    84f8:	39 40 00 40 	mov	#16384,	r9	;#0x4000
    84fc:	0e 4c       	mov	r12,	r14	;
    84fe:	7e f0 0f 00 	and.b	#15,	r14	;#0x000f
    8502:	0e 59       	add	r9,	r14	;
    8504:	68 4e       	mov.b	@r14,	r8	;

00008506 <.Loc.105.1>:

      if (0L != (x >>= 4))
    8506:	b0 12 6e 8c 	call	#35950		;#0x8c6e

0000850a <.LVL44>:
    850a:	0a 4c       	mov	r12,	r10	;
    850c:	0a dd       	bis	r13,	r10	;
    850e:	0a 93       	cmp	#0,	r10	;r3 As==00
    8510:	0d 24       	jz	$+28     	;abs 0x852c
    8512:	4a 43       	clr.b	r10		;

00008514 <.L21>:
    8514:	0a 58       	add	r8,	r10	;

00008516 <.Loc.103.1>:
      Accu += bits[ *Ptr ];
      return Accu;
}
int ntbl_bitcnt(uint32_t x)
{
      int cnt = bits[(int)(x & 0x0000000FL)];
    8516:	0e 4c       	mov	r12,	r14	;
    8518:	7e f0 0f 00 	and.b	#15,	r14	;#0x000f
    851c:	0e 59       	add	r9,	r14	;
    851e:	68 4e       	mov.b	@r14,	r8	;

00008520 <.Loc.105.1>:

      if (0L != (x >>= 4))
    8520:	b0 12 6e 8c 	call	#35950		;#0x8c6e

00008524 <.LVL47>:
    8524:	0e 4c       	mov	r12,	r14	;
    8526:	0e dd       	bis	r13,	r14	;
    8528:	0e 93       	cmp	#0,	r14	;r3 As==00
    852a:	f4 23       	jnz	$-22     	;abs 0x8514

0000852c <.L19>:
            cnt += ntbl_bitcnt(x);

      return cnt;
}
    852c:	0c 48       	mov	r8,	r12	;
    852e:	0c 5a       	add	r10,	r12	;
    8530:	30 40 da 8b 	br	#0x8bda		;

00008534 <init>:


void init()
{

     WDTCTL = WDTPW | WDTHOLD; // Stop WDT
    8534:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    8538:	20 01 

0000853a <.Loc.124.1>:
  	 __asm__ __volatile__ ("nop");
    853a:	03 43       	nop			

0000853c <.Loc.125.1>:
     eint();
    853c:	32 d2       	eint			
    853e:	03 43       	nop			

00008540 <.Loc.126.1>:
 	 UART_BAUD = BAUD;                   // Init UART
    8540:	b2 42 82 00 	mov	#8,	&0x0082	;r2 As==11

00008544 <.Loc.127.1>:
     UART_CTL  = UART_EN;
    8544:	d2 43 80 00 	mov.b	#1,	&0x0080	;r3 As==01

00008548 <.Loc.129.1>:
     //Enable QWARK
     QWARK_CTL = QWARK_EN;
    8548:	92 43 a0 02 	mov	#1,	&0x02a0	;r3 As==01

0000854c <.Loc.131.1>:

}
    854c:	30 41       	ret			

0000854e <main>:



int main()
{
    854e:	0a 12       	push	r10		;

00008550 <.LCFI20>:
    8550:	09 12       	push	r9		;

00008552 <.LCFI21>:
    8552:	08 12       	push	r8		;

00008554 <.LCFI22>:
    8554:	07 12       	push	r7		;

00008556 <.LCFI23>:
    8556:	06 12       	push	r6		;

00008558 <.LCFI24>:
    8558:	05 12       	push	r5		;

0000855a <.LCFI25>:
    855a:	04 12       	push	r4		;

0000855c <.LCFI26>:
    855c:	31 80 0a 00 	sub	#10,	r1	;#0x000a

00008560 <.LBB32>:


void init()
{

     WDTCTL = WDTPW | WDTHOLD; // Stop WDT
    8560:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    8564:	20 01 

00008566 <.Loc.124.1>:
  	 __asm__ __volatile__ ("nop");
    8566:	03 43       	nop			

00008568 <.Loc.125.1>:
     eint();
    8568:	32 d2       	eint			
    856a:	03 43       	nop			

0000856c <.Loc.126.1>:
 	 UART_BAUD = BAUD;                   // Init UART
    856c:	b2 42 82 00 	mov	#8,	&0x0082	;r2 As==11

00008570 <.Loc.127.1>:
     UART_CTL  = UART_EN;
    8570:	d2 43 80 00 	mov.b	#1,	&0x0080	;r3 As==01

00008574 <.Loc.129.1>:
     //Enable QWARK
     QWARK_CTL = QWARK_EN;
    8574:	92 43 a0 02 	mov	#1,	&0x02a0	;r3 As==01

00008578 <.LBE32>:


int main()
{
	init();
    ta_wait(10000);
    8578:	3c 40 10 27 	mov	#10000,	r12	;#0x2710
    857c:	b0 12 f0 89 	call	#35312		;#0x89f0
    8580:	39 40 00 40 	mov	#16384,	r9	;#0x4000
    8584:	3a 40 e8 8a 	mov	#35560,	r10	;#0x8ae8

00008588 <.Loc.180.1>:
				n_1 += bitcount(seed);
			}
		}
		else if(func == 2){
			for(iter = 0; iter < ITER; ++iter, seed += 13){
				QWARK_CHECKPOINT();
    8588:	38 40 a0 02 	mov	#672,	r8	;#0x02a0

0000858c <.L47>:
	while(1){
	//LED_CTRL ^= 0x0F;

	//Initialize the variables upon every loop

	n_0=0;
    858c:	82 43 16 41 	mov	#0,	&0x4116	;r3 As==00

00008590 <.Loc.152.1>:
	n_1=0;
    8590:	82 43 18 41 	mov	#0,	&0x4118	;r3 As==00

00008594 <.Loc.153.1>:
	n_2=0;
    8594:	82 43 1c 41 	mov	#0,	&0x411c	;r3 As==00

00008598 <.Loc.154.1>:
	n_3=0;
    8598:	82 43 1e 41 	mov	#0,	&0x411e	;r3 As==00

0000859c <.Loc.155.1>:
	n_4=0;
    859c:	82 43 1a 41 	mov	#0,	&0x411a	;r3 As==00

000085a0 <.Loc.156.1>:
	n_5=0;
    85a0:	82 43 14 41 	mov	#0,	&0x4114	;r3 As==00

000085a4 <.Loc.157.1>:
	n_6=0;
    85a4:	82 43 12 41 	mov	#0,	&0x4112	;r3 As==00
    85a8:	91 43 08 00 	mov	#1,	8(r1)	;r3 As==01
    85ac:	47 43       	clr.b	r7		;

000085ae <.LVL51>:
	//Toggle LED upon every execution

	for (func = 0; func < 7; func++) {

		seed = (uint32_t)SEED;
		if(func == 0){
    85ae:	07 93       	cmp	#0,	r7	;r3 As==00
    85b0:	38 24       	jz	$+114    	;abs 0x8622

000085b2 <.L27>:
				QWARK_CHECKPOINT();

				n_0 += bit_count(seed);
			}
		}
		else if(func == 1){
    85b2:	17 93       	cmp	#1,	r7	;r3 As==01
    85b4:	15 25       	jz	$+556    	;abs 0x87e0

000085b6 <.Loc.178.1>:
				QWARK_CHECKPOINT();

				n_1 += bitcount(seed);
			}
		}
		else if(func == 2){
    85b6:	27 93       	cmp	#2,	r7	;r3 As==10
    85b8:	28 25       	jz	$+594    	;abs 0x880a

000085ba <.Loc.185.1>:
				QWARK_CHECKPOINT();

				n_2 += ntbl_bitcnt(seed);
			}
		}
		else if(func == 3){
    85ba:	37 90 03 00 	cmp	#3,	r7	;
    85be:	fb 24       	jz	$+504    	;abs 0x87b6

000085c0 <.Loc.192.1>:
				QWARK_CHECKPOINT();

				n_3 += ntbl_bitcount(seed);
			}
		}
		else if(func == 4){
    85c0:	27 92       	cmp	#4,	r7	;r2 As==10
    85c2:	bf 24       	jz	$+384    	;abs 0x8742

000085c4 <.Loc.199.1>:
				QWARK_CHECKPOINT();

				n_4 += BW_btbl_bitcount(seed);
			}
		}
		else if(func == 5){
    85c4:	37 90 05 00 	cmp	#5,	r7	;
    85c8:	86 24       	jz	$+270    	;abs 0x86d6

000085ca <.Loc.163.1>:

	//Toggle LED upon every execution

	for (func = 0; func < 7; func++) {

		seed = (uint32_t)SEED;
    85ca:	6e 42       	mov.b	#4,	r14	;r2 As==10
    85cc:	4f 43       	clr.b	r15		;

000085ce <.L60>:
				n_5 += AR_btbl_bitcount(seed);
			}
		}
		else if(func == 6){
			for(iter = 0; iter < ITER; ++iter, seed += 13){
				QWARK_CHECKPOINT();
    85ce:	b8 d0 20 00 	bis	#32,	0(r8)	;#0x0020
    85d2:	00 00 

000085d4 <.LVL53>:
    85d4:	0c 4e       	mov	r14,	r12	;
    85d6:	0d 4f       	mov	r15,	r13	;
    85d8:	75 40 20 00 	mov.b	#32,	r5	;#0x0020

000085dc <.LBB34>:
}

static int bit_shifter(uint32_t x)
{
  int i, n;
  for (i = n = 0; x && (i < (sizeof(uint32_t) * CHAR_BIT)); ++i, x >>= 1)
    85dc:	44 43       	clr.b	r4		;
    85de:	30 40 e8 85 	br	#0x85e8		;

000085e2 <.L69>:
    85e2:	35 53       	add	#-1,	r5	;r3 As==11

000085e4 <.Loc.114.1>:
    85e4:	05 93       	cmp	#0,	r5	;r3 As==00
    85e6:	0a 24       	jz	$+22     	;abs 0x85fc

000085e8 <.L45>:
    n += (int)(x & 1L);
    85e8:	06 4c       	mov	r12,	r6	;
    85ea:	56 f3       	and.b	#1,	r6	;r3 As==01
    85ec:	04 56       	add	r6,	r4	;

000085ee <.Loc.114.1>:
}

static int bit_shifter(uint32_t x)
{
  int i, n;
  for (i = n = 0; x && (i < (sizeof(uint32_t) * CHAR_BIT)); ++i, x >>= 1)
    85ee:	12 c3       	clrc			
    85f0:	0d 10       	rrc	r13		;
    85f2:	0c 10       	rrc	r12		;
    85f4:	06 4c       	mov	r12,	r6	;
    85f6:	06 dd       	bis	r13,	r6	;
    85f8:	06 93       	cmp	#0,	r6	;r3 As==00
    85fa:	f3 23       	jnz	$-24     	;abs 0x85e2

000085fc <.L43>:
		}
		else if(func == 6){
			for(iter = 0; iter < ITER; ++iter, seed += 13){
				QWARK_CHECKPOINT();

				n_6 += bit_shifter(seed);
    85fc:	82 54 12 41 	add	r4,	&0x4112	;

00008600 <.Loc.207.1>:

				n_5 += AR_btbl_bitcount(seed);
			}
		}
		else if(func == 6){
			for(iter = 0; iter < ITER; ++iter, seed += 13){
    8600:	3e 50 0d 00 	add	#13,	r14	;#0x000d

00008604 <.LVL61>:
    8604:	0f 63       	adc	r15		;

00008606 <.LVL62>:
    8606:	3e 90 18 05 	cmp	#1304,	r14	;#0x0518
    860a:	e1 23       	jnz	$-60     	;abs 0x85ce
    860c:	0f 93       	cmp	#0,	r15	;r3 As==00
    860e:	df 23       	jnz	$-64     	;abs 0x85ce

00008610 <.LVL63>:
	n_5=0;
	n_6=0;

	//Toggle LED upon every execution

	for (func = 0; func < 7; func++) {
    8610:	b1 90 07 00 	cmp	#7,	8(r1)	;
    8614:	08 00 
    8616:	26 24       	jz	$+78     	;abs 0x8664

00008618 <.L46>:
    8618:	17 53       	inc	r7		;
    861a:	91 53 08 00 	inc	8(r1)		;

0000861e <.LVL65>:

		seed = (uint32_t)SEED;
		if(func == 0){
    861e:	07 93       	cmp	#0,	r7	;r3 As==00
    8620:	c8 23       	jnz	$-110    	;abs 0x85b2

00008622 <.L63>:

	//Toggle LED upon every execution

	for (func = 0; func < 7; func++) {

		seed = (uint32_t)SEED;
    8622:	6e 42       	mov.b	#4,	r14	;r2 As==10
    8624:	4f 43       	clr.b	r15		;

00008626 <.L57>:
		if(func == 0){
			for(iter = 0; iter < ITER; ++iter, seed += 13){
				QWARK_CHECKPOINT();
    8626:	b8 d0 20 00 	bis	#32,	0(r8)	;#0x0020
    862a:	00 00 

0000862c <.LVL67>:
    862c:	0c 4e       	mov	r14,	r12	;
    862e:	0d 4f       	mov	r15,	r13	;

00008630 <.LBB36>:
            cnt += btbl_bitcnt(x);
      return cnt;
}
int bit_count(uint32_t x)
{
        int n = 0;
    8630:	44 43       	clr.b	r4		;

00008632 <.L28>:

        if (x) do
              n++;
    8632:	14 53       	inc	r4		;

00008634 <.Loc.53.1>:
        while (0 != (x = x&(x-1))) ;
    8634:	05 4c       	mov	r12,	r5	;
    8636:	35 53       	add	#-1,	r5	;r3 As==11
    8638:	06 4d       	mov	r13,	r6	;
    863a:	36 63       	addc	#-1,	r6	;r3 As==11
    863c:	05 fc       	and	r12,	r5	;
    863e:	06 fd       	and	r13,	r6	;
    8640:	0c 45       	mov	r5,	r12	;

00008642 <.LVL70>:
    8642:	0d 46       	mov	r6,	r13	;

00008644 <.LVL71>:
    8644:	06 45       	mov	r5,	r6	;

00008646 <.LVL72>:
    8646:	06 dd       	bis	r13,	r6	;
    8648:	06 93       	cmp	#0,	r6	;r3 As==00
    864a:	f3 23       	jnz	$-24     	;abs 0x8632

0000864c <.LBE36>:
		seed = (uint32_t)SEED;
		if(func == 0){
			for(iter = 0; iter < ITER; ++iter, seed += 13){
				QWARK_CHECKPOINT();

				n_0 += bit_count(seed);
    864c:	82 54 16 41 	add	r4,	&0x4116	;

00008650 <.Loc.165.1>:

	for (func = 0; func < 7; func++) {

		seed = (uint32_t)SEED;
		if(func == 0){
			for(iter = 0; iter < ITER; ++iter, seed += 13){
    8650:	3e 50 0d 00 	add	#13,	r14	;#0x000d

00008654 <.LVL74>:
    8654:	0f 63       	adc	r15		;

00008656 <.LVL75>:
    8656:	3e 90 18 05 	cmp	#1304,	r14	;#0x0518
    865a:	e5 23       	jnz	$-52     	;abs 0x8626
    865c:	0f 93       	cmp	#0,	r15	;r3 As==00
    865e:	e3 23       	jnz	$-56     	;abs 0x8626
    8660:	30 40 18 86 	br	#0x8618		;

00008664 <.L70>:
				n_6 += bit_shifter(seed);
			}
		}
	}

	QWARK_CHECKPOINT();
    8664:	b8 d0 20 00 	bis	#32,	0(r8)	;#0x0020
    8668:	00 00 

0000866a <.Loc.218.1>:

#ifdef UART_DBG
	UART_WriteString("Benchmark Complete! \r\n");
    866a:	3c 40 00 80 	mov	#32768,	r12	;#0x8000
    866e:	8a 12       	call	r10		;

00008670 <.LVL77>:
	UART_WriteNumber(n_0);
    8670:	1c 42 16 41 	mov	&0x4116,r12	;0x4116
    8674:	b0 12 22 8a 	call	#35362		;#0x8a22

00008678 <.Loc.220.1>:
	UART_WriteString("\r\n");
    8678:	3c 40 17 80 	mov	#32791,	r12	;#0x8017
    867c:	8a 12       	call	r10		;

0000867e <.Loc.221.1>:
	UART_WriteNumber(n_1);
    867e:	1c 42 18 41 	mov	&0x4118,r12	;0x4118
    8682:	b0 12 22 8a 	call	#35362		;#0x8a22

00008686 <.Loc.222.1>:
	UART_WriteString("\r\n");
    8686:	3c 40 17 80 	mov	#32791,	r12	;#0x8017
    868a:	8a 12       	call	r10		;

0000868c <.Loc.223.1>:
	UART_WriteNumber(n_2);
    868c:	1c 42 1c 41 	mov	&0x411c,r12	;0x411c
    8690:	b0 12 22 8a 	call	#35362		;#0x8a22

00008694 <.Loc.224.1>:
	UART_WriteString("\r\n");
    8694:	3c 40 17 80 	mov	#32791,	r12	;#0x8017
    8698:	8a 12       	call	r10		;

0000869a <.Loc.225.1>:
	UART_WriteNumber(n_3);
    869a:	1c 42 1e 41 	mov	&0x411e,r12	;0x411e
    869e:	b0 12 22 8a 	call	#35362		;#0x8a22

000086a2 <.Loc.226.1>:
	UART_WriteString("\r\n");
    86a2:	3c 40 17 80 	mov	#32791,	r12	;#0x8017
    86a6:	8a 12       	call	r10		;

000086a8 <.Loc.227.1>:
	UART_WriteNumber(n_4);
    86a8:	1c 42 1a 41 	mov	&0x411a,r12	;0x411a
    86ac:	b0 12 22 8a 	call	#35362		;#0x8a22

000086b0 <.Loc.228.1>:
	UART_WriteString("\r\n");
    86b0:	3c 40 17 80 	mov	#32791,	r12	;#0x8017
    86b4:	8a 12       	call	r10		;

000086b6 <.Loc.229.1>:
	UART_WriteNumber(n_5);
    86b6:	1c 42 14 41 	mov	&0x4114,r12	;0x4114
    86ba:	b0 12 22 8a 	call	#35362		;#0x8a22

000086be <.Loc.230.1>:
	UART_WriteString("\r\n");
    86be:	3c 40 17 80 	mov	#32791,	r12	;#0x8017
    86c2:	8a 12       	call	r10		;

000086c4 <.Loc.231.1>:
	UART_WriteNumber(n_6);
    86c4:	1c 42 12 41 	mov	&0x4112,r12	;0x4112
    86c8:	b0 12 22 8a 	call	#35362		;#0x8a22

000086cc <.Loc.232.1>:
	UART_WriteString("\r\n");
    86cc:	3c 40 17 80 	mov	#32791,	r12	;#0x8017
    86d0:	8a 12       	call	r10		;

000086d2 <.Loc.151.1>:
	while(1){
	//LED_CTRL ^= 0x0F;

	//Initialize the variables upon every loop

	n_0=0;
    86d2:	30 40 8c 85 	br	#0x858c		;

000086d6 <.L68>:
    86d6:	64 42       	mov.b	#4,	r4	;r2 As==10

000086d8 <.Loc.163.1>:

	//Toggle LED upon every execution

	for (func = 0; func < 7; func++) {

		seed = (uint32_t)SEED;
    86d8:	6e 42       	mov.b	#4,	r14	;r2 As==10
    86da:	4f 43       	clr.b	r15		;

000086dc <.L42>:
				n_4 += BW_btbl_bitcount(seed);
			}
		}
		else if(func == 5){
			for(iter = 0; iter < ITER; ++iter, seed += 13){
				QWARK_CHECKPOINT();
    86dc:	b8 d0 20 00 	bis	#32,	0(r8)	;#0x0020
    86e0:	00 00 

000086e2 <.LBB40>:
int AR_btbl_bitcount(uint32_t x)
{
      unsigned char * Ptr = (unsigned char *) &x ;
      int Accu ;

      Accu  = bits[ *Ptr++ ];
    86e2:	0c 49       	mov	r9,	r12	;
    86e4:	0c 54       	add	r4,	r12	;
    86e6:	66 4c       	mov.b	@r12,	r6	;

000086e8 <.Loc.96.1>:
      Accu += bits[ *Ptr++ ];
    86e8:	0c 4e       	mov	r14,	r12	;
    86ea:	81 4e 02 00 	mov	r14,	2(r1)	;
    86ee:	81 4f 00 00 	mov	r15,	0(r1)	;
    86f2:	b0 12 fe 8b 	call	#35838		;#0x8bfe

000086f6 <.LVL96>:
    86f6:	3c f0 ff 00 	and	#255,	r12	;#0x00ff
    86fa:	0c 59       	add	r9,	r12	;
    86fc:	6c 4c       	mov.b	@r12,	r12	;
    86fe:	06 5c       	add	r12,	r6	;

00008700 <.Loc.97.1>:
      Accu += bits[ *Ptr++ ];
    8700:	2f 41       	mov	@r1,	r15	;
    8702:	4c 4f       	mov.b	r15,	r12	;
    8704:	0c 59       	add	r9,	r12	;
    8706:	6c 4c       	mov.b	@r12,	r12	;
    8708:	06 5c       	add	r12,	r6	;

0000870a <.LBE40>:
		}
		else if(func == 5){
			for(iter = 0; iter < ITER; ++iter, seed += 13){
				QWARK_CHECKPOINT();

				n_5 += AR_btbl_bitcount(seed);
    870a:	15 42 14 41 	mov	&0x4114,r5	;0x4114

0000870e <.LBB43>:
      int Accu ;

      Accu  = bits[ *Ptr++ ];
      Accu += bits[ *Ptr++ ];
      Accu += bits[ *Ptr++ ];
      Accu += bits[ *Ptr ];
    870e:	0c 4f       	mov	r15,	r12	;
    8710:	b0 12 fe 8b 	call	#35838		;#0x8bfe
    8714:	3c f0 ff 00 	and	#255,	r12	;#0x00ff
    8718:	0c 59       	add	r9,	r12	;
    871a:	6c 4c       	mov.b	@r12,	r12	;
    871c:	06 5c       	add	r12,	r6	;

0000871e <.LBE43>:
		}
		else if(func == 5){
			for(iter = 0; iter < ITER; ++iter, seed += 13){
				QWARK_CHECKPOINT();

				n_5 += AR_btbl_bitcount(seed);
    871e:	06 55       	add	r5,	r6	;
    8720:	82 46 14 41 	mov	r6,	&0x4114	;

00008724 <.Loc.200.1>:

				n_4 += BW_btbl_bitcount(seed);
			}
		}
		else if(func == 5){
			for(iter = 0; iter < ITER; ++iter, seed += 13){
    8724:	1e 41 02 00 	mov	2(r1),	r14	;
    8728:	2f 41       	mov	@r1,	r15	;
    872a:	3e 50 0d 00 	add	#13,	r14	;#0x000d
    872e:	0f 63       	adc	r15		;

00008730 <.LVL100>:
    8730:	4c 44       	mov.b	r4,	r12	;
    8732:	7c 50 0d 00 	add.b	#13,	r12	;#0x000d
    8736:	44 4c       	mov.b	r12,	r4	;
    8738:	7c 90 18 00 	cmp.b	#24,	r12	;#0x0018
    873c:	cf 23       	jnz	$-96     	;abs 0x86dc
    873e:	30 40 18 86 	br	#0x8618		;

00008742 <.L67>:
    8742:	64 42       	mov.b	#4,	r4	;r2 As==10

00008744 <.Loc.163.1>:

	//Toggle LED upon every execution

	for (func = 0; func < 7; func++) {

		seed = (uint32_t)SEED;
    8744:	6e 42       	mov.b	#4,	r14	;r2 As==10
    8746:	4f 43       	clr.b	r15		;
    8748:	05 47       	mov	r7,	r5	;

0000874a <.L40>:
				n_3 += ntbl_bitcount(seed);
			}
		}
		else if(func == 4){
			for(iter = 0; iter < ITER; ++iter, seed += 13){
				QWARK_CHECKPOINT();
    874a:	b8 d0 20 00 	bis	#32,	0(r8)	;#0x0020
    874e:	00 00 

00008750 <.LBB44>:
      {
            unsigned char ch[4];
            long y;
      } U;

      U.y = x;
    8750:	07 4f       	mov	r15,	r7	;

00008752 <.LBE44>:
		}
		else if(func == 4){
			for(iter = 0; iter < ITER; ++iter, seed += 13){
				QWARK_CHECKPOINT();

				n_4 += BW_btbl_bitcount(seed);
    8752:	91 42 1a 41 	mov	&0x411a,4(r1)	;0x411a
    8756:	04 00 

00008758 <.LBB47>:
            long y;
      } U;

      U.y = x;

      return bits[ U.ch[0] ] + bits[ U.ch[1] ] +
    8758:	0c 49       	mov	r9,	r12	;
    875a:	0c 54       	add	r4,	r12	;
    875c:	66 4c       	mov.b	@r12,	r6	;
    875e:	0c 4e       	mov	r14,	r12	;
    8760:	81 4e 02 00 	mov	r14,	2(r1)	;
    8764:	81 4f 00 00 	mov	r15,	0(r1)	;
    8768:	b0 12 fe 8b 	call	#35838		;#0x8bfe

0000876c <.LVL105>:
    876c:	3c f0 ff 00 	and	#255,	r12	;#0x00ff
    8770:	0c 59       	add	r9,	r12	;
    8772:	6c 4c       	mov.b	@r12,	r12	;
    8774:	06 5c       	add	r12,	r6	;

00008776 <.Loc.88.1>:
             bits[ U.ch[3] ] + bits[ U.ch[2] ];
    8776:	0c 47       	mov	r7,	r12	;
    8778:	b0 12 fe 8b 	call	#35838		;#0x8bfe
    877c:	3c f0 ff 00 	and	#255,	r12	;#0x00ff
    8780:	0c 59       	add	r9,	r12	;

00008782 <.Loc.87.1>:
            long y;
      } U;

      U.y = x;

      return bits[ U.ch[0] ] + bits[ U.ch[1] ] +
    8782:	6c 4c       	mov.b	@r12,	r12	;
    8784:	06 5c       	add	r12,	r6	;

00008786 <.Loc.88.1>:
             bits[ U.ch[3] ] + bits[ U.ch[2] ];
    8786:	4c 47       	mov.b	r7,	r12	;
    8788:	0c 59       	add	r9,	r12	;
    878a:	6c 4c       	mov.b	@r12,	r12	;
    878c:	0c 56       	add	r6,	r12	;

0000878e <.LBE47>:
		}
		else if(func == 4){
			for(iter = 0; iter < ITER; ++iter, seed += 13){
				QWARK_CHECKPOINT();

				n_4 += BW_btbl_bitcount(seed);
    878e:	1c 51 04 00 	add	4(r1),	r12	;
    8792:	82 4c 1a 41 	mov	r12,	&0x411a	;

00008796 <.Loc.193.1>:

				n_3 += ntbl_bitcount(seed);
			}
		}
		else if(func == 4){
			for(iter = 0; iter < ITER; ++iter, seed += 13){
    8796:	1e 41 02 00 	mov	2(r1),	r14	;
    879a:	0f 47       	mov	r7,	r15	;
    879c:	3e 50 0d 00 	add	#13,	r14	;#0x000d
    87a0:	0f 63       	adc	r15		;

000087a2 <.LVL107>:
    87a2:	4c 44       	mov.b	r4,	r12	;
    87a4:	7c 50 0d 00 	add.b	#13,	r12	;#0x000d
    87a8:	44 4c       	mov.b	r12,	r4	;
    87aa:	7c 90 18 00 	cmp.b	#24,	r12	;#0x0018
    87ae:	cd 23       	jnz	$-100    	;abs 0x874a
    87b0:	07 45       	mov	r5,	r7	;
    87b2:	30 40 18 86 	br	#0x8618		;

000087b6 <.L66>:

	//Toggle LED upon every execution

	for (func = 0; func < 7; func++) {

		seed = (uint32_t)SEED;
    87b6:	64 42       	mov.b	#4,	r4	;r2 As==10
    87b8:	45 43       	clr.b	r5		;

000087ba <.L59>:
				n_2 += ntbl_bitcnt(seed);
			}
		}
		else if(func == 3){
			for(iter = 0; iter < ITER; ++iter, seed += 13){
				QWARK_CHECKPOINT();
    87ba:	b8 d0 20 00 	bis	#32,	0(r8)	;#0x0020
    87be:	00 00 

000087c0 <.Loc.189.1>:

				n_3 += ntbl_bitcount(seed);
    87c0:	0c 44       	mov	r4,	r12	;
    87c2:	0d 45       	mov	r5,	r13	;
    87c4:	b0 12 d4 83 	call	#33748		;#0x83d4
    87c8:	82 5c 1e 41 	add	r12,	&0x411e	;

000087cc <.Loc.186.1>:

				n_2 += ntbl_bitcnt(seed);
			}
		}
		else if(func == 3){
			for(iter = 0; iter < ITER; ++iter, seed += 13){
    87cc:	34 50 0d 00 	add	#13,	r4	;#0x000d

000087d0 <.LVL111>:
    87d0:	05 63       	adc	r5		;

000087d2 <.LVL112>:
    87d2:	34 90 18 05 	cmp	#1304,	r4	;#0x0518
    87d6:	f1 23       	jnz	$-28     	;abs 0x87ba
    87d8:	05 93       	cmp	#0,	r5	;r3 As==00
    87da:	ef 23       	jnz	$-32     	;abs 0x87ba
    87dc:	30 40 18 86 	br	#0x8618		;

000087e0 <.L64>:

	//Toggle LED upon every execution

	for (func = 0; func < 7; func++) {

		seed = (uint32_t)SEED;
    87e0:	64 42       	mov.b	#4,	r4	;r2 As==10
    87e2:	45 43       	clr.b	r5		;

000087e4 <.L58>:
				n_0 += bit_count(seed);
			}
		}
		else if(func == 1){
			for(iter = 0; iter < ITER; ++iter, seed += 13){
				QWARK_CHECKPOINT();
    87e4:	b8 d0 20 00 	bis	#32,	0(r8)	;#0x0020
    87e8:	00 00 

000087ea <.Loc.175.1>:

				n_1 += bitcount(seed);
    87ea:	0c 44       	mov	r4,	r12	;
    87ec:	0d 45       	mov	r5,	r13	;
    87ee:	b0 12 32 83 	call	#33586		;#0x8332
    87f2:	82 5c 18 41 	add	r12,	&0x4118	;

000087f6 <.Loc.172.1>:

				n_0 += bit_count(seed);
			}
		}
		else if(func == 1){
			for(iter = 0; iter < ITER; ++iter, seed += 13){
    87f6:	34 50 0d 00 	add	#13,	r4	;#0x000d

000087fa <.LVL116>:
    87fa:	05 63       	adc	r5		;

000087fc <.LVL117>:
    87fc:	34 90 18 05 	cmp	#1304,	r4	;#0x0518
    8800:	f1 23       	jnz	$-28     	;abs 0x87e4
    8802:	05 93       	cmp	#0,	r5	;r3 As==00
    8804:	ef 23       	jnz	$-32     	;abs 0x87e4
    8806:	30 40 18 86 	br	#0x8618		;

0000880a <.L65>:
				n_1 += bitcount(seed);
			}
		}
		else if(func == 2){
			for(iter = 0; iter < ITER; ++iter, seed += 13){
				QWARK_CHECKPOINT();
    880a:	b8 d0 20 00 	bis	#32,	0(r8)	;#0x0020
    880e:	00 00 

00008810 <.LBB48>:
      Accu += bits[ *Ptr ];
      return Accu;
}
int ntbl_bitcnt(uint32_t x)
{
      int cnt = bits[(int)(x & 0x0000000FL)];
    8810:	54 49 04 00 	mov.b	4(r9),	r4	;
    8814:	76 40 11 00 	mov.b	#17,	r6	;#0x0011

00008818 <.LBE48>:

	//Toggle LED upon every execution

	for (func = 0; func < 7; func++) {

		seed = (uint32_t)SEED;
    8818:	a1 42 04 00 	mov	#4,	4(r1)	;r2 As==10
    881c:	81 43 06 00 	mov	#0,	6(r1)	;r3 As==00

00008820 <.LBB52>:
      Accu += bits[ *Ptr ];
      return Accu;
}
int ntbl_bitcnt(uint32_t x)
{
      int cnt = bits[(int)(x & 0x0000000FL)];
    8820:	45 43       	clr.b	r5		;

00008822 <.L48>:
		}
		else if(func == 2){
			for(iter = 0; iter < ITER; ++iter, seed += 13){
				QWARK_CHECKPOINT();

				n_2 += ntbl_bitcnt(seed);
    8822:	05 54       	add	r4,	r5	;
    8824:	82 55 1c 41 	add	r5,	&0x411c	;

00008828 <.Loc.179.1>:

				n_1 += bitcount(seed);
			}
		}
		else if(func == 2){
			for(iter = 0; iter < ITER; ++iter, seed += 13){
    8828:	b1 50 0d 00 	add	#13,	4(r1)	;#0x000d
    882c:	04 00 
    882e:	81 63 06 00 	adc	6(r1)		;

00008832 <.LVL122>:
    8832:	36 90 18 05 	cmp	#1304,	r6	;#0x0518
    8836:	f0 26       	jz	$-542    	;abs 0x8618

00008838 <.Loc.180.1>:
				QWARK_CHECKPOINT();
    8838:	b8 d0 20 00 	bis	#32,	0(r8)	;#0x0020
    883c:	00 00 

0000883e <.LBB53>:
      Accu += bits[ *Ptr ];
      return Accu;
}
int ntbl_bitcnt(uint32_t x)
{
      int cnt = bits[(int)(x & 0x0000000FL)];
    883e:	0c 46       	mov	r6,	r12	;
    8840:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f
    8844:	0c 59       	add	r9,	r12	;
    8846:	64 4c       	mov.b	@r12,	r4	;

00008848 <.Loc.105.1>:

      if (0L != (x >>= 4))
    8848:	1c 41 04 00 	mov	4(r1),	r12	;
    884c:	1d 41 06 00 	mov	6(r1),	r13	;
    8850:	b0 12 6e 8c 	call	#35950		;#0x8c6e

00008854 <.LVL125>:
    8854:	45 43       	clr.b	r5		;

00008856 <.L35>:
    8856:	05 54       	add	r4,	r5	;

00008858 <.Loc.103.1>:
      Accu += bits[ *Ptr ];
      return Accu;
}
int ntbl_bitcnt(uint32_t x)
{
      int cnt = bits[(int)(x & 0x0000000FL)];
    8858:	0e 4c       	mov	r12,	r14	;
    885a:	7e f0 0f 00 	and.b	#15,	r14	;#0x000f
    885e:	0e 59       	add	r9,	r14	;
    8860:	64 4e       	mov.b	@r14,	r4	;

00008862 <.Loc.105.1>:

      if (0L != (x >>= 4))
    8862:	b0 12 6e 8c 	call	#35950		;#0x8c6e

00008866 <.LVL128>:
    8866:	0e 4c       	mov	r12,	r14	;
    8868:	0e dd       	bis	r13,	r14	;
    886a:	0e 93       	cmp	#0,	r14	;r3 As==00
    886c:	f4 23       	jnz	$-22     	;abs 0x8856
    886e:	36 50 0d 00 	add	#13,	r6	;#0x000d
    8872:	30 40 22 88 	br	#0x8822		;

00008876 <INT_Qwark>:
	//---------------------------------------------------------------------------------------------------------------------------------//
	//    CHECKPOINT SETUP: Identify which of the 2 checkpoint buffers should be written, one should always be consistent		       //
	//	  W.C. 18 CYCLES																											   //
	//	  B.C. 10 CYCLES																											   //
	//---------------------------------------------------------------------------------------------------------------------------------//
		__asm__ __volatile__ ("mov r12, &0x6072"); 			//temporal r12: 4 cycles
    8876:	82 4c 72 60 	mov	r12,	&0x6072	;

0000887a <.Loc.271.1>:

		__asm__ __volatile__ ("cmp.b #0x01,&0x6075"); 		//4 cycles
    887a:	d2 93 75 60 	cmp.b	#1,	&0x6075	;r3 As==01

0000887e <.Loc.272.1>:
		__asm__ __volatile__ ("jz __second_buffer_init");	//2 cycles
    887e:	06 24       	jz	$+14     	;abs 0x888c

00008880 <.Loc.274.1>:

		__asm__ __volatile__ ("mov #0x6010, r12"); 			//Load the base pointer of the first checkpoint buffer: 2 cycles
    8880:	3c 40 10 60 	mov	#24592,	r12	;#0x6010

00008884 <.Loc.275.1>:
		__asm__ __volatile__ ("mov.b #0x01,&0x6074");		//4 cycles
    8884:	d2 43 74 60 	mov.b	#1,	&0x6074	;r3 As==01

00008888 <.Loc.276.1>:
		__asm__ __volatile__ ("br #__first_phase_commit");	//2 cycles
    8888:	30 40 90 88 	br	#0x8890		;

0000888c <__second_buffer_init>:

		__asm__ __volatile__ ("__second_buffer_init:");

		__asm__ __volatile__ ("mov #0x6040, r12"); 			//Load the base pointer of the second checkpoint buffer: 2 cycles
    888c:	3c 40 40 60 	mov	#24640,	r12	;#0x6040

00008890 <__first_phase_commit>:
		//    SYSTEM REGISTER CHECKPOINT																		       //
		//	  84 CYCLES																								   //
		//-------------------------------------------------------------------------------------------------------------//
		__asm__ __volatile__ ("__first_phase_commit:");

		__asm__ __volatile__ ("mov 2(r1),@r12"); 	//PC/R0   6 cycles
    8890:	9c 41 02 00 	mov	2(r1),	0(r12)	;
    8894:	00 00 

00008896 <.Loc.293.1>:
		__asm__ __volatile__ ("incd r12");			//		  1 cycle
    8896:	2c 53       	incd	r12		;

00008898 <.Loc.295.1>:

		__asm__ __volatile__ ("mov r1,@r12");   	//SP/R1   4 cycles
    8898:	8c 41 00 00 	mov	r1,	0(r12)	;

0000889c <.Loc.296.1>:
		__asm__ __volatile__ ("add #0x04,@r12");	//		  5 cycles
    889c:	ac 52 00 00 	add	#4,	0(r12)	;r2 As==10

000088a0 <.Loc.297.1>:
		__asm__ __volatile__ ("incd r12");			// 		  1 cycle
    88a0:	2c 53       	incd	r12		;

000088a2 <.Loc.299.1>:

		__asm__ __volatile__ ("mov 0(r1),@r12"); 	//SR/R2   6 cycles
    88a2:	ac 41 00 00 	mov	@r1,	0(r12)	;

000088a6 <.Loc.300.1>:
		__asm__ __volatile__ ("incd r12");			// 		  1 cycle
    88a6:	2c 53       	incd	r12		;

000088a8 <.Loc.302.1>:

		__asm__ __volatile__ ("mov r4,@r12"); 		//R4	  4 cycles
    88a8:	8c 44 00 00 	mov	r4,	0(r12)	;

000088ac <.Loc.303.1>:
		__asm__ __volatile__ ("incd r12");			// 		  1 cycle
    88ac:	2c 53       	incd	r12		;

000088ae <.Loc.305.1>:

		__asm__ __volatile__ ("mov r5,@r12"); 		//R5	  4 cycles
    88ae:	8c 45 00 00 	mov	r5,	0(r12)	;

000088b2 <.Loc.306.1>:
		__asm__ __volatile__ ("incd r12");			// 		  1 cycle
    88b2:	2c 53       	incd	r12		;

000088b4 <.Loc.308.1>:

		__asm__ __volatile__ ("mov r6,@r12"); 		//R6	  4 cycles
    88b4:	8c 46 00 00 	mov	r6,	0(r12)	;

000088b8 <.Loc.309.1>:
		__asm__ __volatile__ ("incd r12");			// 		  1 cycle
    88b8:	2c 53       	incd	r12		;

000088ba <.Loc.311.1>:

		__asm__ __volatile__ ("mov r7,@r12"); 		//R7	  4 cycles
    88ba:	8c 47 00 00 	mov	r7,	0(r12)	;

000088be <.Loc.312.1>:
		__asm__ __volatile__ ("incd r12");			// 		  1 cycle
    88be:	2c 53       	incd	r12		;

000088c0 <.Loc.314.1>:

		__asm__ __volatile__ ("mov r8,@r12"); 		//R8	  4 cycles
    88c0:	8c 48 00 00 	mov	r8,	0(r12)	;

000088c4 <.Loc.315.1>:
		__asm__ __volatile__ ("incd r12");			// 		  1 cycle
    88c4:	2c 53       	incd	r12		;

000088c6 <.Loc.317.1>:

		__asm__ __volatile__ ("mov r9,@r12"); 		//R9	  4 cycles
    88c6:	8c 49 00 00 	mov	r9,	0(r12)	;

000088ca <.Loc.318.1>:
		__asm__ __volatile__ ("incd r12");			// 		  1 cycle
    88ca:	2c 53       	incd	r12		;

000088cc <.Loc.320.1>:

		__asm__ __volatile__ ("mov r10,@r12"); 		//R10	  4 cycles
    88cc:	8c 4a 00 00 	mov	r10,	0(r12)	;

000088d0 <.Loc.321.1>:
		__asm__ __volatile__ ("incd r12");			// 		  1 cycle
    88d0:	2c 53       	incd	r12		;

000088d2 <.Loc.323.1>:

		__asm__ __volatile__ ("mov r11,@r12"); 		//R11	  4 cycles
    88d2:	8c 4b 00 00 	mov	r11,	0(r12)	;

000088d6 <.Loc.324.1>:
		__asm__ __volatile__ ("incd r12");			// 		  1 cycle
    88d6:	2c 53       	incd	r12		;

000088d8 <.Loc.326.1>:

		__asm__ __volatile__ ("mov &0x6072,@r12"); 	//R12	  6 cycles
    88d8:	9c 42 72 60 	mov	&0x6072,0(r12)	;0x6072
    88dc:	00 00 

000088de <.Loc.327.1>:
		__asm__ __volatile__ ("incd r12");			// 		  1 cycle
    88de:	2c 53       	incd	r12		;

000088e0 <.Loc.329.1>:

		__asm__ __volatile__ ("mov r13,@r12"); 	    //R13	  4 cycles
    88e0:	8c 4d 00 00 	mov	r13,	0(r12)	;

000088e4 <.Loc.330.1>:
		__asm__ __volatile__ ("incd r12");			// 		  1 cycle
    88e4:	2c 53       	incd	r12		;

000088e6 <.Loc.332.1>:

		__asm__ __volatile__ ("mov r14,@r12"); 		//R14	  4 cycles
    88e6:	8c 4e 00 00 	mov	r14,	0(r12)	;

000088ea <.Loc.333.1>:
		__asm__ __volatile__ ("incd r12");			// 		  1 cycle
    88ea:	2c 53       	incd	r12		;

000088ec <.Loc.335.1>:

		__asm__ __volatile__ ("mov r15,@r12"); 		//R15	  4 cycles
    88ec:	8c 4f 00 00 	mov	r15,	0(r12)	;

000088f0 <.Loc.336.1>:
		__asm__ __volatile__ ("incd r12");			// 		  1 cycle
    88f0:	2c 53       	incd	r12		;

000088f2 <.Loc.344.1>:
		//    WAR VIOLATION INDEX CHECKPOINT: Get the index indicating the amount of violations stored 				   //
		//	  10 CYCLES																								   //
		//																											   //
		//-------------------------------------------------------------------------------------------------------------//

		__asm__ __volatile__ ("mov &0x02A0, r14");	// 		  3 cycles
    88f2:	1e 42 a0 02 	mov	&0x02a0,r14	;0x02a0

000088f6 <.Loc.345.1>:
		__asm__ __volatile__ ("RRA r14");			// 		  1 cycle
    88f6:	0e 11       	rra	r14		;

000088f8 <.Loc.346.1>:
		__asm__ __volatile__ ("mov.b r14, @r12");	// 		  4 cycles
    88f8:	cc 4e 00 00 	mov.b	r14,	0(r12)	;

000088fc <.Loc.347.1>:
		__asm__ __volatile__ ("mov r14, r15 ");		// 		  1 cycle (save the index for later)
    88fc:	0f 4e       	mov	r14,	r15	;

000088fe <.Loc.348.1>:
		__asm__ __volatile__ ("incd r12");			// 		  1 Cycle
    88fe:	2c 53       	incd	r12		;

00008900 <.Loc.358.1>:
		//	  B.C.	 5 CYCLES FOR EMPTY TLB																			   //
		//-------------------------------------------------------------------------------------------------------------//

		/* Setup registers for copy*/

		__asm__ __volatile__ ("tst r14 ");     	    // 		  1 cycle
    8900:	0e 93       	cmp	#0,	r14	;r3 As==00

00008902 <.Loc.359.1>:
		__asm__ __volatile__ ("jz  _chkpt_stack");	// 		  2 cycles
    8902:	08 24       	jz	$+18     	;abs 0x8914

00008904 <.Loc.361.1>:

		__asm__ __volatile__ ("mov #0x02A2, r13");	// 		  2 cycles
    8904:	3d 40 a2 02 	mov	#674,	r13	;#0x02a2

00008908 <_scratchpad_addr_cpy>:

		__asm__ __volatile__ ("_scratchpad_addr_cpy:");   // Each iteration takes 10 cycles - Worst case 70 cycles

		__asm__ __volatile__ ("mov @r13+2, @r12");  // 		  5 cycles
    8908:	bc 4d 00 00 	mov	@r13+,	0(r12)	;

0000890c <.Loc.366.1>:
		__asm__ __volatile__ ("incd r12");  		// 		  1 cycle
    890c:	2c 53       	incd	r12		;

0000890e <.Loc.367.1>:
		__asm__ __volatile__ ("dec r14 ");      	// 		  1 cycle
    890e:	1e 83       	dec	r14		;

00008910 <.Loc.368.1>:
		__asm__ __volatile__ ("tst r14 ");     		// 		  1 cycle
    8910:	0e 93       	cmp	#0,	r14	;r3 As==00

00008912 <.Loc.369.1>:
		__asm__ __volatile__ ("jnz  _scratchpad_addr_cpy");// 2 cycles
    8912:	fa 23       	jnz	$-10     	;abs 0x8908

00008914 <_chkpt_stack>:

		__asm__ __volatile__ ("_chkpt_stack:");

	    //verify which of the 2 stacks should be overwritten (Double buffering)

		__asm__ __volatile__ ("mov #0x7FFE, r14");			 // 2 cycles
    8914:	3e 40 fe 7f 	mov	#32766,	r14	;#0x7ffe

00008918 <.Loc.384.1>:
		__asm__ __volatile__ ("mov &0X6042, r12"); 			 // Get the current SP - 3 cycles
    8918:	1c 42 42 60 	mov	&0x6042,r12	;0x6042

0000891c <.Loc.385.1>:
		__asm__ __volatile__ ("mov #0x6BFE, r13");			 // 2 cycles
    891c:	3d 40 fe 6b 	mov	#27646,	r13	;#0x6bfe

00008920 <.Loc.387.1>:

		__asm__ __volatile__ ("cmp.b #0x01,&0x6075");   	 // working with the second stack
    8920:	d2 93 75 60 	cmp.b	#1,	&0x6075	;r3 As==01

00008924 <.Loc.388.1>:
		__asm__ __volatile__ ("jz __pre_copy_stack");		 // 2 cycles
    8924:	04 24       	jz	$+10     	;abs 0x892e

00008926 <.Loc.390.1>:

		__asm__ __volatile__ ("mov &0X6012, r12"); 			 // Get the current SP - 3 cycles
    8926:	1c 42 12 60 	mov	&0x6012,r12	;0x6012

0000892a <.Loc.391.1>:
		__asm__ __volatile__ ("mov #0x6FFE, r13");			 // 2 cycles
    892a:	3d 40 fe 6f 	mov	#28670,	r13	;#0x6ffe

0000892e <__pre_copy_stack>:

		__asm__ __volatile__ ("__pre_copy_stack:");

		__asm__ __volatile__ ("decd r12");					 // 1 cycle
    892e:	2c 83       	decd	r12		;

00008930 <__copy_stack>:

		__asm__ __volatile__ ("__copy_stack:");

		__asm__ __volatile__ ("cmp r14,r12");	   		  	 // compare and verify if the base has been reached - 1 cycle
    8930:	0c 9e       	cmp	r14,	r12	;

00008932 <.Loc.400.1>:
		__asm__ __volatile__ ("jz __copy_stack_complete");	 // 2 cycles
    8932:	06 24       	jz	$+14     	;abs 0x8940

00008934 <.Loc.402.1>:

		__asm__ __volatile__ ("mov @r14,@r13");			 	 // 5 cycles
    8934:	ad 4e 00 00 	mov	@r14,	0(r13)	;

00008938 <.Loc.404.1>:

		__asm__ __volatile__ ("decd r13");				  	 // 1 cycle
    8938:	2d 83       	decd	r13		;

0000893a <.Loc.405.1>:
		__asm__ __volatile__ ("decd r14");				  	 // 1 cycle
    893a:	2e 83       	decd	r14		;

0000893c <.Loc.406.1>:
		__asm__ __volatile__ ("br #__copy_stack");		  	 // 2 cycle
    893c:	30 40 30 89 	br	#0x8930		;

00008940 <__copy_stack_complete>:
	//-------------------------------------------------------------------------------------------------------------//
	//    END OF THE FIRST PHASE: Atomic Flag Handling for halfway through checkpoint							   //
	//	  W.C 18 Cycles																							   //
	//-------------------------------------------------------------------------------------------------------------//

		__asm__ __volatile__ ("cmp.b #0x01,&0x6075");		 // 4 cycles
    8940:	d2 93 75 60 	cmp.b	#1,	&0x6075	;r3 As==01

00008944 <.Loc.416.1>:
		__asm__ __volatile__ ("jz  __set_flag_2nd ");		 // 2 cycles
    8944:	04 24       	jz	$+10     	;abs 0x894e

00008946 <.Loc.418.1>:

		__asm__ __volatile__ ("add.b #0x01, &0x6074 "); 	 //4 cycles
    8946:	d2 53 74 60 	inc.b	&0x6074		;

0000894a <.Loc.419.1>:
		__asm__ __volatile__ ("br  #_second_phase_commit "); //4 cycles
    894a:	30 40 52 89 	br	#0x8952		;

0000894e <__set_flag_2nd>:

		__asm__ __volatile__ ("__set_flag_2nd:");
		__asm__ __volatile__ ("add.b #0x01, &0x6075 "); 	 // 4 cycles		/* after setting this bit, THE RESTORE ROUTINE CAN FINALIZE THIS HALFWAY CHECKPOINT  */
    894e:	d2 53 75 60 	inc.b	&0x6075		;

00008952 <_second_phase_commit>:
	//	  ASSUMMING ONLY WORD ADDRESSING. 																		   //
	//-------------------------------------------------------------------------------------------------------------//

		__asm__ __volatile__ ("_second_phase_commit:");

		__asm__ __volatile__ ("tst r15 ");     		         // 1 cycle
    8952:	0f 93       	cmp	#0,	r15	;r3 As==00

00008954 <.Loc.433.1>:
		__asm__ __volatile__ ("jz  _chkpt_finished");		 // 2 cycles
    8954:	22 24       	jz	$+70     	;abs 0x899a

00008956 <.Loc.435.1>:

		__asm__ __volatile__ ("mov #0x6000,  r14 ");		 // 2 cycles
    8956:	3e 40 00 60 	mov	#24576,	r14	;#0x6000

0000895a <.Loc.437.1>:

		__asm__ __volatile__ ("mov #0x6060,  r12 ");		 // 2 cycles
    895a:	3c 40 60 60 	mov	#24672,	r12	;#0x6060

0000895e <.Loc.438.1>:
		__asm__ __volatile__ ("cmp.b #0x02,&0x6075");		 // 4 cycles
    895e:	e2 93 75 60 	cmp.b	#2,	&0x6075	;r3 As==10

00008962 <.Loc.439.1>:
		__asm__ __volatile__ ("jz _second_phase_commit_strt"); // 2 cycles
    8962:	02 24       	jz	$+6      	;abs 0x8968

00008964 <.Loc.441.1>:

		__asm__ __volatile__ ("mov #0x6030,  r12 ");		 // 2 cycles
    8964:	3c 40 30 60 	mov	#24624,	r12	;#0x6030

00008968 <_second_phase_commit_strt>:


		__asm__ __volatile__ ("_second_phase_commit_strt:"); // Worst case

		__asm__ __volatile__ ("mov @r12+2,  r13 ");   		 // 3 cycles
    8968:	3d 4c       	mov	@r12+,	r13	;

0000896a <.Loc.448.1>:

		__asm__ __volatile__ ("mov r13,  r11 ");   			 // 1 cycle
    896a:	0b 4d       	mov	r13,	r11	;

0000896c <.Loc.450.1>:

		__asm__ __volatile__ ("and #0x8000,  r11 ");   		 // 2 cycles
    896c:	3b f0 00 80 	and	#32768,	r11	;#0x8000

00008970 <.Loc.451.1>:
		__asm__ __volatile__ ("cmp #0x8000,  r11 ");   		 // 2 cycles
    8970:	3b 90 00 80 	cmp	#32768,	r11	;#0x8000

00008974 <.Loc.452.1>:
		__asm__ __volatile__ ("jeq _byte_copy ");   		 // 2 cycles
    8974:	07 24       	jz	$+16     	;abs 0x8984

00008976 <.Loc.454.1>:

		__asm__ __volatile__ ("mov @r14+2, @r13 ");    		 // 5 cycles
    8976:	bd 4e 00 00 	mov	@r14+,	0(r13)	;

0000897a <.Loc.456.1>:

		__asm__ __volatile__ ("dec r15");    				 // 1 cycles
    897a:	1f 83       	dec	r15		;

0000897c <.Loc.457.1>:
		__asm__ __volatile__ ("tst r15");    				 // 1 cycles
    897c:	0f 93       	cmp	#0,	r15	;r3 As==00

0000897e <.Loc.459.1>:

		__asm__ __volatile__ ("jnz  _second_phase_commit_strt");	// 2 cycles
    897e:	f4 23       	jnz	$-22     	;abs 0x8968

00008980 <.Loc.460.1>:
		__asm__ __volatile__ ("br #_chkpt_finished");		    	// 2 cycles
    8980:	30 40 9a 89 	br	#0x899a		;

00008984 <_byte_copy>:

		__asm__ __volatile__ ("_byte_copy:");
		__asm__ __volatile__ ("and #0x7FFF,  r13 ");   		// mask the highest bit - 2 cycles
    8984:	3d f0 ff 7f 	and	#32767,	r13	;#0x7fff

00008988 <.Loc.464.1>:
		__asm__ __volatile__ ("mov r13,      r11 ");   		// 1 cycle
    8988:	0b 4d       	mov	r13,	r11	;

0000898a <.Loc.465.1>:
		__asm__ __volatile__ ("and #0x01,    r11 ");   		// detect if its a byte write - 1 cycle
    898a:	1b f3       	and	#1,	r11	;r3 As==01

0000898c <.Loc.466.1>:
		__asm__ __volatile__ ("bis  r11,     r14 ");   		// detect if its a byte write - 1 cycle
    898c:	0e db       	bis	r11,	r14	;

0000898e <.Loc.468.1>:

		__asm__ __volatile__ ("mov.b @r14, @r13 ");    		// 5 cycles
    898e:	ed 4e 00 00 	mov.b	@r14,	0(r13)	;

00008992 <.Loc.469.1>:
		__asm__ __volatile__ ("incd r14 ");    				// 1 cycle
    8992:	2e 53       	incd	r14		;

00008994 <.Loc.471.1>:

		__asm__ __volatile__ ("dec r15");    				// 1 cycles
    8994:	1f 83       	dec	r15		;

00008996 <.Loc.472.1>:
		__asm__ __volatile__ ("tst r15");    				// 1 cycles
    8996:	0f 93       	cmp	#0,	r15	;r3 As==00

00008998 <.Loc.473.1>:
		__asm__ __volatile__ ("jnz  _second_phase_commit_strt");	// 2 cycles
    8998:	e7 23       	jnz	$-48     	;abs 0x8968

0000899a <_chkpt_finished>:
	//-------------------------------------------------------------------------------------------------------------//
		__asm__ __volatile__ ("_chkpt_finished:");


	    /* Set second phase complete Bit - Atomic Flag*/
		__asm__ __volatile__ ("cmp.b #0x02,&0x6075");			//4 cycles
    899a:	e2 93 75 60 	cmp.b	#2,	&0x6075	;r3 As==10

0000899e <.Loc.484.1>:
		__asm__ __volatile__ ("jeq  __pre_finish_2nd_buffer "); //2 cycles
    899e:	0f 24       	jz	$+32     	;abs 0x89be

000089a0 <.Loc.486.1>:

		__asm__ __volatile__ ("mov #0x0103, &0x6074 "); //5 cycles	/* After setting this bit, THE RESTORE ROUTINE CAN RE-USE THE 1ST CHECKPOINT COMPLETELY  */
    89a0:	b2 40 03 01 	mov	#259,	&0x6074	;#0x0103
    89a4:	74 60 

000089a6 <.Loc.493.1>:
	//-------------------------------------------------------------------------------------------------------------//
	//    REGISTER RESTORE:	This is to continue operation and restore possibly modified registers 				   //
	//																											   //
	//-------------------------------------------------------------------------------------------------------------//

		__asm__ __volatile__ ("mov &0x6024,r11"); 		//3 cycles
    89a6:	1b 42 24 60 	mov	&0x6024,r11	;0x6024

000089aa <.Loc.494.1>:
		__asm__ __volatile__ ("mov &0x6026,r12"); 		//3 cycles
    89aa:	1c 42 26 60 	mov	&0x6026,r12	;0x6026

000089ae <.Loc.495.1>:
		__asm__ __volatile__ ("mov &0x6028,r13"); 	    //3 cycles
    89ae:	1d 42 28 60 	mov	&0x6028,r13	;0x6028

000089b2 <.Loc.496.1>:
		__asm__ __volatile__ ("mov &0x602A,r14"); 	    //3 cycles
    89b2:	1e 42 2a 60 	mov	&0x602a,r14	;0x602a

000089b6 <.Loc.497.1>:
		__asm__ __volatile__ ("mov &0x602C,r15"); 	    //3 cycles
    89b6:	1f 42 2c 60 	mov	&0x602c,r15	;0x602c

000089ba <.Loc.499.1>:

		__asm__ __volatile__ ("br #_finish"); 	   		//3 cycles
    89ba:	30 40 d8 89 	br	#0x89d8		;

000089be <__pre_finish_2nd_buffer>:

		__asm__ __volatile__ ("__pre_finish_2nd_buffer:");

		__asm__ __volatile__ ("mov #0x0301, &0x6074 "); //4 cycles /* After setting this bit, THE RESTORE ROUTINE CAN RE-USE THE 2ND CHECKPOINT COMPLETELY  */
    89be:	b2 40 01 03 	mov	#769,	&0x6074	;#0x0301
    89c2:	74 60 

000089c4 <.Loc.508.1>:

	//-------------------------------------------------------------------------------------------------------------//
	//    REGISTER RESTORE:	This is to continue operation and restore possibly modified registers 				   //
	//-------------------------------------------------------------------------------------------------------------//
		__asm__ __volatile__ ("mov &0x6054,r11"); 		//3 cycles
    89c4:	1b 42 54 60 	mov	&0x6054,r11	;0x6054

000089c8 <.Loc.509.1>:
		__asm__ __volatile__ ("mov &0x6056,r12"); 		//3 cycles
    89c8:	1c 42 56 60 	mov	&0x6056,r12	;0x6056

000089cc <.Loc.510.1>:
		__asm__ __volatile__ ("mov &0x6058,r13"); 	    //3 cycles
    89cc:	1d 42 58 60 	mov	&0x6058,r13	;0x6058

000089d0 <.Loc.511.1>:
		__asm__ __volatile__ ("mov &0x605A,r14"); 	    //3 cycles
    89d0:	1e 42 5a 60 	mov	&0x605a,r14	;0x605a

000089d4 <.Loc.512.1>:
		__asm__ __volatile__ ("mov &0x605C,r15"); 	    //3 cycles
    89d4:	1f 42 5c 60 	mov	&0x605c,r15	;0x605c

000089d8 <_finish>:

		__asm__ __volatile__ ("_finish:");
		/* Clear the counters, and re-enable Idempotency tracking*/
		__asm__ __volatile__ ("mov #0x0001, &0x02A0");	//4 cycles
    89d8:	92 43 a0 02 	mov	#1,	&0x02a0	;r3 As==01

000089dc <.Loc.518.1>:

}
    89dc:	00 13       	reti			

000089de <ta_wait_no_lpm>:
//                                                   //
//---------------------------------------------------//
void ta_wait_no_lpm(unsigned int time_cnt) {

  // Start and re-initialize TimerA
  TACTL = TASSEL0 | TACLR | MC_2;
    89de:	b2 40 24 01 	mov	#292,	&0x0160	;#0x0124
    89e2:	60 01 

000089e4 <.Loc.17.1>:

  // Wait until time is over
  while(TAR < time_cnt);
    89e4:	3e 40 70 01 	mov	#368,	r14	;#0x0170

000089e8 <.L2>:
    89e8:	2d 4e       	mov	@r14,	r13	;
    89ea:	0d 9c       	cmp	r12,	r13	;
    89ec:	fd 2b       	jnc	$-4      	;abs 0x89e8

000089ee <.Loc.19.1>:

}
    89ee:	30 41       	ret			

000089f0 <ta_wait>:
//--------------------------------------------------//
unsigned int periodic_val;
void ta_wait(unsigned int time_cnt) {

  // Set time limit for IRQ generation
  TACCR0 = time_cnt;
    89f0:	82 4c 72 01 	mov	r12,	&0x0172	;

000089f4 <.Loc.32.1>:
  periodic_val = time_cnt;
    89f4:	82 4c 20 41 	mov	r12,	&0x4120	;

000089f8 <.Loc.34.1>:
  // Start and re-initialize TimerA
  TACTL  = TASSEL1 | TACLR | MC_1 | TAIE;
    89f8:	b2 40 16 02 	mov	#534,	&0x0160	;#0x0216
    89fc:	60 01 

000089fe <.Loc.39.1>:

  // Go to Low-Power-Mode 0
  //LPM0;

}
    89fe:	30 41       	ret			

00008a00 <INT_timerA1>:
//--------------------------------------------------//
wakeup interrupt (TIMERA1_VECTOR) INT_timerA1(void) {


  // Force Reset
	WDTCTL = 0;
    8a00:	82 43 20 01 	mov	#0,	&0x0120	;r3 As==00

00008a04 <.Loc.50.1>:

}
    8a04:	b1 c0 f0 00 	bic	#240,	0(r1)	;#0x00f0
    8a08:	00 00 
    8a0a:	00 13       	reti			

00008a0c <UART_WriteChar>:

//--------------------------------------------------//
//                 tty_putc function                 //
//            (Send a byte to the UART)             //
//--------------------------------------------------//
int UART_WriteChar (char txdata) {
    8a0c:	3c f0 ff 00 	and	#255,	r12	;#0x00ff

00008a10 <.Loc.19.1>:

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    8a10:	7d 40 81 00 	mov.b	#129,	r13	;#0x0081

00008a14 <.L2>:
    8a14:	fd b2 00 00 	bit.b	#8,	0(r13)	;r2 As==11
    8a18:	fd 23       	jnz	$-4      	;abs 0x8a14

00008a1a <.Loc.22.1>:

  // Write the output character
  UART_TXD = txdata;
    8a1a:	c2 4c 84 00 	mov.b	r12,	&0x0084	;

00008a1e <.Loc.25.1>:

  return 0;
}
    8a1e:	4c 43       	clr.b	r12		;

00008a20 <.LVL1>:
    8a20:	30 41       	ret			

00008a22 <UART_WriteNumber>:


void UART_WriteNumber (int n)
{
    8a22:	0a 12       	push	r10		;

00008a24 <.LCFI0>:
    8a24:	09 12       	push	r9		;

00008a26 <.LCFI1>:
    8a26:	08 12       	push	r8		;

00008a28 <.LCFI2>:
    8a28:	07 12       	push	r7		;

00008a2a <.LCFI3>:
    8a2a:	06 12       	push	r6		;

00008a2c <.LCFI4>:
    8a2c:	05 12       	push	r5		;

00008a2e <.LCFI5>:
    8a2e:	04 12       	push	r4		;

00008a30 <.LCFI6>:
    8a30:	31 80 16 00 	sub	#22,	r1	;#0x0016

00008a34 <.LCFI7>:
    8a34:	0a 4c       	mov	r12,	r10	;

00008a36 <.Loc.32.1>:
  char buf[20];
  int i = 0;
  if (n < 0)
    8a36:	0c 93       	cmp	#0,	r12	;r3 As==00
    8a38:	40 38       	jl	$+130    	;abs 0x8aba

00008a3a <.Loc.37.1>:
    {
	  UART_WriteChar ('-');
      n = -n;
    }
  while (n > 9)
    8a3a:	7c 40 09 00 	mov.b	#9,	r12	;

00008a3e <.LVL4>:
    8a3e:	0c 9a       	cmp	r10,	r12	;
    8a40:	4b 34       	jge	$+152    	;abs 0x8ad8

00008a42 <.L18>:
    8a42:	0c 41       	mov	r1,	r12	;
    8a44:	2c 53       	incd	r12		;
    8a46:	81 4c 00 00 	mov	r12,	0(r1)	;
    8a4a:	09 4c       	mov	r12,	r9	;
    8a4c:	5c 43       	mov.b	#1,	r12	;r3 As==01
    8a4e:	0c 89       	sub	r9,	r12	;
    8a50:	04 4c       	mov	r12,	r4	;
    8a52:	35 40 a0 8b 	mov	#35744,	r5	;#0x8ba0
    8a56:	36 40 54 8b 	mov	#35668,	r6	;#0x8b54

00008a5a <.Loc.39.1>:
    {
      buf[i++] = (n%10) + '0';
    8a5a:	78 40 0a 00 	mov.b	#10,	r8	;#0x000a

00008a5e <.L9>:
    8a5e:	07 44       	mov	r4,	r7	;
    8a60:	07 59       	add	r9,	r7	;

00008a62 <.LVL6>:
    8a62:	0d 48       	mov	r8,	r13	;
    8a64:	0c 4a       	mov	r10,	r12	;
    8a66:	85 12       	call	r5		;
    8a68:	7c 50 30 00 	add.b	#48,	r12	;#0x0030
    8a6c:	c9 4c 00 00 	mov.b	r12,	0(r9)	;

00008a70 <.Loc.40.1>:
      n /= 10;
    8a70:	0d 48       	mov	r8,	r13	;
    8a72:	0c 4a       	mov	r10,	r12	;
    8a74:	86 12       	call	r6		;
    8a76:	0a 4c       	mov	r12,	r10	;
    8a78:	19 53       	inc	r9		;

00008a7a <.Loc.37.1>:
  if (n < 0)
    {
	  UART_WriteChar ('-');
      n = -n;
    }
  while (n > 9)
    8a7a:	7c 40 09 00 	mov.b	#9,	r12	;
    8a7e:	0c 9a       	cmp	r10,	r12	;
    8a80:	ee 3b       	jl	$-34     	;abs 0x8a5e
    8a82:	0d 47       	mov	r7,	r13	;
    8a84:	1d 53       	inc	r13		;

00008a86 <.L8>:
    {
      buf[i++] = (n%10) + '0';
      n /= 10;
    }
  buf[i++] = (n%10) + '0';
    8a86:	27 51       	add	@r1,	r7	;
    8a88:	7a 50 30 00 	add.b	#48,	r10	;#0x0030

00008a8c <.LVL12>:
    8a8c:	c7 4a 00 00 	mov.b	r10,	0(r7)	;
    8a90:	3d 53       	add	#-1,	r13	;r3 As==11
    8a92:	2d 51       	add	@r1,	r13	;
    8a94:	0a 41       	mov	r1,	r10	;
    8a96:	1a 53       	inc	r10		;

00008a98 <.LBB8>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
int UART_WriteChar (char txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    8a98:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

00008a9c <.Loc.22.1>:

  // Write the output character
  UART_TXD = txdata;
    8a9c:	7f 40 84 00 	mov.b	#132,	r15	;#0x0084

00008aa0 <.L11>:
      buf[i++] = (n%10) + '0';
      n /= 10;
    }
  buf[i++] = (n%10) + '0';
  while (i > 0)
	  UART_WriteChar (buf[--i]);
    8aa0:	6e 4d       	mov.b	@r13,	r14	;

00008aa2 <.L10>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
int UART_WriteChar (char txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    8aa2:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    8aa6:	fd 23       	jnz	$-4      	;abs 0x8aa2

00008aa8 <.Loc.22.1>:

  // Write the output character
  UART_TXD = txdata;
    8aa8:	cf 4e 00 00 	mov.b	r14,	0(r15)	;

00008aac <.LVL15>:
    8aac:	3d 53       	add	#-1,	r13	;r3 As==11

00008aae <.LBE11>:
    {
      buf[i++] = (n%10) + '0';
      n /= 10;
    }
  buf[i++] = (n%10) + '0';
  while (i > 0)
    8aae:	0a 9d       	cmp	r13,	r10	;
    8ab0:	f7 23       	jnz	$-16     	;abs 0x8aa0

00008ab2 <.Loc.45.1>:
	  UART_WriteChar (buf[--i]);
}
    8ab2:	31 50 16 00 	add	#22,	r1	;#0x0016
    8ab6:	30 40 d2 8b 	br	#0x8bd2		;

00008aba <.L17>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
int UART_WriteChar (char txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    8aba:	7c 40 81 00 	mov.b	#129,	r12	;#0x0081

00008abe <.L7>:
    8abe:	fc b2 00 00 	bit.b	#8,	0(r12)	;r2 As==11
    8ac2:	fd 23       	jnz	$-4      	;abs 0x8abe

00008ac4 <.Loc.22.1>:

  // Write the output character
  UART_TXD = txdata;
    8ac4:	f2 40 2d 00 	mov.b	#45,	&0x0084	;#0x002d
    8ac8:	84 00 

00008aca <.LBE12>:
  char buf[20];
  int i = 0;
  if (n < 0)
    {
	  UART_WriteChar ('-');
      n = -n;
    8aca:	4c 43       	clr.b	r12		;
    8acc:	0c 8a       	sub	r10,	r12	;
    8ace:	0a 4c       	mov	r12,	r10	;

00008ad0 <.Loc.37.1>:
    }
  while (n > 9)
    8ad0:	7c 40 09 00 	mov.b	#9,	r12	;
    8ad4:	0c 9a       	cmp	r10,	r12	;
    8ad6:	b5 3b       	jl	$-148    	;abs 0x8a42

00008ad8 <.L12>:
    8ad8:	5d 43       	mov.b	#1,	r13	;r3 As==01
    8ada:	47 43       	clr.b	r7		;
    8adc:	0c 41       	mov	r1,	r12	;
    8ade:	2c 53       	incd	r12		;
    8ae0:	81 4c 00 00 	mov	r12,	0(r1)	;
    8ae4:	30 40 86 8a 	br	#0x8a86		;

00008ae8 <UART_WriteString>:
void UART_WriteString(char* string){

    char i = 0;

    /* while the null character found at the end of every string is not found, keep iterating through the pointer*/
    while(string[i]!='\0')
    8ae8:	6f 4c       	mov.b	@r12,	r15	;
    8aea:	0f 93       	cmp	#0,	r15	;r3 As==00
    8aec:	12 24       	jz	$+38     	;abs 0x8b12

00008aee <.Loc.54.1>:
/* Parameter(s)                                                                                     */
/* string      string of characters that will be printed through the UART                           */

void UART_WriteString(char* string){

    char i = 0;
    8aee:	4e 43       	clr.b	r14		;

00008af0 <.LBB14>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
int UART_WriteChar (char txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    8af0:	7d 40 81 00 	mov.b	#129,	r13	;#0x0081

00008af4 <.Loc.22.1>:

  // Write the output character
  UART_TXD = txdata;
    8af4:	7b 40 84 00 	mov.b	#132,	r11	;#0x0084

00008af8 <.L22>:

    /* while the null character found at the end of every string is not found, keep iterating through the pointer*/
    while(string[i]!='\0')
    {
       /* if a transmission is pending, do not increment the index of the string, keep trying */
    	UART_WriteChar(string[i++]);
    8af8:	5e 53       	inc.b	r14		;

00008afa <.LVL22>:
    8afa:	3e f0 ff 00 	and	#255,	r14	;#0x00ff

00008afe <.L21>:
//            (Send a byte to the UART)             //
//--------------------------------------------------//
int UART_WriteChar (char txdata) {

  // Wait until the TX buffer is not full
  while (UART_STAT & UART_TX_FULL);
    8afe:	fd b2 00 00 	bit.b	#8,	0(r13)	;r2 As==11
    8b02:	fd 23       	jnz	$-4      	;abs 0x8afe

00008b04 <.Loc.22.1>:

  // Write the output character
  UART_TXD = txdata;
    8b04:	cb 4f 00 00 	mov.b	r15,	0(r11)	;

00008b08 <.LBE17>:
void UART_WriteString(char* string){

    char i = 0;

    /* while the null character found at the end of every string is not found, keep iterating through the pointer*/
    while(string[i]!='\0')
    8b08:	0f 4c       	mov	r12,	r15	;

00008b0a <.LVL24>:
    8b0a:	0f 5e       	add	r14,	r15	;
    8b0c:	6f 4f       	mov.b	@r15,	r15	;
    8b0e:	0f 93       	cmp	#0,	r15	;r3 As==00
    8b10:	f3 23       	jnz	$-24     	;abs 0x8af8

00008b12 <.L19>:
    {
       /* if a transmission is pending, do not increment the index of the string, keep trying */
    	UART_WriteChar(string[i++]);

    }
 }
    8b12:	30 41       	ret			

00008b14 <udivmodhi4>:
    8b14:	7f 40 11 00 	mov.b	#17,	r15	;#0x0011

00008b18 <.Loc.35.1>:
    8b18:	5b 43       	mov.b	#1,	r11	;r3 As==01

00008b1a <.L2>:
    8b1a:	0d 9c       	cmp	r12,	r13	;
    8b1c:	08 28       	jnc	$+18     	;abs 0x8b2e

00008b1e <.L15>:
    8b1e:	4f 43       	clr.b	r15		;

00008b20 <.L4>:
    8b20:	0b 93       	cmp	#0,	r11	;r3 As==00
    8b22:	0e 20       	jnz	$+30     	;abs 0x8b40

00008b24 <.L5>:
    8b24:	0e 93       	cmp	#0,	r14	;r3 As==00
    8b26:	01 24       	jz	$+4      	;abs 0x8b2a
    8b28:	0f 4c       	mov	r12,	r15	;

00008b2a <.L1>:
    8b2a:	0c 4f       	mov	r15,	r12	;
    8b2c:	30 41       	ret			

00008b2e <.L3>:
    8b2e:	3f 53       	add	#-1,	r15	;r3 As==11

00008b30 <.Loc.38.1>:
    8b30:	0f 93       	cmp	#0,	r15	;r3 As==00
    8b32:	f8 27       	jz	$-14     	;abs 0x8b24

00008b34 <.Loc.38.1>:
    8b34:	0d 93       	cmp	#0,	r13	;r3 As==00
    8b36:	f3 3b       	jl	$-24     	;abs 0x8b1e

00008b38 <.Loc.40.1>:
    8b38:	0d 5d       	rla	r13		;

00008b3a <.Loc.41.1>:
    8b3a:	0b 5b       	rla	r11		;
    8b3c:	30 40 1a 8b 	br	#0x8b1a		;

00008b40 <.L9>:
    8b40:	0c 9d       	cmp	r13,	r12	;
    8b42:	02 28       	jnc	$+6      	;abs 0x8b48

00008b44 <.Loc.47.1>:
    8b44:	0c 8d       	sub	r13,	r12	;

00008b46 <.Loc.48.1>:
    8b46:	0f db       	bis	r11,	r15	;

00008b48 <.L8>:
    8b48:	12 c3       	clrc			
    8b4a:	0b 10       	rrc	r11		;

00008b4c <.Loc.51.1>:
    8b4c:	12 c3       	clrc			
    8b4e:	0d 10       	rrc	r13		;
    8b50:	30 40 20 8b 	br	#0x8b20		;

00008b54 <__mspabi_divi>:
    8b54:	0a 12       	push	r10		;

00008b56 <.LCFI0>:
    8b56:	0f 4c       	mov	r12,	r15	;
    8b58:	0e 4d       	mov	r13,	r14	;

00008b5a <.LVL14>:
    8b5a:	3b 40 14 8b 	mov	#35604,	r11	;#0x8b14

00008b5e <.Loc.64.1>:
    8b5e:	0c 93       	cmp	#0,	r12	;r3 As==00
    8b60:	1a 34       	jge	$+54     	;abs 0x8b96

00008b62 <.Loc.66.1>:
    8b62:	4c 43       	clr.b	r12		;

00008b64 <.LVL15>:
    8b64:	0c 8f       	sub	r15,	r12	;
    8b66:	0f 4c       	mov	r12,	r15	;

00008b68 <.LVL16>:
    8b68:	0d 93       	cmp	#0,	r13	;r3 As==00
    8b6a:	0d 34       	jge	$+28     	;abs 0x8b86

00008b6c <.Loc.67.1>:
    8b6c:	5a 43       	mov.b	#1,	r10	;r3 As==01

00008b6e <.L21>:
    8b6e:	0d 43       	clr	r13		;
    8b70:	0d 8e       	sub	r14,	r13	;

00008b72 <.LVL18>:
    8b72:	4e 43       	clr.b	r14		;

00008b74 <.LVL19>:
    8b74:	0c 4f       	mov	r15,	r12	;

00008b76 <.LVL20>:
    8b76:	8b 12       	call	r11		;

00008b78 <.LVL21>:
    8b78:	1a 93       	cmp	#1,	r10	;r3 As==01
    8b7a:	03 24       	jz	$+8      	;abs 0x8b82

00008b7c <.L20>:
    8b7c:	4d 43       	clr.b	r13		;
    8b7e:	0d 8c       	sub	r12,	r13	;
    8b80:	0c 4d       	mov	r13,	r12	;

00008b82 <.L16>:
    8b82:	3a 41       	pop	r10		;
    8b84:	30 41       	ret			

00008b86 <.L18>:
    8b86:	4e 43       	clr.b	r14		;
    8b88:	8b 12       	call	r11		;

00008b8a <.LVL25>:
    8b8a:	30 40 7c 8b 	br	#0x8b7c		;

00008b8e <.L27>:
    8b8e:	4e 43       	clr.b	r14		;
    8b90:	8b 12       	call	r11		;

00008b92 <.LVL27>:
    8b92:	30 40 82 8b 	br	#0x8b82		;

00008b96 <.L17>:
    8b96:	0d 93       	cmp	#0,	r13	;r3 As==00
    8b98:	fa 37       	jge	$-10     	;abs 0x8b8e

00008b9a <.Loc.61.1>:
    8b9a:	4a 43       	clr.b	r10		;
    8b9c:	30 40 6e 8b 	br	#0x8b6e		;

00008ba0 <__mspabi_remi>:
    8ba0:	0a 12       	push	r10		;

00008ba2 <.LCFI1>:
    8ba2:	0c 93       	cmp	#0,	r12	;r3 As==00
    8ba4:	13 34       	jge	$+40     	;abs 0x8bcc

00008ba6 <.Loc.92.1>:
    8ba6:	4e 43       	clr.b	r14		;
    8ba8:	0e 8c       	sub	r12,	r14	;
    8baa:	0c 4e       	mov	r14,	r12	;

00008bac <.LVL31>:
    8bac:	5a 43       	mov.b	#1,	r10	;r3 As==01

00008bae <.L29>:
    8bae:	0d 93       	cmp	#0,	r13	;r3 As==00
    8bb0:	03 34       	jge	$+8      	;abs 0x8bb8
    8bb2:	4e 43       	clr.b	r14		;
    8bb4:	0e 8d       	sub	r13,	r14	;
    8bb6:	0d 4e       	mov	r14,	r13	;

00008bb8 <.L30>:
    8bb8:	5e 43       	mov.b	#1,	r14	;r3 As==01
    8bba:	b0 12 14 8b 	call	#35604		;#0x8b14

00008bbe <.LVL34>:
    8bbe:	0a 93       	cmp	#0,	r10	;r3 As==00
    8bc0:	03 24       	jz	$+8      	;abs 0x8bc8

00008bc2 <.LVL35>:
    8bc2:	4d 43       	clr.b	r13		;
    8bc4:	0d 8c       	sub	r12,	r13	;
    8bc6:	0c 4d       	mov	r13,	r12	;

00008bc8 <.L28>:
    8bc8:	3a 41       	pop	r10		;
    8bca:	30 41       	ret			

00008bcc <.L32>:
    8bcc:	4a 43       	clr.b	r10		;
    8bce:	30 40 ae 8b 	br	#0x8bae		;

00008bd2 <__mspabi_func_epilog_7>:
    8bd2:	34 41       	pop	r4		;

00008bd4 <__mspabi_func_epilog_6>:
    8bd4:	35 41       	pop	r5		;

00008bd6 <__mspabi_func_epilog_5>:
    8bd6:	36 41       	pop	r6		;

00008bd8 <__mspabi_func_epilog_4>:
    8bd8:	37 41       	pop	r7		;

00008bda <__mspabi_func_epilog_3>:
    8bda:	38 41       	pop	r8		;

00008bdc <__mspabi_func_epilog_2>:
    8bdc:	39 41       	pop	r9		;

00008bde <__mspabi_func_epilog_1>:
    8bde:	3a 41       	pop	r10		;
    8be0:	30 41       	ret			

00008be2 <__mspabi_srli_15>:
    8be2:	12 c3       	clrc			
    8be4:	0c 10       	rrc	r12		;

00008be6 <__mspabi_srli_14>:
    8be6:	12 c3       	clrc			
    8be8:	0c 10       	rrc	r12		;

00008bea <__mspabi_srli_13>:
    8bea:	12 c3       	clrc			
    8bec:	0c 10       	rrc	r12		;

00008bee <__mspabi_srli_12>:
    8bee:	12 c3       	clrc			
    8bf0:	0c 10       	rrc	r12		;

00008bf2 <__mspabi_srli_11>:
    8bf2:	12 c3       	clrc			
    8bf4:	0c 10       	rrc	r12		;

00008bf6 <__mspabi_srli_10>:
    8bf6:	12 c3       	clrc			
    8bf8:	0c 10       	rrc	r12		;

00008bfa <__mspabi_srli_9>:
    8bfa:	12 c3       	clrc			
    8bfc:	0c 10       	rrc	r12		;

00008bfe <__mspabi_srli_8>:
    8bfe:	12 c3       	clrc			
    8c00:	0c 10       	rrc	r12		;

00008c02 <__mspabi_srli_7>:
    8c02:	12 c3       	clrc			
    8c04:	0c 10       	rrc	r12		;

00008c06 <__mspabi_srli_6>:
    8c06:	12 c3       	clrc			
    8c08:	0c 10       	rrc	r12		;

00008c0a <__mspabi_srli_5>:
    8c0a:	12 c3       	clrc			
    8c0c:	0c 10       	rrc	r12		;

00008c0e <__mspabi_srli_4>:
    8c0e:	12 c3       	clrc			
    8c10:	0c 10       	rrc	r12		;

00008c12 <__mspabi_srli_3>:
    8c12:	12 c3       	clrc			
    8c14:	0c 10       	rrc	r12		;

00008c16 <__mspabi_srli_2>:
    8c16:	12 c3       	clrc			
    8c18:	0c 10       	rrc	r12		;

00008c1a <__mspabi_srli_1>:
    8c1a:	12 c3       	clrc			
    8c1c:	0c 10       	rrc	r12		;
    8c1e:	30 41       	ret			

00008c20 <.L11>:
    8c20:	3d 53       	add	#-1,	r13	;r3 As==11
    8c22:	12 c3       	clrc			
    8c24:	0c 10       	rrc	r12		;

00008c26 <__mspabi_srli>:
    8c26:	0d 93       	cmp	#0,	r13	;r3 As==00
    8c28:	fb 23       	jnz	$-8      	;abs 0x8c20
    8c2a:	30 41       	ret			

00008c2c <__mspabi_srll_15>:
    8c2c:	12 c3       	clrc			
    8c2e:	0d 10       	rrc	r13		;
    8c30:	0c 10       	rrc	r12		;

00008c32 <__mspabi_srll_14>:
    8c32:	12 c3       	clrc			
    8c34:	0d 10       	rrc	r13		;
    8c36:	0c 10       	rrc	r12		;

00008c38 <__mspabi_srll_13>:
    8c38:	12 c3       	clrc			
    8c3a:	0d 10       	rrc	r13		;
    8c3c:	0c 10       	rrc	r12		;

00008c3e <__mspabi_srll_12>:
    8c3e:	12 c3       	clrc			
    8c40:	0d 10       	rrc	r13		;
    8c42:	0c 10       	rrc	r12		;

00008c44 <__mspabi_srll_11>:
    8c44:	12 c3       	clrc			
    8c46:	0d 10       	rrc	r13		;
    8c48:	0c 10       	rrc	r12		;

00008c4a <__mspabi_srll_10>:
    8c4a:	12 c3       	clrc			
    8c4c:	0d 10       	rrc	r13		;
    8c4e:	0c 10       	rrc	r12		;

00008c50 <__mspabi_srll_9>:
    8c50:	12 c3       	clrc			
    8c52:	0d 10       	rrc	r13		;
    8c54:	0c 10       	rrc	r12		;

00008c56 <__mspabi_srll_8>:
    8c56:	12 c3       	clrc			
    8c58:	0d 10       	rrc	r13		;
    8c5a:	0c 10       	rrc	r12		;

00008c5c <__mspabi_srll_7>:
    8c5c:	12 c3       	clrc			
    8c5e:	0d 10       	rrc	r13		;
    8c60:	0c 10       	rrc	r12		;

00008c62 <__mspabi_srll_6>:
    8c62:	12 c3       	clrc			
    8c64:	0d 10       	rrc	r13		;
    8c66:	0c 10       	rrc	r12		;

00008c68 <__mspabi_srll_5>:
    8c68:	12 c3       	clrc			
    8c6a:	0d 10       	rrc	r13		;
    8c6c:	0c 10       	rrc	r12		;

00008c6e <__mspabi_srll_4>:
    8c6e:	12 c3       	clrc			
    8c70:	0d 10       	rrc	r13		;
    8c72:	0c 10       	rrc	r12		;

00008c74 <__mspabi_srll_3>:
    8c74:	12 c3       	clrc			
    8c76:	0d 10       	rrc	r13		;
    8c78:	0c 10       	rrc	r12		;

00008c7a <__mspabi_srll_2>:
    8c7a:	12 c3       	clrc			
    8c7c:	0d 10       	rrc	r13		;
    8c7e:	0c 10       	rrc	r12		;

00008c80 <__mspabi_srll_1>:
    8c80:	12 c3       	clrc			
    8c82:	0d 10       	rrc	r13		;
    8c84:	0c 10       	rrc	r12		;
    8c86:	30 41       	ret			

00008c88 <.L12>:
    8c88:	3e 53       	add	#-1,	r14	;r3 As==11
    8c8a:	12 c3       	clrc			
    8c8c:	0d 10       	rrc	r13		;
    8c8e:	0c 10       	rrc	r12		;

00008c90 <__mspabi_srll>:
    8c90:	0e 93       	cmp	#0,	r14	;r3 As==00
    8c92:	fa 23       	jnz	$-10     	;abs 0x8c88
    8c94:	30 41       	ret			

00008c96 <memmove>:
    8c96:	0d 9c       	cmp	r12,	r13	;
    8c98:	0a 28       	jnc	$+22     	;abs 0x8cae

00008c9a <.L5>:
    8c9a:	0f 4c       	mov	r12,	r15	;
    8c9c:	0e 5c       	add	r12,	r14	;

00008c9e <.L3>:
    8c9e:	0e 9f       	cmp	r15,	r14	;
    8ca0:	0d 24       	jz	$+28     	;abs 0x8cbc

00008ca2 <.LVL3>:
    8ca2:	ef 4d 00 00 	mov.b	@r13,	0(r15)	;
    8ca6:	1f 53       	inc	r15		;

00008ca8 <.LVL4>:
    8ca8:	1d 53       	inc	r13		;
    8caa:	30 40 9e 8c 	br	#0x8c9e		;

00008cae <.L2>:
    8cae:	0f 4d       	mov	r13,	r15	;
    8cb0:	0f 5e       	add	r14,	r15	;
    8cb2:	0c 9f       	cmp	r15,	r12	;
    8cb4:	f2 2f       	jc	$-26     	;abs 0x8c9a

00008cb6 <.L4>:
    8cb6:	3e 53       	add	#-1,	r14	;r3 As==11

00008cb8 <.LVL7>:
    8cb8:	3e 93       	cmp	#-1,	r14	;r3 As==11
    8cba:	01 20       	jnz	$+4      	;abs 0x8cbe

00008cbc <.L10>:
    8cbc:	30 41       	ret			

00008cbe <.L6>:
    8cbe:	0b 4c       	mov	r12,	r11	;
    8cc0:	0b 5e       	add	r14,	r11	;
    8cc2:	0f 4d       	mov	r13,	r15	;
    8cc4:	0f 5e       	add	r14,	r15	;
    8cc6:	eb 4f 00 00 	mov.b	@r15,	0(r11)	;
    8cca:	30 40 b6 8c 	br	#0x8cb6		;

00008cce <memset>:
    8cce:	0f 4c       	mov	r12,	r15	;
    8cd0:	0e 5c       	add	r12,	r14	;

00008cd2 <.L2>:
    8cd2:	0f 9e       	cmp	r14,	r15	;
    8cd4:	01 20       	jnz	$+4      	;abs 0x8cd8

00008cd6 <.Loc.104.1>:
    8cd6:	30 41       	ret			

00008cd8 <.L3>:
    8cd8:	cf 4d 00 00 	mov.b	r13,	0(r15)	;
    8cdc:	1f 53       	inc	r15		;

00008cde <.LVL4>:
    8cde:	30 40 d2 8c 	br	#0x8cd2		;

00008ce2 <__do_global_ctors_aux>:
    8ce2:	0a 12       	push	r10		;
    8ce4:	3a 40 24 80 	mov	#32804,	r10	;#0x8024

00008ce8 <.L2>:
    8ce8:	2c 4a       	mov	@r10,	r12	;
    8cea:	3c 93       	cmp	#-1,	r12	;r3 As==11
    8cec:	02 20       	jnz	$+6      	;abs 0x8cf2
    8cee:	3a 41       	pop	r10		;
    8cf0:	30 41       	ret			

00008cf2 <.L3>:
    8cf2:	8c 12       	call	r12		;
    8cf4:	3a 50 fe ff 	add	#65534,	r10	;#0xfffe
    8cf8:	30 40 e8 8c 	br	#0x8ce8		;

00008cfc <__msp430_init>:
    8cfc:	b0 12 ba 82 	call	#33466		;#0x82ba
    8d00:	b0 12 e2 8c 	call	#36066		;#0x8ce2

00008d04 <L0>:
    8d04:	b0 12 f6 81 	call	#33270		;#0x81f6

00008d08 <.Loc.19.1>:
    8d08:	b0 12 e8 81 	call	#33256		;#0x81e8

00008d0c <.Loc.20.1>:
    8d0c:	30 41       	ret			

00008d0e <__msp430_fini>:
    8d0e:	b0 12 04 82 	call	#33284		;#0x8204

00008d12 <L0>:
    8d12:	b0 12 6c 82 	call	#33388		;#0x826c

00008d16 <L0>:
    8d16:	30 41       	ret			
