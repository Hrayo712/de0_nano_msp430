
leds.elf:     file format elf32-msp430

SYMBOL TABLE:
0000ffe8 l    d  __interrupt_vector_5	00000000 __interrupt_vector_5
0000fffe l    d  __reset_vector	00000000 __reset_vector
00008000 l    d  .rodata	00000000 .rodata
00008010 l    d  .text	00000000 .text
00004000 l    d  .data	00000000 .data
00004014 l    d  .bss	00000000 .bss
00004026 l    d  .noinit	00000000 .noinit
00000000 l    d  .MP430.attributes	00000000 .MP430.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_macinfo	00000000 .debug_macinfo
00000000 l    df *ABS*	00000000 main.c
000081c2 l       .text	00000000 _chkpt_stack
000081ac l       .text	00000000 _scratchpad_addr_cpy
000081d0 l       .text	00000000 __copy_stack
000081e0 l       .text	00000000 __copy_stack_complete
00008210 l       .text	00000000 _chkpt_finished
00008204 l       .text	00000000 _second_phase_commit_strt
00000000 l    df *ABS*	00000000 /opt/ti/ccsv8/tools/compiler/msp430-gcc-7.3.1.24_linux64/bin/../lib/gcc/msp430-elf/7.3.1/../../../../msp430-elf/lib/430/crt0.o
0000fffe l       __reset_vector	00000000 __msp430_resetvec_hook
0000806c l       .text	00000000 _msp430_run_array
0000807a l       .text	00000000 _msp430_run_done
00000000 l    df *ABS*	00000000 /opt/ti/ccsv8/tools/compiler/msp430-gcc-7.3.1.24_linux64/bin/../lib/gcc/msp430-elf/7.3.1/430/crtbegin.o
00008008 l     O .rodata	00000000 __CTOR_LIST__
0000800c l     O .rodata	00000000 __DTOR_LIST__
00008000 l     O .rodata	00000000 __EH_FRAME_BEGIN__
0000845e l     O .text	00000000 __TMC_LIST__
00008080 l     F .text	00000000 deregister_tm_clones
0000809a l     F .text	00000000 register_tm_clones
000080c8 l     F .text	00000000 __do_global_dtors_aux
00004014 l     O .bss	00000000 completed.3056
00004016 l     O .bss	00000000 dtor_idx.3058
00008116 l     F .text	00000000 call___do_global_dtors_aux
00008116 l     F .text	00000000 frame_dummy
00004018 l     O .bss	00000000 object.3071
0000812e l     F .text	00000000 call_frame_dummy
00000000 l    df *ABS*	00000000 /opt/ti/ccsv8/tools/compiler/msp430-gcc-7.3.1.24_linux64/bin/../lib/gcc/msp430-elf/7.3.1/430/crtend.o
0000800a l     O .rodata	00000000 __CTOR_END__
00008000 l     O .rodata	00000000 __FRAME_END__
00008428 l     F .text	00000000 __do_global_ctors_aux
00008442 l     F .text	00000000 call___do_global_ctors_aux
00000000 l    df *ABS*	00000000 crt_bss.o
00000000 l    df *ABS*	00000000 crt_movedata.o
00000000 l    df *ABS*	00000000 crt_main.o
00000000 l    df *ABS*	00000000 srli.o
00000000 l    df *ABS*	00000000 lib_a-memmove.o
00000000 l    df *ABS*	00000000 lib_a-memset.o
00000000 l    df *ABS*	00000000 /opt/ti/ccsv8/tools/compiler/msp430-gcc-7.3.1.24_linux64/bin/../lib/gcc/msp430-elf/7.3.1/../../../../msp430-elf/lib/430/crtn.o
00004008 g     O .data	00000002 var5
0000833e g       .text	00000000 .hidden __mspabi_srli_9
0000838e g       .text	00000000 .hidden __mspabi_srll_10
0000833a g       .text	00000000 .hidden __mspabi_srli_10
00008326 g       .text	00000000 .hidden __mspabi_srli_15
000083da g     F .text	00000038 memmove
00008352 g       .text	00000000 .hidden __mspabi_srli_4
00008346 g       .text	00000000 .hidden __mspabi_srli_7
000083a0 g       .text	00000000 .hidden __mspabi_srll_7
000083b8 g       .text	00000000 .hidden __mspabi_srll_3
00004012 g     O .data	00000002 var10
00008318 g       .text	00000000 .hidden __mspabi_func_epilog_6
0000845e g     O .text	00000000 .hidden __TMC_END__
0000837c g       .text	00000000 .hidden __mspabi_srll_13
0000800e g     O .rodata	00000000 .hidden __DTOR_END__
00008004 g       .rodata	00000000 __fini_array_end
00008332 g       .text	00000000 .hidden __mspabi_srli_12
00008010 g     F .text	00000004 __crt0_start
00004000 g     O .data	00000000 .hidden __dso_handle
00008014 g     F .text	0000000e __crt0_init_bss
00000012 g       *ABS*	00000000 __bsssize
00008036 g     F .text	0000000a __crt0_call_init_then_main
00004002 g     O .data	00000001 var1
00008322 g       .text	00000000 .hidden __mspabi_func_epilog_1
0000831e g       .text	00000000 .hidden __mspabi_func_epilog_3
000083ac g       .text	00000000 .hidden __mspabi_srll_5
0000836a g       .text	00000000 .hidden __mspabi_srli
00004006 g     O .data	00000002 var4
00008388 g       .text	00000000 .hidden __mspabi_srll_11
00008234 g     F .text	0000004e dummy_function
0000400e g     O .data	00000002 var8
0000834e g       .text	00000000 .hidden __mspabi_srli_5
00000000  w      *UND*	00000000 __deregister_frame_info
00004026 g       .noinit	00000000 end
00000000  w      *UND*	00000000 _ITM_registerTMCloneTable
000083a6 g       .text	00000000 .hidden __mspabi_srll_6
00004010 g     O .data	00000002 var9
00008010 g       .text	00000000 _start
0000805c g     F .text	00000000 _msp430_run_fini_array
0000835e g       .text	00000000 .hidden __mspabi_srli_1
00008376 g       .text	00000000 .hidden __mspabi_srll_14
0000832a g       .text	00000000 .hidden __mspabi_srli_14
00000014 g       *ABS*	00000000 __romdatacopysize
00008336 g       .text	00000000 .hidden __mspabi_srli_11
00000000  w      *UND*	00000000 _ITM_deregisterTMCloneTable
00008004 g       .rodata	00000000 __fini_array_start
00000000  w      *ABS*	00000000 __rom_highdatacopysize
00008442 g       .text	00000000 __msp430_init
00008412 g     F .text	00000014 memset
00008282 g     F .text	00000094 main
000083b2 g       .text	00000000 .hidden __mspabi_srll_4
00008004 g       .rodata	00000000 __init_array_end
0000835a g       .text	00000000 .hidden __mspabi_srli_2
00000000  w      *ABS*	00000000 __high_bsssize
00004003 g     O .data	00000001 var2
0000400a g     O .data	00000002 var6
00000000  w      *ABS*	00000000 __rom_highdatastart
00004004 g     O .data	00000002 var3
0000845e g       .text	00000000 __msp430_fini_end
00008382 g       .text	00000000 .hidden __mspabi_srll_12
0000845e g       *ABS*	00000000 __romdatastart
0000400c g     O .data	00000002 var7
00008040 g     F .text	00000000 _msp430_run_init_array
0000834a g       .text	00000000 .hidden __mspabi_srli_6
00008004 g       .rodata	00000000 __preinit_array_end
00008356 g       .text	00000000 .hidden __mspabi_srli_3
00000000  w      *ABS*	00000000 __high_datastart
00000000  w      *ABS*	00000000 __upper_data_init
00004014 g       .bss	00000000 __bssstart
0000831a g       .text	00000000 .hidden __mspabi_func_epilog_5
00008000 g       .noinit	00000000 __stack
0000812e g     F .text	00000106 INT_Qwark
00008394 g       .text	00000000 .hidden __mspabi_srll_9
00004014 g       .data	00000000 _edata
00008454 g       .text	00000000 __msp430_init_end
000083d4 g       .text	00000000 .hidden __mspabi_srll
00000000  w      *ABS*	00000000 __high_bssstart
00008370 g       .text	00000000 .hidden __mspabi_srll_15
00008004 g       .rodata	00000000 __init_array_start
0000832e g       .text	00000000 .hidden __mspabi_srli_13
00004000 g       .data	00000000 __datastart
0000839a g       .text	00000000 .hidden __mspabi_srll_8
000083c4 g       .text	00000000 .hidden __mspabi_srll_1
00008004 g       .rodata	00000000 __preinit_array_start
00008022 g     F .text	00000014 __crt0_movedata
00008320 g       .text	00000000 .hidden __mspabi_func_epilog_2
00000000  w      *UND*	00000000 __register_frame_info
0000804e g     F .text	00000000 _msp430_run_preinit_array
00008316 g       .text	00000000 .hidden __mspabi_func_epilog_7
0000831c g       .text	00000000 .hidden __mspabi_func_epilog_4
000083be g       .text	00000000 .hidden __mspabi_srll_2
00008454 g       .text	00000000 __msp430_fini
00008342 g       .text	00000000 .hidden __mspabi_srli_8



Disassembly of section __interrupt_vector_5:

0000ffe8 <__interrupt_vector_5>:
    ffe8:	2e 81       	interrupt service routine at 0x812e

Disassembly of section .text:

00008010 <__crt0_start>:
    8010:	31 40 00 80 	mov	#32768,	r1	;#0x8000

00008014 <__crt0_init_bss>:
    8014:	3c 40 14 40 	mov	#16404,	r12	;#0x4014

00008018 <.Loc.74.1>:
    8018:	0d 43       	clr	r13		;

0000801a <.Loc.75.1>:
    801a:	3e 40 12 00 	mov	#18,	r14	;#0x0012

0000801e <.Loc.79.1>:
    801e:	b0 12 12 84 	call	#33810		;#0x8412

00008022 <__crt0_movedata>:
    8022:	3c 40 00 40 	mov	#16384,	r12	;#0x4000

00008026 <.Loc.116.1>:
    8026:	3d 40 5e 84 	mov	#33886,	r13	;#0x845e

0000802a <.Loc.119.1>:
    802a:	0d 9c       	cmp	r12,	r13	;

0000802c <.Loc.120.1>:
    802c:	04 24       	jz	$+10     	;abs 0x8036

0000802e <.Loc.122.1>:
    802e:	3e 40 14 00 	mov	#20,	r14	;#0x0014

00008032 <.Loc.124.1>:
    8032:	b0 12 da 83 	call	#33754		;#0x83da

00008036 <__crt0_call_init_then_main>:
    8036:	b0 12 42 84 	call	#33858		;#0x8442

0000803a <.Loc.196.1>:
    803a:	0c 43       	clr	r12		;

0000803c <.Loc.197.1>:
    803c:	b0 12 82 82 	call	#33410		;#0x8282

00008040 <_msp430_run_init_array>:
    8040:	34 40 04 80 	mov	#32772,	r4	;#0x8004

00008044 <.Loc.224.1>:
    8044:	35 40 04 80 	mov	#32772,	r5	;#0x8004

00008048 <.Loc.225.1>:
    8048:	26 43       	mov	#2,	r6	;r3 As==10

0000804a <.Loc.226.1>:
    804a:	30 40 6c 80 	br	#0x806c		;

0000804e <_msp430_run_preinit_array>:
    804e:	34 40 04 80 	mov	#32772,	r4	;#0x8004

00008052 <.Loc.232.1>:
    8052:	35 40 04 80 	mov	#32772,	r5	;#0x8004

00008056 <.Loc.233.1>:
    8056:	26 43       	mov	#2,	r6	;r3 As==10

00008058 <.Loc.234.1>:
    8058:	30 40 6c 80 	br	#0x806c		;

0000805c <_msp430_run_fini_array>:
    805c:	34 40 04 80 	mov	#32772,	r4	;#0x8004

00008060 <.Loc.240.1>:
    8060:	35 40 04 80 	mov	#32772,	r5	;#0x8004

00008064 <.Loc.241.1>:
    8064:	36 40 fe ff 	mov	#65534,	r6	;#0xfffe

00008068 <.Loc.242.1>:
    8068:	30 40 6c 80 	br	#0x806c		;

0000806c <_msp430_run_array>:
    806c:	05 94       	cmp	r4,	r5	;

0000806e <.Loc.246.1>:
    806e:	05 24       	jz	$+12     	;abs 0x807a

00008070 <.Loc.247.1>:
    8070:	27 44       	mov	@r4,	r7	;

00008072 <.Loc.248.1>:
    8072:	04 56       	add	r6,	r4	;

00008074 <.Loc.249.1>:
    8074:	a7 12       	call	@r7		;

00008076 <.Loc.250.1>:
    8076:	10 40 f4 ff 	br	0xfff4		;PC rel. 0x806c

0000807a <_msp430_run_done>:
    807a:	30 41       	ret			

0000807c <L0>:
    807c:	30 41       	ret			
    807e:	30 41       	ret			

00008080 <deregister_tm_clones>:
    8080:	3c 40 5e 84 	mov	#33886,	r12	;#0x845e
    8084:	3c 90 5e 84 	cmp	#33886,	r12	;#0x845e
    8088:	07 24       	jz	$+16     	;abs 0x8098
    808a:	3d 40 00 00 	mov	#0,	r13	;
    808e:	0d 93       	cmp	#0,	r13	;r3 As==00
    8090:	03 24       	jz	$+8      	;abs 0x8098
    8092:	3c 40 5e 84 	mov	#33886,	r12	;#0x845e
    8096:	8d 12       	call	r13		;

00008098 <.L1>:
    8098:	30 41       	ret			

0000809a <register_tm_clones>:
    809a:	0a 12       	push	r10		;
    809c:	3a 40 5e 84 	mov	#33886,	r10	;#0x845e
    80a0:	3a 80 5e 84 	sub	#33886,	r10	;#0x845e
    80a4:	0a 11       	rra	r10		;
    80a6:	0c 4a       	mov	r10,	r12	;
    80a8:	b0 12 26 83 	call	#33574		;#0x8326
    80ac:	0c 5a       	add	r10,	r12	;
    80ae:	0d 4c       	mov	r12,	r13	;
    80b0:	0d 11       	rra	r13		;
    80b2:	0d 93       	cmp	#0,	r13	;r3 As==00
    80b4:	07 24       	jz	$+16     	;abs 0x80c4
    80b6:	3e 40 00 00 	mov	#0,	r14	;
    80ba:	0e 93       	cmp	#0,	r14	;r3 As==00
    80bc:	03 24       	jz	$+8      	;abs 0x80c4
    80be:	3c 40 5e 84 	mov	#33886,	r12	;#0x845e
    80c2:	8e 12       	call	r14		;

000080c4 <.L9>:
    80c4:	3a 41       	pop	r10		;
    80c6:	30 41       	ret			

000080c8 <__do_global_dtors_aux>:
    80c8:	0a 12       	push	r10		;
    80ca:	09 12       	push	r9		;
    80cc:	c2 93 14 40 	cmp.b	#0,	&0x4014	;r3 As==00
    80d0:	17 20       	jnz	$+48     	;abs 0x8100
    80d2:	3a 40 0e 80 	mov	#32782,	r10	;#0x800e
    80d6:	3a 80 0c 80 	sub	#32780,	r10	;#0x800c
    80da:	0a 11       	rra	r10		;
    80dc:	3a 53       	add	#-1,	r10	;r3 As==11
    80de:	39 40 0c 80 	mov	#32780,	r9	;#0x800c

000080e2 <.L19>:
    80e2:	1c 42 16 40 	mov	&0x4016,r12	;0x4016
    80e6:	0c 9a       	cmp	r10,	r12	;
    80e8:	0d 28       	jnc	$+28     	;abs 0x8104
    80ea:	b0 12 80 80 	call	#32896		;#0x8080
    80ee:	3d 40 00 00 	mov	#0,	r13	;
    80f2:	0d 93       	cmp	#0,	r13	;r3 As==00
    80f4:	03 24       	jz	$+8      	;abs 0x80fc
    80f6:	3c 40 00 80 	mov	#32768,	r12	;#0x8000
    80fa:	8d 12       	call	r13		;

000080fc <.L21>:
    80fc:	d2 43 14 40 	mov.b	#1,	&0x4014	;r3 As==01

00008100 <.L17>:
    8100:	30 40 20 83 	br	#0x8320		;

00008104 <.L20>:
    8104:	1c 53       	inc	r12		;
    8106:	82 4c 16 40 	mov	r12,	&0x4016	;
    810a:	0c 5c       	rla	r12		;
    810c:	0c 59       	add	r9,	r12	;
    810e:	2c 4c       	mov	@r12,	r12	;
    8110:	8c 12       	call	r12		;
    8112:	30 40 e2 80 	br	#0x80e2		;

00008116 <call___do_global_dtors_aux>:
    8116:	3e 40 00 00 	mov	#0,	r14	;
    811a:	0e 93       	cmp	#0,	r14	;r3 As==00
    811c:	05 24       	jz	$+12     	;abs 0x8128
    811e:	3d 40 18 40 	mov	#16408,	r13	;#0x4018
    8122:	3c 40 00 80 	mov	#32768,	r12	;#0x8000
    8126:	8e 12       	call	r14		;

00008128 <.L27>:
    8128:	b0 12 9a 80 	call	#32922		;#0x809a
    812c:	30 41       	ret			

0000812e <INT_Qwark>:

//-------------------------------------------------------------------------------------------------------------------------------------------//
//    QWARK Checkpoint Procedure: without stack: 215 cycles => First phase: 141 cycles - second phase: 74    , complete: 683.5 at 64B stack  //
//-------------------------------------------------------------------------------------------------------------------------------------------//

interrupt (QWARK_VECTOR) INT_Qwark(void) {
    812e:	0c 12       	push	r12		;

00008130 <.LCFI0>:

	/* Idempotency Tracking is disabled by default upon entering this context */
	LED_CTRL = 0x10;
    8130:	7c 40 90 00 	mov.b	#144,	r12	;#0x0090
    8134:	fc 40 10 00 	mov.b	#16,	0(r12)	;#0x0010
    8138:	00 00 

0000813a <.Loc.188.1>:
	//    FIRST PHASE OF THE COMMIT PROCESS																	       //
	//-------------------------------------------------------------------------------------------------------------//

	/*Store Registers into NV memory : Total: 70 cycles*/

	__asm__ __volatile__ ("mov r1,&0x6020");   		//SP/R1   4 cycles       =  9 cycles
    813a:	82 41 20 60 	mov	r1,	&0x6020	;

0000813e <.Loc.189.1>:
	__asm__ __volatile__ ("add #0x06,&0x6020");		//		  5 cycles
    813e:	b2 50 06 00 	add	#6,	&0x6020	;
    8142:	20 60 

00008144 <.Loc.190.1>:
	__asm__ __volatile__ ("mov 4(r1),&0x6022"); 	//PC/R0   6 cycles       = 21 cycles
    8144:	92 41 04 00 	mov	4(r1),	&0x6022	;
    8148:	22 60 

0000814a <.Loc.191.1>:
	__asm__ __volatile__ ("mov 2(r1),&0x6024"); 	//SR/R2   6 cycles
    814a:	92 41 02 00 	mov	2(r1),	&0x6024	;
    814e:	24 60 

00008150 <.Loc.192.1>:
	__asm__ __volatile__ ("mov r13 ,&0x6026"); 	    //R13	  4 cycles
    8150:	82 4d 26 60 	mov	r13,	&0x6026	;

00008154 <.Loc.193.1>:
	__asm__ __volatile__ ("mov 0(r1),&0x6028"); 	//R12	  5 cycles
    8154:	a2 41 28 60 	mov	@r1,	&0x6028	;

00008158 <.Loc.194.1>:
	__asm__ __volatile__ ("mov r4,&0x602A"); 		//R4	  4 cycles x 10 = 40 cycles
    8158:	82 44 2a 60 	mov	r4,	&0x602a	;

0000815c <.Loc.195.1>:
	__asm__ __volatile__ ("mov r5,&0x602C"); 		//R5
    815c:	82 45 2c 60 	mov	r5,	&0x602c	;

00008160 <.Loc.196.1>:
	__asm__ __volatile__ ("mov r6,&0x602E"); 		//R6
    8160:	82 46 2e 60 	mov	r6,	&0x602e	;

00008164 <.Loc.197.1>:
	__asm__ __volatile__ ("mov r7,&0x6030"); 		//R7
    8164:	82 47 30 60 	mov	r7,	&0x6030	;

00008168 <.Loc.198.1>:
	__asm__ __volatile__ ("mov r8,&0x6032"); 		//R8
    8168:	82 48 32 60 	mov	r8,	&0x6032	;

0000816c <.Loc.199.1>:
	__asm__ __volatile__ ("mov r9,&0x6034"); 		//R9
    816c:	82 49 34 60 	mov	r9,	&0x6034	;

00008170 <.Loc.200.1>:
	__asm__ __volatile__ ("mov r10,&0x6036"); 		//R10
    8170:	82 4a 36 60 	mov	r10,	&0x6036	;

00008174 <.Loc.201.1>:
	__asm__ __volatile__ ("mov r11,&0x6038"); 		//R11
    8174:	82 4b 38 60 	mov	r11,	&0x6038	;

00008178 <.Loc.203.1>:

	__asm__ __volatile__ ("mov r14,&0x603E"); 		//R14
    8178:	82 4e 3e 60 	mov	r14,	&0x603e	;

0000817c <.Loc.204.1>:
	__asm__ __volatile__ ("mov r15,&0x6040"); 		//R15
    817c:	82 4f 40 60 	mov	r15,	&0x6040	;

00008180 <.Loc.206.1>:

	LED_CTRL = 0x11;
    8180:	7c 40 90 00 	mov.b	#144,	r12	;#0x0090
    8184:	fc 40 11 00 	mov.b	#17,	0(r12)	;#0x0011
    8188:	00 00 

0000818a <.Loc.210.1>:

	//Get the index indicating the amount of violations stored (9 cycles)

	__asm__ __volatile__ ("mov &0x0190, r14");		// 3 cycles
    818a:	1e 42 90 01 	mov	&0x0190,r14	;0x0190

0000818e <.Loc.211.1>:
	__asm__ __volatile__ ("RRA r14");				// 1 cycle
    818e:	0e 11       	rra	r14		;

00008190 <.Loc.212.1>:
	__asm__ __volatile__ ("mov.b r14, &0x601F");	// 4 cycles
    8190:	c2 4e 1f 60 	mov.b	r14,	&0x601f	;

00008194 <.Loc.213.1>:
	__asm__ __volatile__ ("mov r14, r15 ");		    // 1 cycle (save the index for later)
    8194:	0f 4e       	mov	r14,	r15	;

00008196 <.Loc.215.1>:

	LED_CTRL = 0x12;
    8196:	7c 40 90 00 	mov.b	#144,	r12	;#0x0090
    819a:	fc 40 12 00 	mov.b	#18,	0(r12)	;#0x0012
    819e:	00 00 

000081a0 <.Loc.219.1>:

	/* Copy the addresses to the scratchpad : 		 Total worst case: 77 cycles */
	/* Setup registers for copy*/
	__asm__ __volatile__ ("tst r14 ");     		       // 1 cycle
    81a0:	0e 93       	cmp	#0,	r14	;r3 As==00

000081a2 <.Loc.220.1>:
	__asm__ __volatile__ ("jz  _chkpt_stack");		   // 2 cycles
    81a2:	0f 24       	jz	$+32     	;abs 0x81c2

000081a4 <.Loc.223.1>:


	__asm__ __volatile__ ("mov #0x0192, r12");		  // 2 cycles
    81a4:	3c 40 92 01 	mov	#402,	r12	;#0x0192

000081a8 <.Loc.224.1>:
	__asm__ __volatile__ ("mov #0x6010, r13");		  // 2 cycles
    81a8:	3d 40 10 60 	mov	#24592,	r13	;#0x6010

000081ac <_scratchpad_addr_cpy>:

	__asm__ __volatile__ ("_scratchpad_addr_cpy:");   // Each iteration takes 10 cycles - Worst case 70 cycles

	__asm__ __volatile__ ("mov @r12+2, @r13");         // 5 cycles
    81ac:	bd 4c 00 00 	mov	@r12+,	0(r13)	;

000081b0 <.Loc.229.1>:
	__asm__ __volatile__ ("incd r13");  		       // 1 cycle
    81b0:	2d 53       	incd	r13		;

000081b2 <.Loc.230.1>:
	__asm__ __volatile__ ("dec r14 ");      	       // 1 cycle
    81b2:	1e 83       	dec	r14		;

000081b4 <.Loc.231.1>:
	__asm__ __volatile__ ("tst r14 ");     		       // 1 cycle
    81b4:	0e 93       	cmp	#0,	r14	;r3 As==00

000081b6 <.Loc.232.1>:
	__asm__ __volatile__ ("jnz  _scratchpad_addr_cpy");// 2 cycles
    81b6:	fa 23       	jnz	$-10     	;abs 0x81ac

000081b8 <.Loc.236.1>:

	/* 1.3 .- Checkpoint the Stack (FULL COPY / no segmentation yet) : 64B stack take approximately 466 cycles*/

	LED_CTRL = 0x13;
    81b8:	7c 40 90 00 	mov.b	#144,	r12	;#0x0090
    81bc:	fc 40 13 00 	mov.b	#19,	0(r12)	;#0x0013
    81c0:	00 00 

000081c2 <_chkpt_stack>:

	__asm__ __volatile__ ("_chkpt_stack:");

	__asm__ __volatile__ ("mov &0X6020, r12"); 		//Get the current SP - 3 cycles
    81c2:	1c 42 20 60 	mov	&0x6020,r12	;0x6020

000081c6 <.Loc.241.1>:
	__asm__ __volatile__ ("mov #0x7FFE, r14");		//2 cycles
    81c6:	3e 40 fe 7f 	mov	#32766,	r14	;#0x7ffe

000081ca <.Loc.242.1>:
	__asm__ __volatile__ ("mov #0x6FFE, r13");		//2 cycles
    81ca:	3d 40 fe 6f 	mov	#28670,	r13	;#0x6ffe

000081ce <.Loc.244.1>:

	__asm__ __volatile__ ("decd r12");				//1 cycle
    81ce:	2c 83       	decd	r12		;

000081d0 <__copy_stack>:

	__asm__ __volatile__ ("__copy_stack:");

	__asm__ __volatile__ ("cmp r14,r12");	   		  //compare and verify if the base has been reached - 1 cycle
    81d0:	0c 9e       	cmp	r14,	r12	;

000081d2 <.Loc.249.1>:
	__asm__ __volatile__ ("jz __copy_stack_complete");//2 cycles
    81d2:	06 24       	jz	$+14     	;abs 0x81e0

000081d4 <.Loc.251.1>:

	__asm__ __volatile__ ("mov @r14,@r13");			  //5 cycles
    81d4:	ad 4e 00 00 	mov	@r14,	0(r13)	;

000081d8 <.Loc.253.1>:

	__asm__ __volatile__ ("decd r13");				  //1 cycle
    81d8:	2d 83       	decd	r13		;

000081da <.Loc.254.1>:
	__asm__ __volatile__ ("decd r14");				  //1 cycle
    81da:	2e 83       	decd	r14		;

000081dc <.Loc.255.1>:
	__asm__ __volatile__ ("br #__copy_stack");		  //2 cycle
    81dc:	30 40 d0 81 	br	#0x81d0		;

000081e0 <__copy_stack_complete>:

	__asm__ __volatile__ ("__copy_stack_complete:");

	LED_CTRL = 0x14;
    81e0:	7c 40 90 00 	mov.b	#144,	r12	;#0x0090
    81e4:	fc 40 14 00 	mov.b	#20,	0(r12)	;#0x0014
    81e8:	00 00 

000081ea <.Loc.266.1>:
	//-------------------------------------------------------------------------------------------------------------//
	//    FIRST PHASE COMPLETED	: Set Binary Semaphore: 1														   //
	//-------------------------------------------------------------------------------------------------------------//

	/* after setting this bit, it is possible to reproduce the checkpoint even if it fails halfway through */
	__asm__ __volatile__ ("mov.b #0x01, &0x601E"); //4 cycles
    81ea:	d2 43 1e 60 	mov.b	#1,	&0x601e	;r3 As==01

000081ee <.Loc.271.1>:

	//-------------------------------------------------------------------------------------------------------------//
	//    SECOND PHASE OF THE COMMIT PROCESS																	   //
	//-------------------------------------------------------------------------------------------------------------//
	LED_CTRL = 0x15;
    81ee:	7c 40 90 00 	mov.b	#144,	r12	;#0x0090
    81f2:	fc 40 15 00 	mov.b	#21,	0(r12)	;#0x0015
    81f6:	00 00 

000081f8 <.Loc.273.1>:

	__asm__ __volatile__ ("tst r15 ");     		           // 2 cycles
    81f8:	0f 93       	cmp	#0,	r15	;r3 As==00

000081fa <.Loc.274.1>:
	__asm__ __volatile__ ("jz  _chkpt_finished");		   // 2 cycles
    81fa:	0a 24       	jz	$+22     	;abs 0x8210

000081fc <.Loc.276.1>:

	__asm__ __volatile__ ("mov #0x6010,  r12 ");			// 2 cycles
    81fc:	3c 40 10 60 	mov	#24592,	r12	;#0x6010

00008200 <.Loc.277.1>:
	__asm__ __volatile__ ("mov #0x6000,  r14 ");			// 2 cycles
    8200:	3e 40 00 60 	mov	#24576,	r14	;#0x6000

00008204 <_second_phase_commit_strt>:

	__asm__ __volatile__ ("_second_phase_commit_strt:");    // Worst case: 84 cycles( w/o logic)

	__asm__ __volatile__ ("mov @r12+2,  r13 ");   			// 2 cycles
    8204:	3d 4c       	mov	@r12+,	r13	;

00008206 <.Loc.282.1>:
	__asm__ __volatile__ ("mov @r14+2, @r13 ");    			// 5 cycles
    8206:	bd 4e 00 00 	mov	@r14+,	0(r13)	;

0000820a <.Loc.284.1>:

	__asm__ __volatile__ ("dec r15");    					// 1 cycles
    820a:	1f 83       	dec	r15		;

0000820c <.Loc.285.1>:
	__asm__ __volatile__ ("tst r15");    					// 2 cycles
    820c:	0f 93       	cmp	#0,	r15	;r3 As==00

0000820e <.Loc.286.1>:
	__asm__ __volatile__ ("jnz  _second_phase_commit_strt");// 2 cycles
    820e:	fa 23       	jnz	$-10     	;abs 0x8204

00008210 <_chkpt_finished>:
	//    CHECKPOINT COMPLETED	- Binary Semaphore set to 2														   //
	//-------------------------------------------------------------------------------------------------------------//
	__asm__ __volatile__ ("_chkpt_finished:");// 2 cycles

	/* Set second phase complete Bit - Atomic Flag*/
	__asm__ __volatile__ ("mov.b #0x02, &0x601E");  //4 cycles
    8210:	e2 43 1e 60 	mov.b	#2,	&0x601e	;r3 As==10

00008214 <.Loc.298.1>:

	/* This is to continue operation. If at this point a power failure happens, the system can re-start*/
	/* Clear index counter, and enable Idempotency tracking*/
	__asm__ __volatile__ ("mov #0x0001, &0x0190");
    8214:	92 43 90 01 	mov	#1,	&0x0190	;r3 As==01

00008218 <.Loc.299.1>:
	__asm__ __volatile__ ("mov &0x6026,r13"); 	    //Re-establish r13
    8218:	1d 42 26 60 	mov	&0x6026,r13	;0x6026

0000821c <.Loc.300.1>:
	__asm__ __volatile__ ("mov &0x603E,r14"); 	    //Re-establish r14
    821c:	1e 42 3e 60 	mov	&0x603e,r14	;0x603e

00008220 <.Loc.301.1>:
	__asm__ __volatile__ ("mov &0x6040,r15"); 	    //Re-establish r15 (3 cycles)
    8220:	1f 42 40 60 	mov	&0x6040,r15	;0x6040

00008224 <.Loc.304.1>:

	//to do: indicate checkpoint as invalid upon entering
	LED_CTRL = 0xF0;
    8224:	7c 40 90 00 	mov.b	#144,	r12	;#0x0090
    8228:	fc 40 f0 ff 	mov.b	#65520,	0(r12)	;#0xfff0
    822c:	00 00 

0000822e <.Loc.306.1>:

}
    822e:	03 43       	nop			
    8230:	3c 41       	pop	r12		;
    8232:	00 13       	reti			

00008234 <dummy_function>:

void dummy_function(void){
    8234:	31 80 42 00 	sub	#66,	r1	;#0x0042

00008238 <.LCFI1>:
	int var=0xAA;
    8238:	b1 40 aa 00 	mov	#170,	64(r1)	;#0x00aa, 0x0040
    823c:	40 00 

0000823e <.Loc.311.1>:
	int array[32];
	for(var=0;var<31;var++)
    823e:	81 43 40 00 	mov	#0,	64(r1)	;r3 As==00, 0x0040
    8242:	30 40 62 82 	br	#0x8262		;

00008246 <.L4>:
	{
		array[var] = 0xFECA;
    8246:	1c 41 40 00 	mov	64(r1),	r12	;0x00040
    824a:	0c 5c       	rla	r12		;
    824c:	7d 40 42 00 	mov.b	#66,	r13	;#0x0042
    8250:	0d 51       	add	r1,	r13	;
    8252:	0c 5d       	add	r13,	r12	;
    8254:	3c 50 be ff 	add	#65470,	r12	;#0xffbe
    8258:	bc 40 ca fe 	mov	#65226,	0(r12)	;#0xfeca
    825c:	00 00 

0000825e <.Loc.311.1>:
}

void dummy_function(void){
	int var=0xAA;
	int array[32];
	for(var=0;var<31;var++)
    825e:	91 53 40 00 	inc	64(r1)		;

00008262 <.L3>:
    8262:	7c 40 1e 00 	mov.b	#30,	r12	;#0x001e
    8266:	1c 91 40 00 	cmp	64(r1),	r12	;0x00040
    826a:	ed 37       	jge	$-36     	;abs 0x8246

0000826c <.Loc.315.1>:
	{
		array[var] = 0xFECA;
	}
	if(var9){
    826c:	1c 42 10 40 	mov	&0x4010,r12	;0x4010
    8270:	0c 93       	cmp	#0,	r12	;r3 As==00
    8272:	03 24       	jz	$+8      	;abs 0x827a

00008274 <.Loc.316.1>:
			  var9 = 0x07;
    8274:	b2 40 07 00 	mov	#7,	&0x4010	;
    8278:	10 40 

0000827a <.L6>:
			}
}
    827a:	03 43       	nop			
    827c:	31 50 42 00 	add	#66,	r1	;#0x0042
    8280:	30 41       	ret			

00008282 <main>:

int main()
{
    //WDTCTL = WDTPW | WDTHOLD; // Stop WDT
	//Enable Idempotency Tracking
	__asm__ __volatile__ ("nop");
    8282:	03 43       	nop			

00008284 <.Loc.326.1>:
  	eint();
    8284:	32 d2       	eint			
    8286:	03 43       	nop			

00008288 <.Loc.327.1>:
	QWARK_CTL = 0x01;
    8288:	3c 40 90 01 	mov	#400,	r12	;#0x0190
    828c:	9c 43 00 00 	mov	#1,	0(r12)	;r3 As==01

00008290 <.Loc.329.1>:

	if(var1){
    8290:	5c 42 02 40 	mov.b	&0x4002,r12	;0x4002
    8294:	0c 93       	cmp	#0,	r12	;r3 As==00
    8296:	03 24       	jz	$+8      	;abs 0x829e

00008298 <.Loc.330.1>:
	  var1 = 0xAA;
    8298:	f2 40 aa ff 	mov.b	#65450,	&0x4002	;#0xffaa
    829c:	02 40 

0000829e <.L8>:
	}

	if(var2){
    829e:	5c 42 03 40 	mov.b	&0x4003,r12	;0x4003
    82a2:	0c 93       	cmp	#0,	r12	;r3 As==00
    82a4:	03 24       	jz	$+8      	;abs 0x82ac

000082a6 <.Loc.334.1>:
	  var2 = 0xBB;
    82a6:	f2 40 bb ff 	mov.b	#65467,	&0x4003	;#0xffbb
    82aa:	03 40 

000082ac <.L9>:
	}

	if(var2 == 0xBB)
    82ac:	5c 42 03 40 	mov.b	&0x4003,r12	;0x4003
    82b0:	7c 90 bb ff 	cmp.b	#65467,	r12	;#0xffbb
    82b4:	05 20       	jnz	$+12     	;abs 0x82c0

000082b6 <.Loc.338.1>:
		LED_CTRL = 0xAA;
    82b6:	7c 40 90 00 	mov.b	#144,	r12	;#0x0090
    82ba:	fc 40 aa ff 	mov.b	#65450,	0(r12)	;#0xffaa
    82be:	00 00 

000082c0 <.L10>:


		if(var3){
    82c0:	1c 42 04 40 	mov	&0x4004,r12	;0x4004
    82c4:	0c 93       	cmp	#0,	r12	;r3 As==00
    82c6:	03 24       	jz	$+8      	;abs 0x82ce

000082c8 <.Loc.342.1>:
		  var3 = 0x03;
    82c8:	b2 40 03 00 	mov	#3,	&0x4004	;
    82cc:	04 40 

000082ce <.L11>:
		}

		if(var4){
    82ce:	1c 42 06 40 	mov	&0x4006,r12	;0x4006
    82d2:	0c 93       	cmp	#0,	r12	;r3 As==00
    82d4:	02 24       	jz	$+6      	;abs 0x82da

000082d6 <.Loc.346.1>:
		  var4 = 0x04;
    82d6:	a2 42 06 40 	mov	#4,	&0x4006	;r2 As==10

000082da <.L12>:
		}

		if(var5){
    82da:	1c 42 08 40 	mov	&0x4008,r12	;0x4008
    82de:	0c 93       	cmp	#0,	r12	;r3 As==00
    82e0:	03 24       	jz	$+8      	;abs 0x82e8

000082e2 <.Loc.350.1>:
		  var5 = 0x05;
    82e2:	b2 40 05 00 	mov	#5,	&0x4008	;
    82e6:	08 40 

000082e8 <.L13>:
		}

		if(var6){
    82e8:	1c 42 0a 40 	mov	&0x400a,r12	;0x400a
    82ec:	0c 93       	cmp	#0,	r12	;r3 As==00
    82ee:	03 24       	jz	$+8      	;abs 0x82f6

000082f0 <.Loc.354.1>:
		  var6 = 0x06;
    82f0:	b2 40 06 00 	mov	#6,	&0x400a	;
    82f4:	0a 40 

000082f6 <.L14>:
		}

		if(var7){
    82f6:	1c 42 0c 40 	mov	&0x400c,r12	;0x400c
    82fa:	0c 93       	cmp	#0,	r12	;r3 As==00
    82fc:	03 24       	jz	$+8      	;abs 0x8304

000082fe <.Loc.358.1>:
		  var7 = 0x07;
    82fe:	b2 40 07 00 	mov	#7,	&0x400c	;
    8302:	0c 40 

00008304 <.L15>:
		}
		//dummy_function();

		if(var8){
    8304:	1c 42 0e 40 	mov	&0x400e,r12	;0x400e
    8308:	0c 93       	cmp	#0,	r12	;r3 As==00
    830a:	03 24       	jz	$+8      	;abs 0x8312

0000830c <.Loc.363.1>:
		  var8 = 0x07;
    830c:	b2 40 07 00 	mov	#7,	&0x400e	;
    8310:	0e 40 

00008312 <.L16>:
		}
	while(1);
    8312:	30 40 12 83 	br	#0x8312		;

00008316 <__mspabi_func_epilog_7>:
    8316:	34 41       	pop	r4		;

00008318 <__mspabi_func_epilog_6>:
    8318:	35 41       	pop	r5		;

0000831a <__mspabi_func_epilog_5>:
    831a:	36 41       	pop	r6		;

0000831c <__mspabi_func_epilog_4>:
    831c:	37 41       	pop	r7		;

0000831e <__mspabi_func_epilog_3>:
    831e:	38 41       	pop	r8		;

00008320 <__mspabi_func_epilog_2>:
    8320:	39 41       	pop	r9		;

00008322 <__mspabi_func_epilog_1>:
    8322:	3a 41       	pop	r10		;
    8324:	30 41       	ret			

00008326 <__mspabi_srli_15>:
    8326:	12 c3       	clrc			
    8328:	0c 10       	rrc	r12		;

0000832a <__mspabi_srli_14>:
    832a:	12 c3       	clrc			
    832c:	0c 10       	rrc	r12		;

0000832e <__mspabi_srli_13>:
    832e:	12 c3       	clrc			
    8330:	0c 10       	rrc	r12		;

00008332 <__mspabi_srli_12>:
    8332:	12 c3       	clrc			
    8334:	0c 10       	rrc	r12		;

00008336 <__mspabi_srli_11>:
    8336:	12 c3       	clrc			
    8338:	0c 10       	rrc	r12		;

0000833a <__mspabi_srli_10>:
    833a:	12 c3       	clrc			
    833c:	0c 10       	rrc	r12		;

0000833e <__mspabi_srli_9>:
    833e:	12 c3       	clrc			
    8340:	0c 10       	rrc	r12		;

00008342 <__mspabi_srli_8>:
    8342:	12 c3       	clrc			
    8344:	0c 10       	rrc	r12		;

00008346 <__mspabi_srli_7>:
    8346:	12 c3       	clrc			
    8348:	0c 10       	rrc	r12		;

0000834a <__mspabi_srli_6>:
    834a:	12 c3       	clrc			
    834c:	0c 10       	rrc	r12		;

0000834e <__mspabi_srli_5>:
    834e:	12 c3       	clrc			
    8350:	0c 10       	rrc	r12		;

00008352 <__mspabi_srli_4>:
    8352:	12 c3       	clrc			
    8354:	0c 10       	rrc	r12		;

00008356 <__mspabi_srli_3>:
    8356:	12 c3       	clrc			
    8358:	0c 10       	rrc	r12		;

0000835a <__mspabi_srli_2>:
    835a:	12 c3       	clrc			
    835c:	0c 10       	rrc	r12		;

0000835e <__mspabi_srli_1>:
    835e:	12 c3       	clrc			
    8360:	0c 10       	rrc	r12		;
    8362:	30 41       	ret			

00008364 <.L11>:
    8364:	3d 53       	add	#-1,	r13	;r3 As==11
    8366:	12 c3       	clrc			
    8368:	0c 10       	rrc	r12		;

0000836a <__mspabi_srli>:
    836a:	0d 93       	cmp	#0,	r13	;r3 As==00
    836c:	fb 23       	jnz	$-8      	;abs 0x8364
    836e:	30 41       	ret			

00008370 <__mspabi_srll_15>:
    8370:	12 c3       	clrc			
    8372:	0d 10       	rrc	r13		;
    8374:	0c 10       	rrc	r12		;

00008376 <__mspabi_srll_14>:
    8376:	12 c3       	clrc			
    8378:	0d 10       	rrc	r13		;
    837a:	0c 10       	rrc	r12		;

0000837c <__mspabi_srll_13>:
    837c:	12 c3       	clrc			
    837e:	0d 10       	rrc	r13		;
    8380:	0c 10       	rrc	r12		;

00008382 <__mspabi_srll_12>:
    8382:	12 c3       	clrc			
    8384:	0d 10       	rrc	r13		;
    8386:	0c 10       	rrc	r12		;

00008388 <__mspabi_srll_11>:
    8388:	12 c3       	clrc			
    838a:	0d 10       	rrc	r13		;
    838c:	0c 10       	rrc	r12		;

0000838e <__mspabi_srll_10>:
    838e:	12 c3       	clrc			
    8390:	0d 10       	rrc	r13		;
    8392:	0c 10       	rrc	r12		;

00008394 <__mspabi_srll_9>:
    8394:	12 c3       	clrc			
    8396:	0d 10       	rrc	r13		;
    8398:	0c 10       	rrc	r12		;

0000839a <__mspabi_srll_8>:
    839a:	12 c3       	clrc			
    839c:	0d 10       	rrc	r13		;
    839e:	0c 10       	rrc	r12		;

000083a0 <__mspabi_srll_7>:
    83a0:	12 c3       	clrc			
    83a2:	0d 10       	rrc	r13		;
    83a4:	0c 10       	rrc	r12		;

000083a6 <__mspabi_srll_6>:
    83a6:	12 c3       	clrc			
    83a8:	0d 10       	rrc	r13		;
    83aa:	0c 10       	rrc	r12		;

000083ac <__mspabi_srll_5>:
    83ac:	12 c3       	clrc			
    83ae:	0d 10       	rrc	r13		;
    83b0:	0c 10       	rrc	r12		;

000083b2 <__mspabi_srll_4>:
    83b2:	12 c3       	clrc			
    83b4:	0d 10       	rrc	r13		;
    83b6:	0c 10       	rrc	r12		;

000083b8 <__mspabi_srll_3>:
    83b8:	12 c3       	clrc			
    83ba:	0d 10       	rrc	r13		;
    83bc:	0c 10       	rrc	r12		;

000083be <__mspabi_srll_2>:
    83be:	12 c3       	clrc			
    83c0:	0d 10       	rrc	r13		;
    83c2:	0c 10       	rrc	r12		;

000083c4 <__mspabi_srll_1>:
    83c4:	12 c3       	clrc			
    83c6:	0d 10       	rrc	r13		;
    83c8:	0c 10       	rrc	r12		;
    83ca:	30 41       	ret			

000083cc <.L12>:
    83cc:	3e 53       	add	#-1,	r14	;r3 As==11
    83ce:	12 c3       	clrc			
    83d0:	0d 10       	rrc	r13		;
    83d2:	0c 10       	rrc	r12		;

000083d4 <__mspabi_srll>:
    83d4:	0e 93       	cmp	#0,	r14	;r3 As==00
    83d6:	fa 23       	jnz	$-10     	;abs 0x83cc
    83d8:	30 41       	ret			

000083da <memmove>:
    83da:	0d 9c       	cmp	r12,	r13	;
    83dc:	0a 28       	jnc	$+22     	;abs 0x83f2

000083de <.L5>:
    83de:	0f 4c       	mov	r12,	r15	;
    83e0:	0e 5c       	add	r12,	r14	;

000083e2 <.L3>:
    83e2:	0e 9f       	cmp	r15,	r14	;
    83e4:	0d 24       	jz	$+28     	;abs 0x8400

000083e6 <.LVL3>:
    83e6:	ef 4d 00 00 	mov.b	@r13,	0(r15)	;
    83ea:	1f 53       	inc	r15		;

000083ec <.LVL4>:
    83ec:	1d 53       	inc	r13		;
    83ee:	30 40 e2 83 	br	#0x83e2		;

000083f2 <.L2>:
    83f2:	0f 4d       	mov	r13,	r15	;
    83f4:	0f 5e       	add	r14,	r15	;
    83f6:	0c 9f       	cmp	r15,	r12	;
    83f8:	f2 2f       	jc	$-26     	;abs 0x83de

000083fa <.L4>:
    83fa:	3e 53       	add	#-1,	r14	;r3 As==11

000083fc <.LVL7>:
    83fc:	3e 93       	cmp	#-1,	r14	;r3 As==11
    83fe:	01 20       	jnz	$+4      	;abs 0x8402

00008400 <.L10>:
    8400:	30 41       	ret			

00008402 <.L6>:
    8402:	0b 4c       	mov	r12,	r11	;
    8404:	0b 5e       	add	r14,	r11	;
    8406:	0f 4d       	mov	r13,	r15	;
    8408:	0f 5e       	add	r14,	r15	;
    840a:	eb 4f 00 00 	mov.b	@r15,	0(r11)	;
    840e:	30 40 fa 83 	br	#0x83fa		;

00008412 <memset>:
    8412:	0f 4c       	mov	r12,	r15	;
    8414:	0e 5c       	add	r12,	r14	;

00008416 <.L2>:
    8416:	0f 9e       	cmp	r14,	r15	;
    8418:	01 20       	jnz	$+4      	;abs 0x841c

0000841a <.Loc.104.1>:
    841a:	30 41       	ret			

0000841c <.L3>:
    841c:	cf 4d 00 00 	mov.b	r13,	0(r15)	;
    8420:	1f 53       	inc	r15		;

00008422 <.LVL4>:
    8422:	30 40 16 84 	br	#0x8416		;

00008426 <L0>:
    8426:	30 41       	ret			

00008428 <__do_global_ctors_aux>:
    8428:	0a 12       	push	r10		;
    842a:	3a 40 08 80 	mov	#32776,	r10	;#0x8008

0000842e <.L2>:
    842e:	2c 4a       	mov	@r10,	r12	;
    8430:	3c 93       	cmp	#-1,	r12	;r3 As==11
    8432:	02 20       	jnz	$+6      	;abs 0x8438
    8434:	3a 41       	pop	r10		;
    8436:	30 41       	ret			

00008438 <.L3>:
    8438:	8c 12       	call	r12		;
    843a:	3a 50 fe ff 	add	#65534,	r10	;#0xfffe
    843e:	30 40 2e 84 	br	#0x842e		;

00008442 <call___do_global_ctors_aux>:
    8442:	b0 12 16 81 	call	#33046		;#0x8116
    8446:	b0 12 28 84 	call	#33832		;#0x8428

0000844a <L0>:
    844a:	b0 12 4e 80 	call	#32846		;#0x804e

0000844e <.Loc.19.1>:
    844e:	b0 12 40 80 	call	#32832		;#0x8040

00008452 <.Loc.20.1>:
    8452:	30 41       	ret			

00008454 <__msp430_fini>:
    8454:	b0 12 5c 80 	call	#32860		;#0x805c

00008458 <L0>:
    8458:	b0 12 c8 80 	call	#32968		;#0x80c8

0000845c <L0>:
    845c:	30 41       	ret			
