
leds.elf:     file format elf32-msp430

SYMBOL TABLE:
0000ffe8 l    d  __interrupt_vector_5	00000000 __interrupt_vector_5
0000fffe l    d  __reset_vector	00000000 __reset_vector
00008000 l    d  .rodata	00000000 .rodata
00008010 l    d  .text	00000000 .text
00004000 l    d  .data	00000000 .data
00004014 l    d  .bss	00000000 .bss
00004026 l    d  .noinit	00000000 .noinit
00000000 l    d  .MP430.attributes	00000000 .MP430.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_macinfo	00000000 .debug_macinfo
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 /opt/ti/ccsv8/tools/compiler/msp430-gcc-7.3.1.24_linux64/bin/../lib/gcc/msp430-elf/7.3.1/../../../../msp430-elf/lib/430/crt0.o
0000fffe l       __reset_vector	00000000 __msp430_resetvec_hook
0000806c l       .text	00000000 _msp430_run_array
0000807a l       .text	00000000 _msp430_run_done
00000000 l    df *ABS*	00000000 /opt/ti/ccsv8/tools/compiler/msp430-gcc-7.3.1.24_linux64/bin/../lib/gcc/msp430-elf/7.3.1/430/crtbegin.o
00008008 l     O .rodata	00000000 __CTOR_LIST__
0000800c l     O .rodata	00000000 __DTOR_LIST__
00008000 l     O .rodata	00000000 __EH_FRAME_BEGIN__
00008558 l     O .text	00000000 __TMC_LIST__
00008080 l     F .text	00000000 deregister_tm_clones
0000809a l     F .text	00000000 register_tm_clones
000080c8 l     F .text	00000000 __do_global_dtors_aux
00004014 l     O .bss	00000000 completed.3056
00004016 l     O .bss	00000000 dtor_idx.3058
00008116 l     F .text	00000000 call___do_global_dtors_aux
00008116 l     F .text	00000000 frame_dummy
00004018 l     O .bss	00000000 object.3071
0000812e l     F .text	00000000 call_frame_dummy
00000000 l    df *ABS*	00000000 /opt/ti/ccsv8/tools/compiler/msp430-gcc-7.3.1.24_linux64/bin/../lib/gcc/msp430-elf/7.3.1/430/crtend.o
0000800a l     O .rodata	00000000 __CTOR_END__
00008000 l     O .rodata	00000000 __FRAME_END__
00008522 l     F .text	00000000 __do_global_ctors_aux
0000853c l     F .text	00000000 call___do_global_ctors_aux
00000000 l    df *ABS*	00000000 crt_bss.o
00000000 l    df *ABS*	00000000 crt_movedata.o
00000000 l    df *ABS*	00000000 crt_main.o
00000000 l    df *ABS*	00000000 srli.o
00000000 l    df *ABS*	00000000 lib_a-memmove.o
00000000 l    df *ABS*	00000000 lib_a-memset.o
00000000 l    df *ABS*	00000000 /opt/ti/ccsv8/tools/compiler/msp430-gcc-7.3.1.24_linux64/bin/../lib/gcc/msp430-elf/7.3.1/../../../../msp430-elf/lib/430/crtn.o
0000400a g     O .data	00000002 var5
00008438 g       .text	00000000 .hidden __mspabi_srli_9
00008488 g       .text	00000000 .hidden __mspabi_srll_10
00008434 g       .text	00000000 .hidden __mspabi_srli_10
00008420 g       .text	00000000 .hidden __mspabi_srli_15
000084d4 g     F .text	00000038 memmove
0000844c g       .text	00000000 .hidden __mspabi_srli_4
00008440 g       .text	00000000 .hidden __mspabi_srli_7
0000849a g       .text	00000000 .hidden __mspabi_srll_7
000084b2 g       .text	00000000 .hidden __mspabi_srll_3
00008412 g       .text	00000000 .hidden __mspabi_func_epilog_6
00008558 g     O .text	00000000 .hidden __TMC_END__
00008476 g       .text	00000000 .hidden __mspabi_srll_13
0000800e g     O .rodata	00000000 .hidden __DTOR_END__
00008004 g       .rodata	00000000 __fini_array_end
0000842c g       .text	00000000 .hidden __mspabi_srli_12
00008010 g     F .text	00000004 __crt0_start
00004000 g     O .data	00000000 .hidden __dso_handle
00008014 g     F .text	0000000e __crt0_init_bss
00000012 g       *ABS*	00000000 __bsssize
00008036 g     F .text	0000000a __crt0_call_init_then_main
00004002 g     O .data	00000002 var1
0000841c g       .text	00000000 .hidden __mspabi_func_epilog_1
00008418 g       .text	00000000 .hidden __mspabi_func_epilog_3
000084a6 g       .text	00000000 .hidden __mspabi_srll_5
00008464 g       .text	00000000 .hidden __mspabi_srli
00004008 g     O .data	00000002 var4
00008482 g       .text	00000000 .hidden __mspabi_srll_11
00004010 g     O .data	00000002 var8
00008448 g       .text	00000000 .hidden __mspabi_srli_5
00000000  w      *UND*	00000000 __deregister_frame_info
00004026 g       .noinit	00000000 end
00000000  w      *UND*	00000000 _ITM_registerTMCloneTable
000084a0 g       .text	00000000 .hidden __mspabi_srll_6
00004012 g     O .data	00000002 var9
00008010 g       .text	00000000 _start
0000805c g     F .text	00000000 _msp430_run_fini_array
00008458 g       .text	00000000 .hidden __mspabi_srli_1
00008470 g       .text	00000000 .hidden __mspabi_srll_14
00008424 g       .text	00000000 .hidden __mspabi_srli_14
00000014 g       *ABS*	00000000 __romdatacopysize
00008430 g       .text	00000000 .hidden __mspabi_srli_11
00000000  w      *UND*	00000000 _ITM_deregisterTMCloneTable
00008004 g       .rodata	00000000 __fini_array_start
00000000  w      *ABS*	00000000 __rom_highdatacopysize
0000853c g       .text	00000000 __msp430_init
0000850c g     F .text	00000014 memset
0000838a g     F .text	00000086 main
000084ac g       .text	00000000 .hidden __mspabi_srll_4
00008004 g       .rodata	00000000 __init_array_end
00008454 g       .text	00000000 .hidden __mspabi_srli_2
00000000  w      *ABS*	00000000 __high_bsssize
00004004 g     O .data	00000002 var2
0000400c g     O .data	00000002 var6
00000000  w      *ABS*	00000000 __rom_highdatastart
00004006 g     O .data	00000002 var3
00008558 g       .text	00000000 __msp430_fini_end
0000847c g       .text	00000000 .hidden __mspabi_srll_12
00008558 g       *ABS*	00000000 __romdatastart
0000400e g     O .data	00000002 var7
00008040 g     F .text	00000000 _msp430_run_init_array
00008444 g       .text	00000000 .hidden __mspabi_srli_6
00008004 g       .rodata	00000000 __preinit_array_end
00008450 g       .text	00000000 .hidden __mspabi_srli_3
00000000  w      *ABS*	00000000 __high_datastart
00000000  w      *ABS*	00000000 __upper_data_init
00004014 g       .bss	00000000 __bssstart
00008414 g       .text	00000000 .hidden __mspabi_func_epilog_5
00008000 g       .noinit	00000000 __stack
0000812e g     F .text	0000025c INT_Qwark
0000848e g       .text	00000000 .hidden __mspabi_srll_9
00004014 g       .data	00000000 _edata
0000854e g       .text	00000000 __msp430_init_end
000084ce g       .text	00000000 .hidden __mspabi_srll
00000000  w      *ABS*	00000000 __high_bssstart
0000846a g       .text	00000000 .hidden __mspabi_srll_15
00008004 g       .rodata	00000000 __init_array_start
00008428 g       .text	00000000 .hidden __mspabi_srli_13
00004000 g       .data	00000000 __datastart
00008494 g       .text	00000000 .hidden __mspabi_srll_8
000084be g       .text	00000000 .hidden __mspabi_srll_1
00008004 g       .rodata	00000000 __preinit_array_start
00008022 g     F .text	00000014 __crt0_movedata
0000841a g       .text	00000000 .hidden __mspabi_func_epilog_2
00000000  w      *UND*	00000000 __register_frame_info
0000804e g     F .text	00000000 _msp430_run_preinit_array
00008410 g       .text	00000000 .hidden __mspabi_func_epilog_7
00008416 g       .text	00000000 .hidden __mspabi_func_epilog_4
000084b8 g       .text	00000000 .hidden __mspabi_srll_2
0000854e g       .text	00000000 __msp430_fini
0000843c g       .text	00000000 .hidden __mspabi_srli_8



Disassembly of section __interrupt_vector_5:

0000ffe8 <__interrupt_vector_5>:
    ffe8:	2e 81       	interrupt service routine at 0x812e

Disassembly of section .text:

00008010 <__crt0_start>:
    8010:	31 40 00 80 	mov	#32768,	r1	;#0x8000

00008014 <__crt0_init_bss>:
    8014:	3c 40 14 40 	mov	#16404,	r12	;#0x4014

00008018 <.Loc.74.1>:
    8018:	0d 43       	clr	r13		;

0000801a <.Loc.75.1>:
    801a:	3e 40 12 00 	mov	#18,	r14	;#0x0012

0000801e <.Loc.79.1>:
    801e:	b0 12 0c 85 	call	#34060		;#0x850c

00008022 <__crt0_movedata>:
    8022:	3c 40 00 40 	mov	#16384,	r12	;#0x4000

00008026 <.Loc.116.1>:
    8026:	3d 40 58 85 	mov	#34136,	r13	;#0x8558

0000802a <.Loc.119.1>:
    802a:	0d 9c       	cmp	r12,	r13	;

0000802c <.Loc.120.1>:
    802c:	04 24       	jz	$+10     	;abs 0x8036

0000802e <.Loc.122.1>:
    802e:	3e 40 14 00 	mov	#20,	r14	;#0x0014

00008032 <.Loc.124.1>:
    8032:	b0 12 d4 84 	call	#34004		;#0x84d4

00008036 <__crt0_call_init_then_main>:
    8036:	b0 12 3c 85 	call	#34108		;#0x853c

0000803a <.Loc.196.1>:
    803a:	0c 43       	clr	r12		;

0000803c <.Loc.197.1>:
    803c:	b0 12 8a 83 	call	#33674		;#0x838a

00008040 <_msp430_run_init_array>:
    8040:	34 40 04 80 	mov	#32772,	r4	;#0x8004

00008044 <.Loc.224.1>:
    8044:	35 40 04 80 	mov	#32772,	r5	;#0x8004

00008048 <.Loc.225.1>:
    8048:	26 43       	mov	#2,	r6	;r3 As==10

0000804a <.Loc.226.1>:
    804a:	30 40 6c 80 	br	#0x806c		;

0000804e <_msp430_run_preinit_array>:
    804e:	34 40 04 80 	mov	#32772,	r4	;#0x8004

00008052 <.Loc.232.1>:
    8052:	35 40 04 80 	mov	#32772,	r5	;#0x8004

00008056 <.Loc.233.1>:
    8056:	26 43       	mov	#2,	r6	;r3 As==10

00008058 <.Loc.234.1>:
    8058:	30 40 6c 80 	br	#0x806c		;

0000805c <_msp430_run_fini_array>:
    805c:	34 40 04 80 	mov	#32772,	r4	;#0x8004

00008060 <.Loc.240.1>:
    8060:	35 40 04 80 	mov	#32772,	r5	;#0x8004

00008064 <.Loc.241.1>:
    8064:	36 40 fe ff 	mov	#65534,	r6	;#0xfffe

00008068 <.Loc.242.1>:
    8068:	30 40 6c 80 	br	#0x806c		;

0000806c <_msp430_run_array>:
    806c:	05 94       	cmp	r4,	r5	;

0000806e <.Loc.246.1>:
    806e:	05 24       	jz	$+12     	;abs 0x807a

00008070 <.Loc.247.1>:
    8070:	27 44       	mov	@r4,	r7	;

00008072 <.Loc.248.1>:
    8072:	04 56       	add	r6,	r4	;

00008074 <.Loc.249.1>:
    8074:	a7 12       	call	@r7		;

00008076 <.Loc.250.1>:
    8076:	10 40 f4 ff 	br	0xfff4		;PC rel. 0x806c

0000807a <_msp430_run_done>:
    807a:	30 41       	ret			

0000807c <L0>:
    807c:	30 41       	ret			
    807e:	30 41       	ret			

00008080 <deregister_tm_clones>:
    8080:	3c 40 58 85 	mov	#34136,	r12	;#0x8558
    8084:	3c 90 58 85 	cmp	#34136,	r12	;#0x8558
    8088:	07 24       	jz	$+16     	;abs 0x8098
    808a:	3d 40 00 00 	mov	#0,	r13	;
    808e:	0d 93       	cmp	#0,	r13	;r3 As==00
    8090:	03 24       	jz	$+8      	;abs 0x8098
    8092:	3c 40 58 85 	mov	#34136,	r12	;#0x8558
    8096:	8d 12       	call	r13		;

00008098 <.L1>:
    8098:	30 41       	ret			

0000809a <register_tm_clones>:
    809a:	0a 12       	push	r10		;
    809c:	3a 40 58 85 	mov	#34136,	r10	;#0x8558
    80a0:	3a 80 58 85 	sub	#34136,	r10	;#0x8558
    80a4:	0a 11       	rra	r10		;
    80a6:	0c 4a       	mov	r10,	r12	;
    80a8:	b0 12 20 84 	call	#33824		;#0x8420
    80ac:	0c 5a       	add	r10,	r12	;
    80ae:	0d 4c       	mov	r12,	r13	;
    80b0:	0d 11       	rra	r13		;
    80b2:	0d 93       	cmp	#0,	r13	;r3 As==00
    80b4:	07 24       	jz	$+16     	;abs 0x80c4
    80b6:	3e 40 00 00 	mov	#0,	r14	;
    80ba:	0e 93       	cmp	#0,	r14	;r3 As==00
    80bc:	03 24       	jz	$+8      	;abs 0x80c4
    80be:	3c 40 58 85 	mov	#34136,	r12	;#0x8558
    80c2:	8e 12       	call	r14		;

000080c4 <.L9>:
    80c4:	3a 41       	pop	r10		;
    80c6:	30 41       	ret			

000080c8 <__do_global_dtors_aux>:
    80c8:	0a 12       	push	r10		;
    80ca:	09 12       	push	r9		;
    80cc:	c2 93 14 40 	cmp.b	#0,	&0x4014	;r3 As==00
    80d0:	17 20       	jnz	$+48     	;abs 0x8100
    80d2:	3a 40 0e 80 	mov	#32782,	r10	;#0x800e
    80d6:	3a 80 0c 80 	sub	#32780,	r10	;#0x800c
    80da:	0a 11       	rra	r10		;
    80dc:	3a 53       	add	#-1,	r10	;r3 As==11
    80de:	39 40 0c 80 	mov	#32780,	r9	;#0x800c

000080e2 <.L19>:
    80e2:	1c 42 16 40 	mov	&0x4016,r12	;0x4016
    80e6:	0c 9a       	cmp	r10,	r12	;
    80e8:	0d 28       	jnc	$+28     	;abs 0x8104
    80ea:	b0 12 80 80 	call	#32896		;#0x8080
    80ee:	3d 40 00 00 	mov	#0,	r13	;
    80f2:	0d 93       	cmp	#0,	r13	;r3 As==00
    80f4:	03 24       	jz	$+8      	;abs 0x80fc
    80f6:	3c 40 00 80 	mov	#32768,	r12	;#0x8000
    80fa:	8d 12       	call	r13		;

000080fc <.L21>:
    80fc:	d2 43 14 40 	mov.b	#1,	&0x4014	;r3 As==01

00008100 <.L17>:
    8100:	30 40 1a 84 	br	#0x841a		;

00008104 <.L20>:
    8104:	1c 53       	inc	r12		;
    8106:	82 4c 16 40 	mov	r12,	&0x4016	;
    810a:	0c 5c       	rla	r12		;
    810c:	0c 59       	add	r9,	r12	;
    810e:	2c 4c       	mov	@r12,	r12	;
    8110:	8c 12       	call	r12		;
    8112:	30 40 e2 80 	br	#0x80e2		;

00008116 <call___do_global_dtors_aux>:
    8116:	3e 40 00 00 	mov	#0,	r14	;
    811a:	0e 93       	cmp	#0,	r14	;r3 As==00
    811c:	05 24       	jz	$+12     	;abs 0x8128
    811e:	3d 40 18 40 	mov	#16408,	r13	;#0x4018
    8122:	3c 40 00 80 	mov	#32768,	r12	;#0x8000
    8126:	8e 12       	call	r14		;

00008128 <.L27>:
    8128:	b0 12 9a 80 	call	#32922		;#0x809a
    812c:	30 41       	ret			

0000812e <INT_Qwark>:

//--------------------------------------------------//
//    QWARK Checkpoint Procedure                    //
//--------------------------------------------------//

interrupt (QWARK_VECTOR) INT_Qwark(void) {
    812e:	0d 12       	push	r13		;

00008130 <.LCFI0>:
    8130:	0c 12       	push	r12		;

00008132 <.LCFI1>:
    8132:	21 83       	decd	r1		;

00008134 <.LCFI2>:

	//Idempotency Tracking is disabled by default upon entering this context
    //Toggle LED to identify Checkpoint ISR

	LED_CTRL = 0x0F;
    8134:	7c 40 90 00 	mov.b	#144,	r12	;#0x0090
    8138:	fc 40 0f 00 	mov.b	#15,	0(r12)	;#0x000f
    813c:	00 00 

0000813e <.Loc.42.1>:
	int war_index = QWARK_WAR_CTR;
    813e:	3c 40 90 01 	mov	#400,	r12	;#0x0190
    8142:	2c 4c       	mov	@r12,	r12	;
    8144:	12 c3       	clrc			
    8146:	0c 10       	rrc	r12		;
    8148:	0d 4c       	mov	r12,	r13	;
    814a:	7d f0 07 00 	and.b	#7,	r13	;
    814e:	81 4d 00 00 	mov	r13,	0(r1)	;

00008152 <.Loc.44.1>:

	switch(war_index){
    8152:	2c 41       	mov	@r1,	r12	;
    8154:	3c 90 03 00 	cmp	#3,	r12	;
    8158:	37 24       	jz	$+112    	;abs 0x81c8
    815a:	7d 40 03 00 	mov.b	#3,	r13	;
    815e:	0d 9c       	cmp	r12,	r13	;
    8160:	09 38       	jl	$+20     	;abs 0x8174
    8162:	1c 93       	cmp	#1,	r12	;r3 As==01
    8164:	15 24       	jz	$+44     	;abs 0x8190
    8166:	5d 43       	mov.b	#1,	r13	;r3 As==01
    8168:	0d 9c       	cmp	r12,	r13	;
    816a:	1c 38       	jl	$+58     	;abs 0x81a4
    816c:	0c 93       	cmp	#0,	r12	;r3 As==00
    816e:	fe 24       	jz	$+510    	;abs 0x836c

00008170 <.Loc.91.1>:
	 	 	 QWARK_ADDR5 = (*(volatile unsigned int  *) 0x6008);
	 	 	 QWARK_ADDR6 = (*(volatile unsigned int  *) 0x600A);
	 	 	 QWARK_ADDR7 = (*(volatile unsigned int  *) 0x600C);
	 	 	 break;

	default: break;
    8170:	30 40 6e 83 	br	#0x836e		;

00008174 <.L4>:
    //Toggle LED to identify Checkpoint ISR

	LED_CTRL = 0x0F;
	int war_index = QWARK_WAR_CTR;

	switch(war_index){
    8174:	3c 90 05 00 	cmp	#5,	r12	;
    8178:	63 24       	jz	$+200    	;abs 0x8240
    817a:	3c 90 05 00 	cmp	#5,	r12	;
    817e:	3e 38       	jl	$+126    	;abs 0x81fc
    8180:	3c 90 06 00 	cmp	#6,	r12	;
    8184:	87 24       	jz	$+272    	;abs 0x8294
    8186:	3c 90 07 00 	cmp	#7,	r12	;
    818a:	b6 24       	jz	$+366    	;abs 0x82f8

0000818c <.Loc.91.1>:
	 	 	 QWARK_ADDR5 = (*(volatile unsigned int  *) 0x6008);
	 	 	 QWARK_ADDR6 = (*(volatile unsigned int  *) 0x600A);
	 	 	 QWARK_ADDR7 = (*(volatile unsigned int  *) 0x600C);
	 	 	 break;

	default: break;
    818c:	30 40 6e 83 	br	#0x836e		;

00008190 <.L5>:
	switch(war_index){

	case 0 :
			 break;

	case 1 : QWARK_ADDR1 = (*(volatile unsigned int  *) 0x6000);
    8190:	3c 40 00 60 	mov	#24576,	r12	;#0x6000
    8194:	2d 4c       	mov	@r12,	r13	;
    8196:	3c 40 92 01 	mov	#402,	r12	;#0x0192
    819a:	2c 4c       	mov	@r12,	r12	;
    819c:	8c 4d 00 00 	mov	r13,	0(r12)	;

000081a0 <.Loc.51.1>:

			 break;
    81a0:	30 40 6e 83 	br	#0x836e		;

000081a4 <.L6>:

	case 2 : QWARK_ADDR1 = (*(volatile unsigned int  *) 0x6000);
    81a4:	3c 40 00 60 	mov	#24576,	r12	;#0x6000
    81a8:	2d 4c       	mov	@r12,	r13	;
    81aa:	3c 40 92 01 	mov	#402,	r12	;#0x0192
    81ae:	2c 4c       	mov	@r12,	r12	;
    81b0:	8c 4d 00 00 	mov	r13,	0(r12)	;

000081b4 <.Loc.54.1>:
			 QWARK_ADDR2 = (*(volatile unsigned int  *) 0x6002);
    81b4:	3c 40 02 60 	mov	#24578,	r12	;#0x6002
    81b8:	2d 4c       	mov	@r12,	r13	;
    81ba:	3c 40 94 01 	mov	#404,	r12	;#0x0194
    81be:	2c 4c       	mov	@r12,	r12	;
    81c0:	8c 4d 00 00 	mov	r13,	0(r12)	;

000081c4 <.Loc.55.1>:
			 break;
    81c4:	30 40 6e 83 	br	#0x836e		;

000081c8 <.L3>:

	case 3 : QWARK_ADDR1 = (*(volatile unsigned int  *) 0x6000);
    81c8:	3c 40 00 60 	mov	#24576,	r12	;#0x6000
    81cc:	2d 4c       	mov	@r12,	r13	;
    81ce:	3c 40 92 01 	mov	#402,	r12	;#0x0192
    81d2:	2c 4c       	mov	@r12,	r12	;
    81d4:	8c 4d 00 00 	mov	r13,	0(r12)	;

000081d8 <.Loc.58.1>:
			 QWARK_ADDR2 = (*(volatile unsigned int  *) 0x6002);
    81d8:	3c 40 02 60 	mov	#24578,	r12	;#0x6002
    81dc:	2d 4c       	mov	@r12,	r13	;
    81de:	3c 40 94 01 	mov	#404,	r12	;#0x0194
    81e2:	2c 4c       	mov	@r12,	r12	;
    81e4:	8c 4d 00 00 	mov	r13,	0(r12)	;

000081e8 <.Loc.59.1>:
			 QWARK_ADDR3 = (*(volatile unsigned int  *) 0x6004);
    81e8:	3c 40 04 60 	mov	#24580,	r12	;#0x6004
    81ec:	2d 4c       	mov	@r12,	r13	;
    81ee:	3c 40 96 01 	mov	#406,	r12	;#0x0196
    81f2:	2c 4c       	mov	@r12,	r12	;
    81f4:	8c 4d 00 00 	mov	r13,	0(r12)	;

000081f8 <.Loc.60.1>:
			 break;
    81f8:	30 40 6e 83 	br	#0x836e		;

000081fc <.L9>:

	case 4 : QWARK_ADDR1 = (*(volatile unsigned int  *) 0x6000);
    81fc:	3c 40 00 60 	mov	#24576,	r12	;#0x6000
    8200:	2d 4c       	mov	@r12,	r13	;
    8202:	3c 40 92 01 	mov	#402,	r12	;#0x0192
    8206:	2c 4c       	mov	@r12,	r12	;
    8208:	8c 4d 00 00 	mov	r13,	0(r12)	;

0000820c <.Loc.63.1>:
	 	 	 QWARK_ADDR2 = (*(volatile unsigned int  *) 0x6002);
    820c:	3c 40 02 60 	mov	#24578,	r12	;#0x6002
    8210:	2d 4c       	mov	@r12,	r13	;
    8212:	3c 40 94 01 	mov	#404,	r12	;#0x0194
    8216:	2c 4c       	mov	@r12,	r12	;
    8218:	8c 4d 00 00 	mov	r13,	0(r12)	;

0000821c <.Loc.64.1>:
	 	 	 QWARK_ADDR3 = (*(volatile unsigned int  *) 0x6004);
    821c:	3c 40 04 60 	mov	#24580,	r12	;#0x6004
    8220:	2d 4c       	mov	@r12,	r13	;
    8222:	3c 40 96 01 	mov	#406,	r12	;#0x0196
    8226:	2c 4c       	mov	@r12,	r12	;
    8228:	8c 4d 00 00 	mov	r13,	0(r12)	;

0000822c <.Loc.65.1>:
	 	 	 QWARK_ADDR4 = (*(volatile unsigned int  *) 0x6006);
    822c:	3c 40 06 60 	mov	#24582,	r12	;#0x6006
    8230:	2d 4c       	mov	@r12,	r13	;
    8232:	3c 40 98 01 	mov	#408,	r12	;#0x0198
    8236:	2c 4c       	mov	@r12,	r12	;
    8238:	8c 4d 00 00 	mov	r13,	0(r12)	;

0000823c <.Loc.66.1>:
	 	 	 break;
    823c:	30 40 6e 83 	br	#0x836e		;

00008240 <.L8>:
	case 5 : QWARK_ADDR1 = (*(volatile unsigned int  *) 0x6000);
    8240:	3c 40 00 60 	mov	#24576,	r12	;#0x6000
    8244:	2d 4c       	mov	@r12,	r13	;
    8246:	3c 40 92 01 	mov	#402,	r12	;#0x0192
    824a:	2c 4c       	mov	@r12,	r12	;
    824c:	8c 4d 00 00 	mov	r13,	0(r12)	;

00008250 <.Loc.68.1>:
	 	 	 QWARK_ADDR2 = (*(volatile unsigned int  *) 0x6002);
    8250:	3c 40 02 60 	mov	#24578,	r12	;#0x6002
    8254:	2d 4c       	mov	@r12,	r13	;
    8256:	3c 40 94 01 	mov	#404,	r12	;#0x0194
    825a:	2c 4c       	mov	@r12,	r12	;
    825c:	8c 4d 00 00 	mov	r13,	0(r12)	;

00008260 <.Loc.69.1>:
	 	 	 QWARK_ADDR3 = (*(volatile unsigned int  *) 0x6004);
    8260:	3c 40 04 60 	mov	#24580,	r12	;#0x6004
    8264:	2d 4c       	mov	@r12,	r13	;
    8266:	3c 40 96 01 	mov	#406,	r12	;#0x0196
    826a:	2c 4c       	mov	@r12,	r12	;
    826c:	8c 4d 00 00 	mov	r13,	0(r12)	;

00008270 <.Loc.70.1>:
	 	 	 QWARK_ADDR4 = (*(volatile unsigned int  *) 0x6006);
    8270:	3c 40 06 60 	mov	#24582,	r12	;#0x6006
    8274:	2d 4c       	mov	@r12,	r13	;
    8276:	3c 40 98 01 	mov	#408,	r12	;#0x0198
    827a:	2c 4c       	mov	@r12,	r12	;
    827c:	8c 4d 00 00 	mov	r13,	0(r12)	;

00008280 <.Loc.71.1>:
	 	 	 QWARK_ADDR5 = (*(volatile unsigned int  *) 0x6008);
    8280:	3c 40 08 60 	mov	#24584,	r12	;#0x6008
    8284:	2d 4c       	mov	@r12,	r13	;
    8286:	3c 40 9a 01 	mov	#410,	r12	;#0x019a
    828a:	2c 4c       	mov	@r12,	r12	;
    828c:	8c 4d 00 00 	mov	r13,	0(r12)	;

00008290 <.Loc.72.1>:
	 	 	 break;
    8290:	30 40 6e 83 	br	#0x836e		;

00008294 <.L10>:

	case 6 : QWARK_ADDR1 = (*(volatile unsigned int  *) 0x6000);
    8294:	3c 40 00 60 	mov	#24576,	r12	;#0x6000
    8298:	2d 4c       	mov	@r12,	r13	;
    829a:	3c 40 92 01 	mov	#402,	r12	;#0x0192
    829e:	2c 4c       	mov	@r12,	r12	;
    82a0:	8c 4d 00 00 	mov	r13,	0(r12)	;

000082a4 <.Loc.75.1>:
	 	 	 QWARK_ADDR2 = (*(volatile unsigned int  *) 0x6002);
    82a4:	3c 40 02 60 	mov	#24578,	r12	;#0x6002
    82a8:	2d 4c       	mov	@r12,	r13	;
    82aa:	3c 40 94 01 	mov	#404,	r12	;#0x0194
    82ae:	2c 4c       	mov	@r12,	r12	;
    82b0:	8c 4d 00 00 	mov	r13,	0(r12)	;

000082b4 <.Loc.76.1>:
	 	 	 QWARK_ADDR3 = (*(volatile unsigned int  *) 0x6004);
    82b4:	3c 40 04 60 	mov	#24580,	r12	;#0x6004
    82b8:	2d 4c       	mov	@r12,	r13	;
    82ba:	3c 40 96 01 	mov	#406,	r12	;#0x0196
    82be:	2c 4c       	mov	@r12,	r12	;
    82c0:	8c 4d 00 00 	mov	r13,	0(r12)	;

000082c4 <.Loc.77.1>:
	 	 	 QWARK_ADDR4 = (*(volatile unsigned int  *) 0x6006);
    82c4:	3c 40 06 60 	mov	#24582,	r12	;#0x6006
    82c8:	2d 4c       	mov	@r12,	r13	;
    82ca:	3c 40 98 01 	mov	#408,	r12	;#0x0198
    82ce:	2c 4c       	mov	@r12,	r12	;
    82d0:	8c 4d 00 00 	mov	r13,	0(r12)	;

000082d4 <.Loc.78.1>:
	 	 	 QWARK_ADDR5 = (*(volatile unsigned int  *) 0x6008);
    82d4:	3c 40 08 60 	mov	#24584,	r12	;#0x6008
    82d8:	2d 4c       	mov	@r12,	r13	;
    82da:	3c 40 9a 01 	mov	#410,	r12	;#0x019a
    82de:	2c 4c       	mov	@r12,	r12	;
    82e0:	8c 4d 00 00 	mov	r13,	0(r12)	;

000082e4 <.Loc.79.1>:
	 	 	 QWARK_ADDR6 = (*(volatile unsigned int  *) 0x600A);
    82e4:	3c 40 0a 60 	mov	#24586,	r12	;#0x600a
    82e8:	2d 4c       	mov	@r12,	r13	;
    82ea:	3c 40 9c 01 	mov	#412,	r12	;#0x019c
    82ee:	2c 4c       	mov	@r12,	r12	;
    82f0:	8c 4d 00 00 	mov	r13,	0(r12)	;

000082f4 <.Loc.80.1>:
	 	 	 break;
    82f4:	30 40 6e 83 	br	#0x836e		;

000082f8 <.L11>:

	case 7 : QWARK_ADDR1 = (*(volatile unsigned int  *) 0x6000);
    82f8:	3c 40 00 60 	mov	#24576,	r12	;#0x6000
    82fc:	2d 4c       	mov	@r12,	r13	;
    82fe:	3c 40 92 01 	mov	#402,	r12	;#0x0192
    8302:	2c 4c       	mov	@r12,	r12	;
    8304:	8c 4d 00 00 	mov	r13,	0(r12)	;

00008308 <.Loc.83.1>:
	 	 	 QWARK_ADDR2 = (*(volatile unsigned int  *) 0x6002);
    8308:	3c 40 02 60 	mov	#24578,	r12	;#0x6002
    830c:	2d 4c       	mov	@r12,	r13	;
    830e:	3c 40 94 01 	mov	#404,	r12	;#0x0194
    8312:	2c 4c       	mov	@r12,	r12	;
    8314:	8c 4d 00 00 	mov	r13,	0(r12)	;

00008318 <.Loc.84.1>:
	 	 	 QWARK_ADDR3 = (*(volatile unsigned int  *) 0x6004);
    8318:	3c 40 04 60 	mov	#24580,	r12	;#0x6004
    831c:	2d 4c       	mov	@r12,	r13	;
    831e:	3c 40 96 01 	mov	#406,	r12	;#0x0196
    8322:	2c 4c       	mov	@r12,	r12	;
    8324:	8c 4d 00 00 	mov	r13,	0(r12)	;

00008328 <.Loc.85.1>:
	 	 	 QWARK_ADDR4 = (*(volatile unsigned int  *) 0x6006);
    8328:	3c 40 06 60 	mov	#24582,	r12	;#0x6006
    832c:	2d 4c       	mov	@r12,	r13	;
    832e:	3c 40 98 01 	mov	#408,	r12	;#0x0198
    8332:	2c 4c       	mov	@r12,	r12	;
    8334:	8c 4d 00 00 	mov	r13,	0(r12)	;

00008338 <.Loc.86.1>:
	 	 	 QWARK_ADDR5 = (*(volatile unsigned int  *) 0x6008);
    8338:	3c 40 08 60 	mov	#24584,	r12	;#0x6008
    833c:	2d 4c       	mov	@r12,	r13	;
    833e:	3c 40 9a 01 	mov	#410,	r12	;#0x019a
    8342:	2c 4c       	mov	@r12,	r12	;
    8344:	8c 4d 00 00 	mov	r13,	0(r12)	;

00008348 <.Loc.87.1>:
	 	 	 QWARK_ADDR6 = (*(volatile unsigned int  *) 0x600A);
    8348:	3c 40 0a 60 	mov	#24586,	r12	;#0x600a
    834c:	2d 4c       	mov	@r12,	r13	;
    834e:	3c 40 9c 01 	mov	#412,	r12	;#0x019c
    8352:	2c 4c       	mov	@r12,	r12	;
    8354:	8c 4d 00 00 	mov	r13,	0(r12)	;

00008358 <.Loc.88.1>:
	 	 	 QWARK_ADDR7 = (*(volatile unsigned int  *) 0x600C);
    8358:	3c 40 0c 60 	mov	#24588,	r12	;#0x600c
    835c:	2d 4c       	mov	@r12,	r13	;
    835e:	3c 40 9e 01 	mov	#414,	r12	;#0x019e
    8362:	2c 4c       	mov	@r12,	r12	;
    8364:	8c 4d 00 00 	mov	r13,	0(r12)	;

00008368 <.Loc.89.1>:
	 	 	 break;
    8368:	30 40 6e 83 	br	#0x836e		;

0000836c <.L13>:
	int war_index = QWARK_WAR_CTR;

	switch(war_index){

	case 0 :
			 break;
    836c:	03 43       	nop			

0000836e <.L12>:
	 	 	 break;

	default: break;
	}

	LED_CTRL = 0xF0;
    836e:	7c 40 90 00 	mov.b	#144,	r12	;#0x0090
    8372:	fc 40 f0 ff 	mov.b	#65520,	0(r12)	;#0xfff0
    8376:	00 00 

00008378 <.Loc.97.1>:

	//Clear index counter, and enable idempotency tracking
	QWARK_CTL = 0x01;
    8378:	3c 40 90 01 	mov	#400,	r12	;#0x0190
    837c:	9c 43 00 00 	mov	#1,	0(r12)	;r3 As==01

00008380 <.Loc.98.1>:
}
    8380:	03 43       	nop			
    8382:	21 53       	incd	r1		;
    8384:	3c 41       	pop	r12		;
    8386:	3d 41       	pop	r13		;
    8388:	00 13       	reti			

0000838a <main>:

int main()
{
    	WDTCTL = WDTPW | WDTHOLD; // Stop WDT
    838a:	3c 40 20 01 	mov	#288,	r12	;#0x0120
    838e:	bc 40 80 5a 	mov	#23168,	0(r12)	;#0x5a80
    8392:	00 00 

00008394 <.Loc.104.1>:
	//Enable Idempotency Tracking
  	eint();
    8394:	32 d2       	eint			
    8396:	03 43       	nop			

00008398 <.Loc.105.1>:
	QWARK_CTL = 0x01;
    8398:	3c 40 90 01 	mov	#400,	r12	;#0x0190
    839c:	9c 43 00 00 	mov	#1,	0(r12)	;r3 As==01

000083a0 <.Loc.108.1>:


	if(var1){
    83a0:	1c 42 02 40 	mov	&0x4002,r12	;0x4002
    83a4:	0c 93       	cmp	#0,	r12	;r3 As==00
    83a6:	02 24       	jz	$+6      	;abs 0x83ac

000083a8 <.Loc.109.1>:
	   var1 = 1;	  
    83a8:	92 43 02 40 	mov	#1,	&0x4002	;r3 As==01

000083ac <.L15>:
	}

	if(var2){
    83ac:	1c 42 04 40 	mov	&0x4004,r12	;0x4004
    83b0:	0c 93       	cmp	#0,	r12	;r3 As==00
    83b2:	02 24       	jz	$+6      	;abs 0x83b8

000083b4 <.Loc.113.1>:
	   var2 = 1;	  
    83b4:	92 43 04 40 	mov	#1,	&0x4004	;r3 As==01

000083b8 <.L16>:
	}

	if(var3){
    83b8:	1c 42 06 40 	mov	&0x4006,r12	;0x4006
    83bc:	0c 93       	cmp	#0,	r12	;r3 As==00
    83be:	03 24       	jz	$+8      	;abs 0x83c6

000083c0 <.Loc.117.1>:
	  var3 = 0xCC;
    83c0:	b2 40 cc 00 	mov	#204,	&0x4006	;#0x00cc
    83c4:	06 40 

000083c6 <.L17>:
	}

	if(var4){
    83c6:	1c 42 08 40 	mov	&0x4008,r12	;0x4008
    83ca:	0c 93       	cmp	#0,	r12	;r3 As==00
    83cc:	03 24       	jz	$+8      	;abs 0x83d4

000083ce <.Loc.121.1>:
	  var4 = 0xDD;
    83ce:	b2 40 dd 00 	mov	#221,	&0x4008	;#0x00dd
    83d2:	08 40 

000083d4 <.L18>:
	}

	if(var5){
    83d4:	1c 42 0a 40 	mov	&0x400a,r12	;0x400a
    83d8:	0c 93       	cmp	#0,	r12	;r3 As==00
    83da:	03 24       	jz	$+8      	;abs 0x83e2

000083dc <.Loc.125.1>:
	  var5 = 0xEE;
    83dc:	b2 40 ee 00 	mov	#238,	&0x400a	;#0x00ee
    83e0:	0a 40 

000083e2 <.L19>:
	}

	if(var6){
    83e2:	1c 42 0c 40 	mov	&0x400c,r12	;0x400c
    83e6:	0c 93       	cmp	#0,	r12	;r3 As==00
    83e8:	03 24       	jz	$+8      	;abs 0x83f0

000083ea <.Loc.129.1>:
	  var6 = 0xFF;
    83ea:	b2 40 ff 00 	mov	#255,	&0x400c	;#0x00ff
    83ee:	0c 40 

000083f0 <.L20>:
	}

	if(var7){
    83f0:	1c 42 0e 40 	mov	&0x400e,r12	;0x400e
    83f4:	0c 93       	cmp	#0,	r12	;r3 As==00
    83f6:	03 24       	jz	$+8      	;abs 0x83fe

000083f8 <.Loc.133.1>:
	  var7 = 0x55;
    83f8:	b2 40 55 00 	mov	#85,	&0x400e	;#0x0055
    83fc:	0e 40 

000083fe <.L21>:
	}

	if(var8){
    83fe:	1c 42 10 40 	mov	&0x4010,r12	;0x4010
    8402:	0c 93       	cmp	#0,	r12	;r3 As==00
    8404:	03 24       	jz	$+8      	;abs 0x840c

00008406 <.Loc.137.1>:
	  var8 = 0xAA;
    8406:	b2 40 aa 00 	mov	#170,	&0x4010	;#0x00aa
    840a:	10 40 

0000840c <.L22>:
	}

	


	while(1);
    840c:	30 40 0c 84 	br	#0x840c		;

00008410 <__mspabi_func_epilog_7>:
    8410:	34 41       	pop	r4		;

00008412 <__mspabi_func_epilog_6>:
    8412:	35 41       	pop	r5		;

00008414 <__mspabi_func_epilog_5>:
    8414:	36 41       	pop	r6		;

00008416 <__mspabi_func_epilog_4>:
    8416:	37 41       	pop	r7		;

00008418 <__mspabi_func_epilog_3>:
    8418:	38 41       	pop	r8		;

0000841a <__mspabi_func_epilog_2>:
    841a:	39 41       	pop	r9		;

0000841c <__mspabi_func_epilog_1>:
    841c:	3a 41       	pop	r10		;
    841e:	30 41       	ret			

00008420 <__mspabi_srli_15>:
    8420:	12 c3       	clrc			
    8422:	0c 10       	rrc	r12		;

00008424 <__mspabi_srli_14>:
    8424:	12 c3       	clrc			
    8426:	0c 10       	rrc	r12		;

00008428 <__mspabi_srli_13>:
    8428:	12 c3       	clrc			
    842a:	0c 10       	rrc	r12		;

0000842c <__mspabi_srli_12>:
    842c:	12 c3       	clrc			
    842e:	0c 10       	rrc	r12		;

00008430 <__mspabi_srli_11>:
    8430:	12 c3       	clrc			
    8432:	0c 10       	rrc	r12		;

00008434 <__mspabi_srli_10>:
    8434:	12 c3       	clrc			
    8436:	0c 10       	rrc	r12		;

00008438 <__mspabi_srli_9>:
    8438:	12 c3       	clrc			
    843a:	0c 10       	rrc	r12		;

0000843c <__mspabi_srli_8>:
    843c:	12 c3       	clrc			
    843e:	0c 10       	rrc	r12		;

00008440 <__mspabi_srli_7>:
    8440:	12 c3       	clrc			
    8442:	0c 10       	rrc	r12		;

00008444 <__mspabi_srli_6>:
    8444:	12 c3       	clrc			
    8446:	0c 10       	rrc	r12		;

00008448 <__mspabi_srli_5>:
    8448:	12 c3       	clrc			
    844a:	0c 10       	rrc	r12		;

0000844c <__mspabi_srli_4>:
    844c:	12 c3       	clrc			
    844e:	0c 10       	rrc	r12		;

00008450 <__mspabi_srli_3>:
    8450:	12 c3       	clrc			
    8452:	0c 10       	rrc	r12		;

00008454 <__mspabi_srli_2>:
    8454:	12 c3       	clrc			
    8456:	0c 10       	rrc	r12		;

00008458 <__mspabi_srli_1>:
    8458:	12 c3       	clrc			
    845a:	0c 10       	rrc	r12		;
    845c:	30 41       	ret			

0000845e <.L11>:
    845e:	3d 53       	add	#-1,	r13	;r3 As==11
    8460:	12 c3       	clrc			
    8462:	0c 10       	rrc	r12		;

00008464 <__mspabi_srli>:
    8464:	0d 93       	cmp	#0,	r13	;r3 As==00
    8466:	fb 23       	jnz	$-8      	;abs 0x845e
    8468:	30 41       	ret			

0000846a <__mspabi_srll_15>:
    846a:	12 c3       	clrc			
    846c:	0d 10       	rrc	r13		;
    846e:	0c 10       	rrc	r12		;

00008470 <__mspabi_srll_14>:
    8470:	12 c3       	clrc			
    8472:	0d 10       	rrc	r13		;
    8474:	0c 10       	rrc	r12		;

00008476 <__mspabi_srll_13>:
    8476:	12 c3       	clrc			
    8478:	0d 10       	rrc	r13		;
    847a:	0c 10       	rrc	r12		;

0000847c <__mspabi_srll_12>:
    847c:	12 c3       	clrc			
    847e:	0d 10       	rrc	r13		;
    8480:	0c 10       	rrc	r12		;

00008482 <__mspabi_srll_11>:
    8482:	12 c3       	clrc			
    8484:	0d 10       	rrc	r13		;
    8486:	0c 10       	rrc	r12		;

00008488 <__mspabi_srll_10>:
    8488:	12 c3       	clrc			
    848a:	0d 10       	rrc	r13		;
    848c:	0c 10       	rrc	r12		;

0000848e <__mspabi_srll_9>:
    848e:	12 c3       	clrc			
    8490:	0d 10       	rrc	r13		;
    8492:	0c 10       	rrc	r12		;

00008494 <__mspabi_srll_8>:
    8494:	12 c3       	clrc			
    8496:	0d 10       	rrc	r13		;
    8498:	0c 10       	rrc	r12		;

0000849a <__mspabi_srll_7>:
    849a:	12 c3       	clrc			
    849c:	0d 10       	rrc	r13		;
    849e:	0c 10       	rrc	r12		;

000084a0 <__mspabi_srll_6>:
    84a0:	12 c3       	clrc			
    84a2:	0d 10       	rrc	r13		;
    84a4:	0c 10       	rrc	r12		;

000084a6 <__mspabi_srll_5>:
    84a6:	12 c3       	clrc			
    84a8:	0d 10       	rrc	r13		;
    84aa:	0c 10       	rrc	r12		;

000084ac <__mspabi_srll_4>:
    84ac:	12 c3       	clrc			
    84ae:	0d 10       	rrc	r13		;
    84b0:	0c 10       	rrc	r12		;

000084b2 <__mspabi_srll_3>:
    84b2:	12 c3       	clrc			
    84b4:	0d 10       	rrc	r13		;
    84b6:	0c 10       	rrc	r12		;

000084b8 <__mspabi_srll_2>:
    84b8:	12 c3       	clrc			
    84ba:	0d 10       	rrc	r13		;
    84bc:	0c 10       	rrc	r12		;

000084be <__mspabi_srll_1>:
    84be:	12 c3       	clrc			
    84c0:	0d 10       	rrc	r13		;
    84c2:	0c 10       	rrc	r12		;
    84c4:	30 41       	ret			

000084c6 <.L12>:
    84c6:	3e 53       	add	#-1,	r14	;r3 As==11
    84c8:	12 c3       	clrc			
    84ca:	0d 10       	rrc	r13		;
    84cc:	0c 10       	rrc	r12		;

000084ce <__mspabi_srll>:
    84ce:	0e 93       	cmp	#0,	r14	;r3 As==00
    84d0:	fa 23       	jnz	$-10     	;abs 0x84c6
    84d2:	30 41       	ret			

000084d4 <memmove>:
    84d4:	0d 9c       	cmp	r12,	r13	;
    84d6:	0a 28       	jnc	$+22     	;abs 0x84ec

000084d8 <.L5>:
    84d8:	0f 4c       	mov	r12,	r15	;
    84da:	0e 5c       	add	r12,	r14	;

000084dc <.L3>:
    84dc:	0e 9f       	cmp	r15,	r14	;
    84de:	0d 24       	jz	$+28     	;abs 0x84fa

000084e0 <.LVL3>:
    84e0:	ef 4d 00 00 	mov.b	@r13,	0(r15)	;
    84e4:	1f 53       	inc	r15		;

000084e6 <.LVL4>:
    84e6:	1d 53       	inc	r13		;
    84e8:	30 40 dc 84 	br	#0x84dc		;

000084ec <.L2>:
    84ec:	0f 4d       	mov	r13,	r15	;
    84ee:	0f 5e       	add	r14,	r15	;
    84f0:	0c 9f       	cmp	r15,	r12	;
    84f2:	f2 2f       	jc	$-26     	;abs 0x84d8

000084f4 <.L4>:
    84f4:	3e 53       	add	#-1,	r14	;r3 As==11

000084f6 <.LVL7>:
    84f6:	3e 93       	cmp	#-1,	r14	;r3 As==11
    84f8:	01 20       	jnz	$+4      	;abs 0x84fc

000084fa <.L10>:
    84fa:	30 41       	ret			

000084fc <.L6>:
    84fc:	0b 4c       	mov	r12,	r11	;
    84fe:	0b 5e       	add	r14,	r11	;
    8500:	0f 4d       	mov	r13,	r15	;
    8502:	0f 5e       	add	r14,	r15	;
    8504:	eb 4f 00 00 	mov.b	@r15,	0(r11)	;
    8508:	30 40 f4 84 	br	#0x84f4		;

0000850c <memset>:
    850c:	0f 4c       	mov	r12,	r15	;
    850e:	0e 5c       	add	r12,	r14	;

00008510 <.L2>:
    8510:	0f 9e       	cmp	r14,	r15	;
    8512:	01 20       	jnz	$+4      	;abs 0x8516

00008514 <.Loc.104.1>:
    8514:	30 41       	ret			

00008516 <.L3>:
    8516:	cf 4d 00 00 	mov.b	r13,	0(r15)	;
    851a:	1f 53       	inc	r15		;

0000851c <.LVL4>:
    851c:	30 40 10 85 	br	#0x8510		;

00008520 <L0>:
    8520:	30 41       	ret			

00008522 <__do_global_ctors_aux>:
    8522:	0a 12       	push	r10		;
    8524:	3a 40 08 80 	mov	#32776,	r10	;#0x8008

00008528 <.L2>:
    8528:	2c 4a       	mov	@r10,	r12	;
    852a:	3c 93       	cmp	#-1,	r12	;r3 As==11
    852c:	02 20       	jnz	$+6      	;abs 0x8532
    852e:	3a 41       	pop	r10		;
    8530:	30 41       	ret			

00008532 <.L3>:
    8532:	8c 12       	call	r12		;
    8534:	3a 50 fe ff 	add	#65534,	r10	;#0xfffe
    8538:	30 40 28 85 	br	#0x8528		;

0000853c <call___do_global_ctors_aux>:
    853c:	b0 12 16 81 	call	#33046		;#0x8116
    8540:	b0 12 22 85 	call	#34082		;#0x8522

00008544 <L0>:
    8544:	b0 12 4e 80 	call	#32846		;#0x804e

00008548 <.Loc.19.1>:
    8548:	b0 12 40 80 	call	#32832		;#0x8040

0000854c <.Loc.20.1>:
    854c:	30 41       	ret			

0000854e <__msp430_fini>:
    854e:	b0 12 5c 80 	call	#32860		;#0x805c

00008552 <L0>:
    8552:	b0 12 c8 80 	call	#32968		;#0x80c8

00008556 <L0>:
    8556:	30 41       	ret			
